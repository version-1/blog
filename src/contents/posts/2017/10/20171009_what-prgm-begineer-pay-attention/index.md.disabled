---
templateKey: blog-post
language: ja
title: プログラミング初心者の人が身につける習慣
slug: /2017/10/09/what-prgm-begineer-pay-attention
createdAt: 2017-10-09 09:38:45
updatedAt: 2020-01-02 08:50:04
thumbnail: /2017/10/20171009_what-prgm-begineer-pay-attention/thumbnail.jpg
categories:
  - engineering
  - for-beginner
tags:
  - learning
  - liefehack
related:
  - dummy
---


どうも@version1です。
今日はプログラミング初心者の人
に身につけてもらいたい習慣について、
考えてみました！！

私自身も、エンジニアとしてはまだまだで、
あまり偉そうなことを言える立場ではないのですが、
今までやってきて大切だと感じたことを記事として
残しておこうと思います。

<div class="adsense-double-rect"></div>

<h2 class="chapter">エラーが出たらまずログを確認</h2>

これ意外とできない人が多いです。。

これができていないと
「すみません、なんかエラーになっているですけど・・・？」
というSOSしか出せません。

エラーが出た時に最初にログを確認する習慣がついていると
「こんなエラーが出てるんですけど？何か原因わかりますか？」
というような質問ができます。

本当に始めたころばかりのうちは良いですが、
それなりのキャリアがあるのに前者のような
質問をしてくる人は、
エラーのメッセージとかエラーが出た状況を
イチイチヒアリングしないといけないので
<strong>かなり面倒臭いです。</strong>

後者であれば、自分がすでに経験したメッセージかどうかを
即座に確認できて、アドバイスがしやすく、
質問されてもかなり気持ちよく対応できます。

コンソールを触っている時のエラーメッセージでも、
webサイトで出るエラーでもいいのですが、

<strong>エラーが出たら、まずログかメッセージを確認する。</strong>
という習慣をまずは身につけましょう。

慣れてきたら、
<strong>apacheとかDBのミドルウェアのログ</strong>とかの居所を突き止めて
（だいたいググれば出てくる）
そこのエラーを元に調査をすすめてくれると良い感じですね。

これが習慣付いてくると、
自分の開発中のエラー以外にも人が出したエラーへの対応や
障害対応への<strong>スピードが上がっていきます。</strong>
エラーの箇所を特定しやすくするためにメッセージを出しているのに、
それを読まないでエラーに対処するような
愚かなことはしないほうが良いですよね。

<h2 class="chapter">コードをよく読むこと</h2>

人のコード読むのって辛いですよね。。
自分の書き方と違っていて、
なんかスルスルと読めなくって億劫になりがちです。
<strong>コードを書くこと</strong>は楽しくて誰でもやると思うので、
ここには、書きません。

なので、
ここではあえて

<strong>コードを読むこと</strong>

を強調したいです。


特に、
<strong>機能修正など既存のコードに手を加える場合</strong>って、
本当にこれをしないと<strong>バグや冗長なコードの山</strong>を築くことに
なります。既存のコードに手を加える場合は、必ず、周辺のコードを読んで周りのコードの挙動を理解してから
コードの修正方針を決めてから、コードを修正するようにしましょう。
自分が直すメソッドしか読まないとかはなしです。

修正するメソッドが3箇所から呼ばれていたら、どういう状況でそのメソッドが呼ばれているのかと
呼び出し元のメソッドの挙動は
絶対に確認すべきです。

修正方針を決める時の
チェックポイントは以下3つになります。

<ul>
 	<li>修正するメソッドがどこから呼ばれているのか</li>
 	<li>自分が作ろうとしてるメソッドと同じようなメソッドはないか</li>
 	<li>呼び出し元の挙動</li>
</ul>

挙動ってどの程度理解すれば良いの？
という疑問あると思いますが、
実際に動かしてみて<strong>画面がどのように変わる</strong>かや、
<strong>各変数にどういう形でデータが格納されるのか</strong>
というのは理解しておく必要があります。

これら三つのことを意識しておくと
修正する箇所も最低限に絞れるはずです。

余計な変更を加える必要もないので
バグを出してしまう可能性も狭められるのではないでしょうか。

<h2 class="chapter">技術は手段であることを意識する</h2>

技術はあくまでも手段です。

たまに
「プログラミングの入門書を一通り勉強しましたが、
次何をすればいいですか？」
という人がいますが、
これは完全にインプットが目的となってしまっていいます。

何か作りたいものがあって、
その手段を学ぶのがプログラミングなので、
それを学ぶこと自体が勉強になってしまっている
ものは続かないです。

こういう方は
ひとまず自分のあったらいいなと思うものを
作ってみるのが良いです。

僕は、
特に作りたいものが思いつかないものは
電卓とか身近なものを作ってみますね。

<a href="https://ver-1-0.net/2017/04/09/electron-calculator-1/">Electron の勉強がてら電卓を作ってみた~その① < インストール編 >~</a>
<a href="https://ver-1-0.net/2017/04/10/electron-calculator-2/">Electron の勉強がてら電卓を作ってみた~その② < 実装編 >~</a>

&nbsp;

「Railsやってます。」
「CakePHPやってます。」
という人もいますが、
その先が考えられてないとダメです。

明確に作りたいものがないけど、
Rails,CakePHPなどができれば、
エンジニアとして就職しやすいので
そういう言い方をするのかと思います。

「〇〇という会社に転職したいのでRailsやってます。」
とかだと、
プログラミング自体をしっかり手段として
位置づけられていて良いと思います。
（就職・転職するので、あれば未経験可のところから始めるというのも
ありかとは思いますが・・・）

すでにエンジニアとして
働いているけど
「なんか違うな・・」
と思っている人もいるかもしれませんが、
そもそもなんでこの仕事選んだっけ？
や
目標を実現するために自分のスキルが
どのように使えるか考えられると良いのではと思います。


こういうのは一発で答えを出すのが難しいので、
定期的に考え続けられると良いですよね。

<h2 class="chapter">まとめ</h2>

以上、
初心者に必要な習慣三つを偉そうに書きましたが、
これが現時点での私の答えです。
<ul>
 	<li>エラーが出たら、まずログかメッセージを確認する</li>
 	<li>コードをよく読む</li>
 	<li>技術は手段であることを意識する</li>
</ul>

どれも重要なことだと思うので、
記事にしました。
（自分のメモとしての意味もあるかと思いますが）

みなさんはどうですかね。
これが現状の私の意見です。

自分も書きながら
「これできてるかなぁ」と
自問自答しながら書いていますw

では、
以上です。

<div class="adsense-double-rect"></div>
