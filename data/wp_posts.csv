"id","post_date","post_modified","post_title","post_name","thumbnail","categories","post_content"
"1804","2018-01-09 01:15:11","2018-10-11 23:58:59","会社やめたら、会社に関する不満を考えなくなってきた","action-report","https://ver-1-0.net/wp-content/uploads/2017/12/active_report.jpg","freelance","&nbsp;

今週の振り返りです。

&nbsp;
<h2>振り返りの目的</h2>
・自分の活動状況を公開してフリーランスの生活を可視化する。
（普通に生活しています。生きています。というのをお伝えする。）
・良いことがあったらドヤする。
・一年スパン、三ヶ月スパンでの目標の確認及び達成度合いの確認。
・自分のための進捗確認。ロギング。（2017/1/8追加）

&nbsp;
<h2>報告</h2>
&nbsp;

今週は年始にお休みしてゆっくりしたのち、二日間だけ現場で作業しました。

徐々に現場にも慣れ始めましたが、まだまだ知らないことも多く知らない項目にあたっては都度調べたり、聞いたりしています。

また、別のサイトも年末に無事オープンしてこれから記事を入れたり、
（目標の記事数には満たなかったけどリリース優先で公開しました。）
twitterで集客したりなどコツコツやっていきます。

&nbsp;
<h2>所感 | 会社やめたら、会社に関する不満を考えなくなってきた</h2>
&nbsp;

脱サラしてすでに二ヶ月ほど経過しているのですが、最近会社勤めのストレスみたいなものがなくなりました。（会社に入っていないから当たり前なんですけど、、）

&nbsp;

会社にいた頃は会社ってなんでこうなんだろう？月に残業も含めて200時間も働いているのにこれだけしか稼げないのか、200時間という貴重な時間を売っているのに。

という感じでふとした時に考えたり、ツイートしていたりしましたが今はあまりそういう風に考えなくなりました。

&nbsp;

今はどちらかというと、どうすれば時間あたりの報酬を増やして効率化するかということを考えるようになり、変に会社の不満をぐちぐち考える無駄な時間がなくなりました。

会社の愚痴とか言っている暇があれば、自分で稼げる方法を探して実践した方が良いでしょと考える質なので、この点は独立してよかったなんて思いました。

あとは、理想の売り上げが出れば万々歳ですね。

&nbsp;

まあ独立して別の悩みもできたので、トレードオフなところはありますよね。
結局は、自分がどちらが良いかということだと思います。

どの道を選んでもだいたい大変なので、自分がやってみたいと思えるような選択をして行きたいですね。"
"1799","2018-01-01 18:04:08","2018-10-11 23:59:08","2018年やること・やらないことリスト -","action-report-1225","https://ver-1-0.net/wp-content/uploads/2017/12/active_report.jpg","freelance","&nbsp;

活動報告2回目になります。

週4日で働いてる現場も無事仕事納めをし、安心して年を越せそうです。
今月は無事契約を更新できたので引き続き同じ現場で働かせて頂きます。

&nbsp;
<h2 id=""toc_id_5"">振り返りを行う目的(復習）</h2>
&nbsp;

目的も一度だけでは忘れてしまいがちなので、復習します。
（復習はしつつも、適宜改善はしていきたいです。）

目的は以下の通りです。2018年も引き続きこれでやっていきます。
（まだ2回目ですが）

・自分の活動状況を公開してフリーランスの生活を可視化する。
（普通に生活しています。生きています。というのをお伝えする。）
・良いことがあったらドヤする。
・一年スパン、三ヶ月スパンでの目標の確認及び達成度合いの確認

&nbsp;
<h2>新年の抱負</h2>
&nbsp;
<h3>やること</h3>
&nbsp;

<strong>・フリーランスとして1年間生き延びる。</strong>

これは一番の目標ですかね。念願のフリーランスにはなったものの、なるだけなら誰でもなれるのでしっかり収入を維持しつつまずは一年フリーランスとしてサバイブするということです。

&nbsp;

<strong>・エンジニアとして特定の分野の技術を固める。</strong>

エンジニアの勉強すべきことってやっぱり多くて、勉強の時間は十分に取らないといけないのですが、やっぱり習得できる範囲というのは限られています。あれもこれもとならず自分のフィールドを決めてそこのフィールドでのレベルアップを図っていきたいです。今はRailsからフロントにかけてのところでReactについてもっと知識をつけて行ければと思います。

&nbsp;

<strong>・より多くより、「より少なくより良く」</strong>

フリーランスは自由度が高く基本何をやってもいいんですけど、それで色々やってみたけどやっただけで終わってしまったというのでは身にならないので、ある程度注力する分野を決めてそこを掘っていきたいです。限られた資源を分散することなく効果的に集中していきたいです。

これは読書にも言えることで、たくさんの本を読むというよりはこれは良いと思った本を繰り返し読むという本の読み方に変えていきたいです。最近では、Amazonでポチッとするとすぐに本を買えてしまうのであれこれ読んでしまいがちなのですが、本の内容を忘れてしまっていたりするので一冊の本を通して理解できるまで繰り返し読むということをしていきたいです。

&nbsp;

<strong>・活動報告を1年間継続する。</strong>

この一年ブログを書き続けてなんとか100記事達成できました。短期間で集中してというのも良いのですが継続することがその分野での深みや差別化になると思うので大きなインパクトはなくとも細く長く続けていきたいななんて思っています。

あとは、来年書き続けた記事を振り返ったりしたら、あの時こんなこと考えていたのねなんてことがわかったりして面白そうだからです。

&nbsp;

<strong>・英語のドキュメントを読破する。</strong>

StackOverFlowくらいの英語なら読めるのですが、ドキュメントなどちょっと長めの文章になると体力が持たないです。。あとは一文一文の意味はわかるのですが文全体としての伝えたいことやサマリがパッと読みながら作れないので、英語のドキュメントを読むのが苦手で日本語のドキュメントに逃げがちです。

2018年はこいつを倒せるように、どれだけ時間かかっても良いので英語のドキュメントと向き合っていきたいです。

&nbsp;

<strong>・収益性アップ。目指せ月10万円。</strong>

現状収入の口が少ないので、収入の口を二つ以上にしていきたいです。それの第一の矢としてこれと並行してサイトを作成したいのですが、そこで月10万円でもいいので収益を出していきたいです。

&nbsp;
<h3>やらないこと</h3>
<strong>・興味・関心のままに多くに手を出さない。</strong>

これは日常の雑多なことに気を取られずに<strong>やるべきこと・重要なことに集中しよう</strong>という戒めですね。やりたいと思ったらすぐにはじめず一旦、時間を設けてそのアイデアを練る時間を作る。他のタスクと比較して重要だと思ったら、何かを捨ててそのプロジェクトを始めるというプロセスをしっかり回していきたいです。

やろうとするとタスクは無限に増えていくので、どんどん雑多なことに時間を奪われてしまいがちです。これを意識して取捨選択して、リソースを効率よく使えるようになりたいです。

&nbsp;

<strong>・部屋を散らかったままにしない。</strong>

やりたい作業があるとついつい周りの環境を整えずにやり始めてしまう癖があるのですが、部屋が散らかっていると集中力が保てません。仕事部屋の整頓もしていきます。

&nbsp;

<strong>・働きすぎない、定期的に何もしない日を作る。</strong>

やるべきことをやらないといけないというのはありますが、年中無休でずっと働き続けるためにフリーランスになった訳ではないので、意識的に栄養補給の時間を設けます。意識的に仕事と関係ないことをするかあるいは何もしない時間を作る。これはどんなに忙しくてもやっていきたいです。

&nbsp;
<h2>まとめ</h2>
全然関係ないですが、大晦日のAbemaTVの朝青龍の企画は、10年ほど前の大晦日のK-1のワクワク感を感じました（後半3人だけ）。

インターネットでこれだけ面白いコンテンツが見れるようになってきてるので、本当すごいなと思いました。テレビのコンテンツ自体が飽和気味（客観的に飽和しているかは知りません、個人的に面白いテレビが減ってきたなという意味です。）Abemaさんにはこのような面白い企画をどんどんやって行って欲しいなと思っています。

大晦日になんとなく見てみた番組で時代の変化が見れて嬉しかったです。今年は仮想通貨もありますし、こういった変化にもアンテナ張りながら、満足した一年が過ごせればなと思っています。

今年もよろしくお願いいたします。"
"1841","2018-01-16 09:19:56","2018-10-14 14:40:20","やりたくないことリスト","action-report-2","https://ver-1-0.net/wp-content/uploads/2017/12/active_report.jpg","colum","&nbsp;

今週の振り返りです。
今週と言いつつもう火曜日になってしまいました。

&nbsp;
<h2>振り返りの目的</h2>
&nbsp;

・自分の活動状況を公開してフリーランスの生活を可視化する。
・良いことがあったらドヤする。
・一年スパン、三ヶ月スパンでの目標の確認及び達成度合いの確認。
・自分のための進捗確認。ロギング。（2017/1/8追加）

&nbsp;
<h2>やったこと</h2>
&nbsp;

・記事2本執筆

・開発中のWebサービスの土台作り

&nbsp;

先週は週4で入れてもらっている現場が忙しくなかなか、自分の作業の時間が取れませんでした。

4日くらい連続で終電くらいまで仕事すると、残業グセというかだらだら仕事してしまう癖が出るので定期的に締めて行きたいですね。

実装し始めると、実装に集中してしまって、そもそも今やる必要があるのかなどが考えられなくなるので気をつけていかないといけません。

会社に勤めていると最初のうちは早く帰れていたけど、だんだん重めの仕事を任されるようになって帰れないとかよくありますよね。
長時間働くことで問題を解決するというのは、あまり幸せになれなそうなので、極力避けていきたいですね。

&nbsp;

現場の仕事を頑張る分他の仕事ができなくなるので、そこのバランスも考えながら働いて行きたいですね。

&nbsp;
<h2>今週読んだ本</h2>
&nbsp;

今週読んだ本
・非常識な成功法則

&nbsp;
<div class=""cstmreba"">
<div class=""booklink-box"">
<div class=""booklink-image""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4894511304/llg01-22/"" target=""_blank"" rel=""noopener""><img style=""border: none;"" src=""https://images-fe.ssl-images-amazon.com/images/I/419pxgX5jVL._SL320_.jpg"" /></a></div>
<div class=""booklink-info"">
<div class=""booklink-name"">

<a href=""http://www.amazon.co.jp/exec/obidos/asin/4894511304/llg01-22/"" target=""_blank"" rel=""noopener"">非常識な成功法則―お金と自由をもたらす8つの習慣</a>
<div class=""booklink-powered-date"">posted with <a href=""https://yomereba.com"" target=""_blank"" rel=""nofollow noopener"">ヨメレバ</a></div>
</div>
<div class=""booklink-detail"">神田 昌典 フォレスト出版 2002-06-01</div>
<div class=""booklink-link2"">
<div class=""shoplinkamazon""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4894511304/llg01-22/"" target=""_blank"" rel=""noopener"">Amazon</a></div>
<div class=""shoplinkkindle""><a href=""http://www.amazon.co.jp/gp/search?keywords=%94%F1%8F%ED%8E%AF%82%C8%90%AC%8C%F7%96%40%91%A5%81%5C%82%A8%8B%E0%82%C6%8E%A9%97R%82%F0%82%E0%82%BD%82%E7%82%B78%82%C2%82%CC%8FK%8A%B5&amp;__mk_ja_JP=%83J%83%5E%83J%83i&amp;url=node%3D2275256051&amp;tag=llg01-22"" target=""_blank"" rel=""noopener"">Kindle</a></div>
<div class=""shoplinkrakuten""><a href=""https://hb.afl.rakuten.co.jp/hgc/163854b7.d97e8d5b.163854b8.3c41ae34/?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F1456317%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F"" target=""_blank"" rel=""noopener"">楽天ブックス</a></div>
<div class=""shoplinkseven""><a href=""https://px.a8.net/svt/ejp?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2&amp;a8ejpredirect=http%3A%2F%2F7af-ent.omni7.jp%2Frelay%2Faffiliate%2FentranceProcess.do%3Furl%3Dhttp%253A%252F%252F7net.omni7.jp%252Fsearch%252F%253FsearchKeywordFlg%253D1%2526keyword%253D4-89-451130-9%252520%25257C%2525204-894-51130-9%252520%25257C%2525204-8945-1130-9%252520%25257C%2525204-89451-130-9%252520%25257C%2525204-894511-30-9%252520%25257C%2525204-8945113-0-9"" target=""_blank"" rel=""noopener"">7net</a><img src=""https://www17.a8.net/0.gif?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2"" alt="""" width=""1"" height=""1"" border=""0"" /></div>
</div>
</div>
<div class=""booklink-footer""></div>
</div>
</div>
また、読んでしまいました。。自己啓発本。ノウハウコレクターにはならないように気をつけたいのですが、ついつい興味で買って読んでしまうんですよね。

もはや趣味みたいなものですね。笑

この本の良いところは、やらないことリストを作って、やりたいことリストを明確化する。すでに既出なものに聞こえますが、本自体が古いので当時はあまり言われていなかったのかも
（詳しいことは知りません。。）

就職でも転職でも人生の選択では、やりたいことが明確でないとなんとなくみんなが選んでいるからとか、皆が納得するような選択をしてしまいがちです。

やらないことリストを明確に持っておくとそういった時に他人本位ではない、自分の納得する選択ができるようになるはずです。

&nbsp;
<blockquote>「やりたくないこと」を明確化する前に、「やりたいこと」を目標としてしまうと悲劇だ。

なぜなら、<strong>「やりたいこと」 のなかには、「やりたくないこと」 が含まれているからである。</strong>

「会社を大きく する」 ということだけを目標にしたとする。 すると、そのために嫌な客と付き合わなければならない。 仕事優先 となり、 家族との休暇はほとんど取れない。 その結果、子供との会話がなくなっていく。 本当は、家族を幸せ にするために、と思ってやりはじめた仕事が、家族をバラバラにしてしまう。自分が望んでいた生活はこんなんじゃ ない、 なんて後から騒いでも、もう元には戻らない。

<strong>それって最悪じゃない？</strong></blockquote>
神田昌典. 非常識な成功法則【新装版】 (Kindle Locations 417-423). . Kindle Edition.
<div class=""cstmreba"">
<div class=""booklink-box"">
<div class=""booklink-image""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4894511304/llg01-22/"" target=""_blank"" rel=""noopener""><img style=""border: none;"" src=""https://images-fe.ssl-images-amazon.com/images/I/419pxgX5jVL._SL320_.jpg"" /></a></div>
<div class=""booklink-info"">
<div class=""booklink-name"">

<a href=""http://www.amazon.co.jp/exec/obidos/asin/4894511304/llg01-22/"" target=""_blank"" rel=""noopener"">非常識な成功法則―お金と自由をもたらす8つの習慣</a>
<div class=""booklink-powered-date"">posted with <a href=""https://yomereba.com"" target=""_blank"" rel=""nofollow noopener"">ヨメレバ</a></div>
</div>
<div class=""booklink-detail"">神田 昌典 フォレスト出版 2002-06-01</div>
<div class=""booklink-link2"">
<div class=""shoplinkamazon""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4894511304/llg01-22/"" target=""_blank"" rel=""noopener"">Amazon</a></div>
<div class=""shoplinkkindle""><a href=""http://www.amazon.co.jp/gp/search?keywords=%94%F1%8F%ED%8E%AF%82%C8%90%AC%8C%F7%96%40%91%A5%81%5C%82%A8%8B%E0%82%C6%8E%A9%97R%82%F0%82%E0%82%BD%82%E7%82%B78%82%C2%82%CC%8FK%8A%B5&amp;__mk_ja_JP=%83J%83%5E%83J%83i&amp;url=node%3D2275256051&amp;tag=llg01-22"" target=""_blank"" rel=""noopener"">Kindle</a></div>
<div class=""shoplinkrakuten""><a href=""https://hb.afl.rakuten.co.jp/hgc/163854b7.d97e8d5b.163854b8.3c41ae34/?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F1456317%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F"" target=""_blank"" rel=""noopener"">楽天ブックス</a></div>
<div class=""shoplinkseven""><a href=""https://px.a8.net/svt/ejp?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2&amp;a8ejpredirect=http%3A%2F%2F7af-ent.omni7.jp%2Frelay%2Faffiliate%2FentranceProcess.do%3Furl%3Dhttp%253A%252F%252F7net.omni7.jp%252Fsearch%252F%253FsearchKeywordFlg%253D1%2526keyword%253D4-89-451130-9%252520%25257C%2525204-894-51130-9%252520%25257C%2525204-8945-1130-9%252520%25257C%2525204-89451-130-9%252520%25257C%2525204-894511-30-9%252520%25257C%2525204-8945113-0-9"" target=""_blank"" rel=""noopener"">7net</a><img src=""https://www17.a8.net/0.gif?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2"" alt="""" width=""1"" height=""1"" border=""0"" /></div>
</div>
</div>
<div class=""booklink-footer""></div>
</div>
</div>"
"1870","2018-01-23 09:23:51","2018-10-11 23:58:05","学ぶことを学ぶ","action-report-3","https://ver-1-0.net/wp-content/uploads/2017/12/active_report.jpg","freelance","雪ですね。

外に雪が降ろうが、雹が降ろうがエンジニアリングは室内競技なので、本日も稼働しております。

&nbsp;
<h2 id=""toc_id_1"">振り返りの目的</h2>
&nbsp;

・自分の活動状況を公開してフリーランスの生活を可視化する。
・良いことがあったらドヤする。
・一年スパン、三ヶ月スパンでの目標の確認及び達成度合いの確認。
・自分のための進捗確認。ロギング。（2017/1/8追加）

&nbsp;
<h2>やったこと・所感</h2>
&nbsp;
<h3>やったこと</h3>
・記事執筆5本くらい

・rails + reactでの個人サービスの開発

&nbsp;
<h3>常駐型フリーランスは多くの現場を経験できるので経験値の溜まり方が早い</h3>
&nbsp;

React面白いですね。ちょっと今更感もあるかもしれないのですが、最近新しい技術触ってシステム開発できるているので、覚えることが多くて面白いです。

また、新しい技術をキャッチアップしていこうという意識がある現場で働けているので、<strong>日々の仕事でも割と新しい技術を使えて業務中も捗っています。</strong>エンジニアは技術力も大事ですが環境もすごい大事だなとひしひしと感じております。

一方でこれに関連して、フリーランスになると<strong>多くの現場に入る機会が増えるので必然的に知識の幅は広がるのかな</strong>という感じがしています。

現場にジョインした当初はわからないことが多く必死で<strong>キャッチアップするので吸収が早</strong>いです。

会社員もそうですが、<strong>長いこと現場にいると作業がマンネリ化して自分のできる範囲でしか仕事をしなくなってしまう</strong>ので、多くの現場を経験できるフリーランスは経験値が溜まりやすいです。

もちろん、常にキャッチアップから入ると単価が上がらないという問題もあるので経験値がたまる=稼ぎやすいということではないです。
あくまで、中途半端に会社員続けていたころよりは学びも増えているなというのが今の実感です。

&nbsp;

&nbsp;
<h2>今週読んだ本 | SOFT SKILLS ソフトウェア開発者の人生マニュアル</h2>
<a href=""https://ver-1-0.net/2018/01/23/action-report-3/soft-skill/"" rel=""attachment wp-att-1873""><img class=""alignnone size-full wp-image-1873"" src=""https://ver-1-0.net/wp-content/uploads/2018/01/soft-skill.jpg"" alt="""" width=""352"" height=""499"" /></a>

&nbsp;

以前読んだ本なのですが、エンジニア向けの本ですが、技術的なことはほとんど書いておらずキャリアの作り方や面接での自己アピールの方法、資産運用などエンジニアのためのライフハックがまとめられた一冊です。

著者は「<a href=""https://simpleprogrammer.com/"">SimpleProgrammer</a>」を運営しているジョン・ソメンズ氏です。

今回は、この本の<strong>第三部「学ぶことを学ぶ</strong>」の部分を重点的に読んでみました。

第三部では、10ステッププロセスという新しい技術を学ぶ際の方法論が語られています。

10ステッププロセスは文字通り10ステップに学習のフェーズを分けるものです。

それらのステップは最初の6ステップで<strong>学習する範囲・成功の定義・参考資料の選定</strong>、残りの3ステップで<strong>環境構築などの導入・実践・復習の繰り返し</strong>、最後の1ステップで<strong>人に教えるなどのアウトプット</strong>というように分けられます。

個人的には、

この方法論で明確に参考にする資料は本なら<strong>1,2冊に絞るようにと明確に書いている点</strong>と新しく学ぶ技術の環境構築が終わったらあとは<strong>興味のままにその技術をいじってみて学びを深めるというプロセスを組み込んでいる点</strong>が印象出来でした。

プログラミングは、本を読んでみるだけでは身につかず実際に使ってみたときに詰まってみて初めて知見を得られたりするのでこの二つのポイントは重要だなと読んでみて感じました。

今回での紹介はここまでですが、他にも面白い部分があるので興味のある方は読んでみてください。

一点注意としては、アメリカでのライフハックを前提にしているので参考にならない部分も一部ありますが、こういう考え方もあるのねという気づきもあるので一度読んでみることをオススメします。

&nbsp;
<div class=""cstmreba"">
<div class=""booklink-box"">
<div class=""booklink-image""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4822251551/llg01-22/"" target=""_blank"" rel=""noopener""><img style=""border: none;"" src=""https://images-fe.ssl-images-amazon.com/images/I/51dyjeO1dzL._SL320_.jpg"" /></a></div>
<div class=""booklink-info"">
<div class=""booklink-name"">

<a href=""http://www.amazon.co.jp/exec/obidos/asin/4822251551/llg01-22/"" target=""_blank"" rel=""noopener"">SOFT SKILLS ソフトウェア開発者の人生マニュアル</a>
<div class=""booklink-powered-date"">posted with <a href=""https://yomereba.com"" target=""_blank"" rel=""nofollow noopener"">ヨメレバ</a></div>
</div>
<div class=""booklink-detail"">ジョン・ソンメズ 日経BP社 2016-05-20</div>
<div class=""booklink-link2"">
<div class=""shoplinkamazon""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4822251551/llg01-22/"" target=""_blank"" rel=""noopener"">Amazon</a></div>
<div class=""shoplinkkindle""><a href=""http://www.amazon.co.jp/exec/obidos/ASIN/B01GDS0994/llg01-22/"" target=""_blank"" rel=""noopener"">Kindle</a></div>
<div class=""shoplinkrakuten""><a href=""https://hb.afl.rakuten.co.jp/hgc/163854b7.d97e8d5b.163854b8.3c41ae34/?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F14141677%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F"" target=""_blank"" rel=""noopener"">楽天ブックス</a></div>
<div class=""shoplinkseven""><a href=""https://px.a8.net/svt/ejp?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2&amp;a8ejpredirect=http%3A%2F%2F7af-ent.omni7.jp%2Frelay%2Faffiliate%2FentranceProcess.do%3Furl%3Dhttp%253A%252F%252F7net.omni7.jp%252Fsearch%252F%253FsearchKeywordFlg%253D1%2526keyword%253D4-82-225155-0%252520%25257C%2525204-822-25155-0%252520%25257C%2525204-8222-5155-0%252520%25257C%2525204-82225-155-0%252520%25257C%2525204-822251-55-0%252520%25257C%2525204-8222515-5-0"" target=""_blank"" rel=""noopener"">7net</a><img src=""https://www17.a8.net/0.gif?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2"" alt="""" width=""1"" height=""1"" border=""0"" /></div>
</div>
</div>
<div class=""booklink-footer""></div>
</div>
</div>
&nbsp;

&nbsp;

&nbsp;"
"1910","2018-02-04 10:34:48","2018-10-11 23:57:44","whyから始めよう","action-report-4","https://ver-1-0.net/wp-content/uploads/2017/12/active_report.jpg","freelance","<h2 id=""toc_id_1"">振り返りの目的</h2>
&nbsp;

・自分の活動状況を公開してフリーランスの生活を可視化する。
・良いことがあったらドヤする。
・一年スパン、三ヶ月スパンでの目標の確認及び達成度合いの確認。
・自分のための進捗確認。ロギング。

&nbsp;

[after_intro]

&nbsp;
<h2>今週の作業</h2>
&nbsp;
<ul>
 	<li>別でやっているサイトの修正・記事執筆など</li>
 	<li>月末の請求書をMFクラウドのAPI使って作れるようにしてみた</li>
 	<li>個人開発のサービスを進めた</li>
</ul>
&nbsp;
<h3>毎月作成する請求書をMFクラウドのAPI使って作れるようにしてみた</h3>
&nbsp;

個人事業の事務処理をなるべく自動化したいななんて考えて、MFクラウドのAPIを使って自動で請求書を作成・ダウンロードできるようにしました。

が、<strong>APIはOAuth認証でhttpsのサイトへのコールバックが必要な</strong>ので、ローカルでお手軽にというわけには行きませんでした。。（ローカルでもhttpsとかの環境つくればいけんのかな？）

結局1日くらいかけて、請求書出せるようにしましたが、あんまりコスパはよくない気がしています。（omniauth依存していたので、OAuthを自前でやるという経験はつめたかも）

この作業中に自分用の業務ツールサイトみたいなものを作ったので、この他に作業の自動化に際してhttpsとかが必要になってきたりしたら役にたつかもしれませんね。

&nbsp;
<h3>個人開発のサービスについて</h3>
&nbsp;

2018年の目標として、ちゃんと作り込んだWebサービス出したいよね。というのがあるので年末くらいからしこしこ作りはじめています。

やはり週4日の常駐作業などもあり、進捗は思わしくないですがバックエンドでコツコツ進めています。

&nbsp;

コンセプトは<strong>「小規模プロジェクトのSNS化」</strong>です。

色々な表現はあるのですが、<strong>個人で進めているプロジェクトってフィードバックがほしかったり、協力者が欲しかったりしますよね。</strong>

ここにあげるのは「プロジェクト」ていうかっちりしたものでなく雑多なものでも良いのですが、個々人が抱えているタスクやプロジェクトをネット上に公開して、協力者を募ったり、コメントをもらったりできる場が作れればなんて気がしています。

「会社ではコード書いているけど、なんかプライベートで開発したいなぁ」って感じた時にこのサイトにアイデアを投稿してみたり、面白そうなプロジェクトにコンタクトとってみたりとかできると良いななんて思いながら作っています。

リリース時期等は現状未定ですが、こんなの作っています。ということで

&nbsp;
<h2>今週の本 | Whyから始めよ</h2>
Webサービス作ろうと思った時にどうやってユーザを集めようかな？そもそもどういうサービスを作ろうかな？なんて考えますよね。

そんななあなたにこの本はいかがでしょう？

&nbsp;
<div class=""cstmreba"">
<div class=""booklink-box"">
<div class=""booklink-image""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4532317673/llg01-22/"" target=""_blank"" rel=""noopener""><img style=""border: none;"" src=""https://images-fe.ssl-images-amazon.com/images/I/415TYu5cQ4L._SL320_.jpg"" /></a></div>
<div class=""booklink-info"">
<div class=""booklink-name"">

<a href=""http://www.amazon.co.jp/exec/obidos/asin/4532317673/llg01-22/"" target=""_blank"" rel=""noopener"">ＷＨＹから始めよ！―インスパイア型リーダーはここが違う</a>
<div class=""booklink-powered-date"">posted with <a href=""https://yomereba.com"" target=""_blank"" rel=""nofollow noopener"">ヨメレバ</a></div>
</div>
<div class=""booklink-detail"">サイモン・シネック 日本経済新聞出版社 2012-01-25</div>
<div class=""booklink-link2"">
<div class=""shoplinkamazon""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4532317673/llg01-22/"" target=""_blank"" rel=""noopener"">Amazon</a></div>
<div class=""shoplinkkindle""><a href=""http://www.amazon.co.jp/gp/search?keywords=%82v%82g%82x%82%A9%82%E7%8En%82%DF%82%E6%81I%81%5C%83C%83%93%83X%83p%83C%83A%8C%5E%83%8A%81%5B%83_%81%5B%82%CD%82%B1%82%B1%82%AA%88%E1%82%A4&amp;__mk_ja_JP=%83J%83%5E%83J%83i&amp;url=node%3D2275256051&amp;tag=llg01-22"" target=""_blank"" rel=""noopener"">Kindle</a></div>
<div class=""shoplinkrakuten""><a href=""https://hb.afl.rakuten.co.jp/hgc/163854b7.d97e8d5b.163854b8.3c41ae34/?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F11466366%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F"" target=""_blank"" rel=""noopener"">楽天ブックス</a></div>
<div class=""shoplinkseven""><a href=""https://px.a8.net/svt/ejp?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2&amp;a8ejpredirect=http%3A%2F%2F7af-ent.omni7.jp%2Frelay%2Faffiliate%2FentranceProcess.do%3Furl%3Dhttp%253A%252F%252F7net.omni7.jp%252Fsearch%252F%253FsearchKeywordFlg%253D1%2526keyword%253D4-53-231767-6%252520%25257C%2525204-532-31767-6%252520%25257C%2525204-5323-1767-6%252520%25257C%2525204-53231-767-6%252520%25257C%2525204-532317-67-6%252520%25257C%2525204-5323176-7-6"" target=""_blank"" rel=""noopener"">7net</a><img src=""https://www17.a8.net/0.gif?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2"" alt="""" width=""1"" height=""1"" border=""0"" /></div>
</div>
</div>
<div class=""booklink-footer""></div>
</div>
</div>
&nbsp;

TED Talkでのプレゼンテーションが話題となったマーケティング・コンサルタントのサイモンシネックさんの書籍になります。
<a href=""https://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action/transcript?language=ja"">優れたリーダーはどうやって行動を促すか</a>

&nbsp;

「我々のすることは全て世界を変えるという信念で行なっています」

「違う考え方に価値があると信じています」

「私たちが世界を変える手段は美しくデザインされ、簡単に使えて親しみやすいデザインです。」

「こうして素晴らしいコンピュータが出来上がりました」

&nbsp;

と説明されるとなんだかものすごいコンピュータを作った感じがしますし、ちょっと見てみたい！！使ってみたい！！ってなりますよね。

これはTEDのプレゼンで用いられた例なのですが、

サイモン氏は優れたリーダーはこの<strong>WHY-HOW-WHAT</strong>の順番で語ることで人を動かしたり、優れた製品を生み出してきているということを発見し、それを<strong>ゴールデンサークル</strong>という理論として形式化しました。

この例に即した悪い例は「我々のコンピュータは素晴らしく美しいデザインで簡単に使え、ユーザーフレンリーです」というようなものです。

これだと全然欲しい感じしないですよね。

「なぜ作るのか」というWhyの部分を語れるとより自信のWebサービスやサイトの魅力を伝えられるようになるかもしれません。

&nbsp;

&nbsp;

[after_article]"
"330","2017-04-30 12:16:19","2018-01-30 23:21:32","[Atom]   個人的RubyMineからAtomに切り替えた人おすすめパッケージ","advice-for-rubymine-to-atom","http://ver-1-0.net/wp-content/uploads/2017/01/5ntkpxqt54y-sai-kiran-anagani.jpg","engineering::::for-beginner","&nbsp;

&nbsp;

最近開発のエディタで
Atomを使うようになりました。
[adsense_double_rect]

&nbsp;

&nbsp;

仕事での開発はRubyが主で
今までは、RubyMineやPHPStormなど
IntelliJ製品IDEを使っていたのですが、
「30日で無料で使えなくなる」や、
「EAPなら使える」や
「しょうがない買うか！いやどうしようか。。」
などなど、
迷うのが煩わしくなってきたので、
Atomを使うようにしました。

&nbsp;

RubyMineなどは結構好きで使ってたのですが、
よくよく考えるとIDEの機能を隅から隅まで
使っている訳ではないので、
よく使う機能がAtomで実現できればいいっしょ。

&nbsp;

ということでAtomに乗り換えました。

&nbsp;

だいたい開発のときに使うのは以下の機能ですね。
なので、これらに関連してオススメのパッケージを下にまとめておきます。

&nbsp;

&nbsp;
<ul class=""cool-list"">
 	<li>
<h3>シンタックスハイライト</h3>
</li>
 	<li>
<h3>プロジェクト管理</h3>
</li>
 	<li>
<h3>宣言先にジャンプ</h3>
</li>
 	<li>
<h3>Console ( コード書きながらrails実行したりするので )</h3>
</li>
</ul>
&nbsp;

&nbsp;

それでは、
<h2></h2>
<h2></h2>
<h2 class=""chapter"">シンタックスハイライト　<a href=""https://atom.io/packages/linter"">Linter</a></h2>
&nbsp;

今利用しているのがlinter　というパッケージ
インストールの仕方は簡単 Command + ,で　設定を開いて[ Install ] を選択
Linter で検索して、出てきたものをクリックです。

<a href=""http://ver-1-0.net/wp-content/uploads/2017/04/スクリーンショット-2017-04-29-22.59.17.png""><img class=""alignnone size-large wp-image-332"" src=""http://ver-1-0.net/wp-content/uploads/2017/04/スクリーンショット-2017-04-29-22.59.17-1024x900.png"" alt=""Linter"" width=""700"" height=""615"" /></a>

&nbsp;

これをいれた後に自分が使いたい言語のパッケージを同様の手順でインストールしていきます。
ちなみに私がいれているのは
linter-csslint
linter-htmllint
linter-jshlint ( javascript 用 )
linter-ruby
linter-php

ですね。
これらでだいたい自分が開発するものの
シンタックスハイライトを網羅できます。

&nbsp;

お次は、
<h2></h2>
<h2 class=""chapter"">パッケージ管理 <a href=""https://atom.io/packages/project-manager"">Project-Manger</a></h2>
&nbsp;

<a href=""http://ver-1-0.net/wp-content/uploads/2017/04/スクリーンショット-2017-04-30-12.11.34.png""><img class=""alignnone size-large wp-image-336"" src=""http://ver-1-0.net/wp-content/uploads/2017/04/スクリーンショット-2017-04-30-12.11.34-897x1024.png"" alt="""" width=""700"" height=""799"" /></a>

&nbsp;

&nbsp;

IDEだと一度開いたディレクトリを保存してくれたりするのですが、
テキストエディタだとデフォルトで
そういったことはしてくれません。

&nbsp;

&nbsp;

そこで、使うのが
project-managerというものです。

&nbsp;

使い方は
①プロジェクトとして管理したいディレクトリを「File」 -&gt; 「Open...」で開く。
②ディレクトリを開いたら
「Packages」 -&gt; 「Project Manager」 -&gt; 「Save Project」
でプロジェクトを保存。<a href=""http://ver-1-0.net/wp-content/uploads/2017/04/スクリーンショット-2017-04-30-11.58.58.png""><img class=""alignnone size-large wp-image-333"" src=""http://ver-1-0.net/wp-content/uploads/2017/04/スクリーンショット-2017-04-30-11.58.58-1024x491.png"" alt=""ProjectManager"" width=""700"" height=""336"" /></a>
③別のプロジェクトを開きたいときは Cmd + Ctrl + P
でプロジェクトの一覧を表示して選択。

&nbsp;

プロジェクトを頻繁に切り替えるという人は、
Cmd + Shift + N で新しいタブを作って、
それぞれでプロジェクトを開いておくというのもありですね。

&nbsp;

&nbsp;

&nbsp;

&nbsp;
<h2 class=""chapter"">宣言先にジャンプ <a href=""https://atom.io/packages/goto-definition"">Goto Definition</a></h2>
&nbsp;

これは、
RubyMineの奴が便利でしたねー。
Cmd ＋ Click でdefineしている所に飛べるという。

Atomでこれをやるなら
<a href=""https://atom.io/packages/goto-definition"">Go To Definition</a>
が使えます。

これも使い方が簡単 パッケージ検索で名前を検索して、
インストールすればすぐ使えます。
<h2></h2>
<h2></h2>
&nbsp;

&nbsp;
<h2 class=""chapter"">Console <a href=""https://atom.io/packages/platformio-ide-terminal"">Platoform-Ide-Terminal</a></h2>
<a href=""http://ver-1-0.net/wp-content/uploads/2017/04/スクリーンショット-2017-04-30-12.07.08.png""><img class=""alignnone size-large wp-image-334"" src=""http://ver-1-0.net/wp-content/uploads/2017/04/スクリーンショット-2017-04-30-12.07.08-1024x625.png"" alt=""Platform-Ide-Terminal"" width=""700"" height=""427"" /></a>

&nbsp;

&nbsp;

&nbsp;

これは使う人が多いのかわからないのですが、
(パッケージあるということはいるんだろう）

&nbsp;

私がRubyMineを使っていた頃は、
エディタでコードをガリガリしつつ、
Console画面を立ち上げて、
railsを起動していたり,
migrationをしたりしていました。

&nbsp;

&nbsp;

全部を一画面でできるので重宝していたのですが、
Atomデフォルトでそれらしき機能は見つかりませんでしので、
いれたのが。

<a href=""https://atom.io/packages/platformio-ide-terminal"">Platoform-Ide-Terminal</a>

です。

&nbsp;

&nbsp;

操作感も普通のターミナルと同じように使えるので
問題ないです。
快適です。

&nbsp;

&nbsp;

&nbsp;

&nbsp;

以上!!
どれもオススメのパッケージです。

[adsense_double_rect]"
"54","2017-01-12 00:21:21","2018-08-26 12:48:17","Ansible Install for Mac | Macのための Ansible Install","ansible-for-mac","http://ver-1-0.net/wp-content/uploads/2017/01/AnsibleLogo_transparent_web.png","engineering::::for-beginner","&nbsp;

&nbsp;

環境構築自動化、構成管理などのキーワードに惹かれ、
Ansible勉強のためインストールします。

以下手順です。

Mac OSXを前提としていますが、
Mac はpython2系がデフォルトで入っているようなのでまず
python3のインストールから。
[after_intro]

&nbsp;
<h2 class=""chapter"">①python3インストール</h2>
&nbsp;

&nbsp;

pythonのバージョンの管理ができるpyenvをインストール
<pre><code class=""language-bash"">brew install pyenv</code></pre>
~/.bashrcにpyenvの環境変数等を設定
<pre>export PYENV_ROOT=""$HOME/.pyenv""
export PATH=""$PYENV_ROOT/bin:$PATH""
eval ""$(pyenv init -)""
</pre>
python3をインストール
<pre><code class=""language-bash"">pyenv install 3.5.0
pyenv global 3.5.0
pyenv rehash
</code></pre>
インストールされたことを確認
<pre><code class=""language-bash"">$python --version
Python 3.5.0 # OK !!!</code></pre>
&nbsp;
<h2 class=""chapter"">③パッケージ管理ツールpipをインストール</h2>
&nbsp;
<pre><code class=""language-bash"">easy_install pip
</code></pre>
&nbsp;
<h2 class=""chapter"">④Ansible をインストール</h2>
&nbsp;
<pre><code class=""language-bash"">sudo pip install ansible</code></pre>
正常にインストールされたことを確認
<pre><code class=""language-bash"">$ansible --version
ansible 2.2.0.0</code></pre>
次以降は、
AnsibleとVagantを組み合わせて
CakePHP( or Rails)の環境を作れるように"
"703","2017-09-27 00:14:50","2017-12-22 22:47:09","ローカル開発環境〜Railsで普段開発している時の構成について〜","architecture-for-local-rails","http://ver-1-0.net/wp-content/uploads/2017/01/5ntkpxqt54y-sai-kiran-anagani.jpg","engineering::::rails","&nbsp;

&nbsp;

どうも、
今日記事を書くべきか早く寝るべきか
葛藤している<a href=""https://twitter.com/version1_2017"">@version1</a>です。

&nbsp;

&nbsp;

[adsense]

&nbsp;

普段私が開発している時に
よくやる<strong>ローカル開発環境</strong>の構成。
簡単にいうと自分のPCの内部が
どのようになっているか。

というのを今回は共有したいと思います。

ちなみに先に言って起きますが、
<h3>あくまでも一例として</h3>
です。
こんななやり方もあるのね程度でおさめて
いただければ嬉しいです。

&nbsp;

&nbsp;

<img class=""alignnone size-full wp-image-704"" src=""http://ver-1-0.net/wp-content/uploads/2017/09/Untitled-Diagram.png"" alt=""ローカル開発環境の構成"" width=""721"" height=""611"" />

&nbsp;

先に図を載せましたが、
いつも図のような形で開発を
行なっています。

&nbsp;

図にするとそこまで
複雑ではないので、
簡単に説明すると

&nbsp;
<ol>
 	<li>terminalでvagrantにSSH接続してRails起動</li>
 	<li>画像右上のRailsのアプリケーションはローカルPCのDatabase（③）に接続します。
（Vagrant上ではありません、Vagrant上だと使えるメモリ・CPUが限られるので）</li>
 	<li>Railsアプリケーションはブラウザから「http:192.168.33.10」のような形で
Vagrantサーバに接続して、wepページを開いて開発を行います。（②）</li>
 	<li>コードの修正はAtomが多いのですが、Atomでローカルのディレクトリのソースを
開いてコードの修正を行います。（①）
（FTPなどで編集を行うパッケージもあるとは思いますが、同期に時間かかりそうなので・・）</li>
</ol>
&nbsp;

といった感じです。

&nbsp;

&nbsp;

補足ですが、
通常特に設定を変更しないまま、
Vagrantイメージを作成して起動すると、
カレントディレクトリが/vagrantにマウントされて共有ディレクトリと
なります。

&nbsp;

&nbsp;

まあみなさんそれぞれの
形があるとは思うのですが、
私はこう言った形で開発を行うことが多いです。

&nbsp;

&nbsp;

未だとこれくらいのローカルの開発環境の構成なら、
話を聞いてパッとイメージできるんですけど、
初心者のころとかだと
何言っているかちんぷんかんぷんですよね。

まあそういうのの参考になれば。

以上です！！

[adsense]"
"145","2017-01-31 22:48:25","2017-12-22 20:26:54","エンジニアの味方 - あずきのチカラ - 長時間のPCで疲れた目をリフレッシュ","azuki-power","http://ver-1-0.net/wp-content/uploads/2017/01/PAK85_nobiwosuruOL1292-thumb-autox1600-16472.jpg","%e3%81%8a%e3%81%99%e3%81%99%e3%82%81%e8%a8%98%e4%ba%8b","
&nbsp;

最近、
プライベートでは、ブログの更新、勉強、仕事などで
ずっーーーーーーとPCを使っていて、
ホントーーーに疲れ目気味です。

なんとなく遠くのものが霞む気がするし、
肩も凝るし
なんか視力も落ちてくるし。。。

というのでリフレッシュしたいなぁと日々感じていたのですが、
ついに見つけました。

&nbsp;

&nbsp;

それが<strong>あずきのチカラ 目もと用</strong>です

あずきのチカラ 目もと用(足もとカイロ1枚付)
http://amzn.to/2kLhMH0
<a href=""https://www.amazon.co.jp/dp/B01MYLZO9Z/ref=as_li_ss_il?ie=UTF8&amp;qid=1485868965&amp;sr=8-1&amp;keywords=%E3%81%82%E3%81%9A%E3%81%8D%E3%81%AE%E3%83%81%E3%82%AB%E3%83%A9&amp;linkCode=li3&amp;tag=llg01-22&amp;linkId=72b83578840570ad74b155e6d70f078a"" target=""_blank"" rel=""noopener noreferrer""><img src=""//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=B01MYLZO9Z&amp;Format=_SL250_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=llg01-22"" border=""0"" /></a><img style=""border: none !important; margin: 0px !important;"" src=""https://ir-jp.amazon-adsystem.com/e/ir?t=llg01-22&amp;l=li3&amp;o=9&amp;a=B01MYLZO9Z"" alt="""" width=""1"" height=""1"" border=""0"" />

&nbsp;

&nbsp;
<h2>あずきのチカラの使い方</h2>

<hr />

使い方は<strong>簡単</strong>です。
<h3>電子レンジで40秒温める</h3>
<h3>( ワット数により時間は異なります )</h3>
<h3>目元に乗せて5分</h3>
これで目元をあっためて
<strong>スッキリ</strong>できます。

&nbsp;

&nbsp;
<h2>感想</h2>

<hr />

電子レンジから出した瞬間は、
ほのかに温い感触で、
（こんなんで本当にあったまるのかなあ）

と思っていたのですが、
目に当ててみるとあずきからの蒸気で
熱すぎず、冷たすぎず丁度良い温度で目元をあっためてくれます。

&nbsp;

また、これは<strong>250回</strong>繰り返して
使えるので、結構長持ちしそうです。
使い捨てでもなく、
お値段も700円程度と
お値段の心配もあまりありません。

調べると肩用もあるようなのでそっちも段々欲しくなってきました。
あずきのチカラ 首肩用
<a href=""http://amzn.to/2jyuBT2"">http://amzn.to/2jyuBT2</a>
<a href=""https://www.amazon.co.jp/%E3%81%82%E3%81%9A%E3%81%8D%E3%81%AE%E3%83%81%E3%82%AB%E3%83%A9-%E9%A6%96%E8%82%A9%E7%94%A8/dp/B002L1609Q/ref=as_li_ss_il?ie=UTF8&amp;qid=1485868965&amp;sr=8-2&amp;keywords=%E3%81%82%E3%81%9A%E3%81%8D%E3%81%AE%E3%83%81%E3%82%AB%E3%83%A9&amp;linkCode=li2&amp;tag=llg01-22&amp;linkId=8d130f4b4c359e6e16b2a804c4e61b70"" target=""_blank"" rel=""noopener noreferrer""><img src=""//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=B002L1609Q&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=llg01-22"" border=""0"" /></a><img style=""border: none !important; margin: 0px !important;"" src=""https://ir-jp.amazon-adsystem.com/e/ir?t=llg01-22&amp;l=li2&amp;o=9&amp;a=B002L1609Q"" alt="""" width=""1"" height=""1"" border=""0"" />

&nbsp;

&nbsp;

&nbsp;

&nbsp;

これがあればつらい肩こり、疲れ目も軽くなりそうです!!

エンジニアは本当に目を酷使するので、
これから重宝しそうなアイテムです。

おすすめです!!"
"382","2017-05-25 14:19:14","2017-12-22 22:53:28","Mac の簡単設定で作業を高速化。カーソルとポインタのスピードをあげて作業高速化","be-faster-on-mac","http://ver-1-0.net/wp-content/uploads/2017/01/v7wo6xrcfve-pandu-agus-wismoyo.jpg","colum::::%e4%bb%95%e4%ba%8b","&nbsp;

&nbsp;

&nbsp;

今回は
簡単な設定で仕事の効率をUP
する方法をUPします。

それは、
<h2>Macのカーソルのスピードと</h2>
<h2>マウスポインタのスピードをあげる</h2>
です。

&nbsp;

&nbsp;

よく、
文字を入力している時などに、
間違いに気づきカーソルを移動
させることがあると思うのですが、
文字数が多いと地味に待ち時間が
発生します。

[adsense_double_rect]

&nbsp;

そこで、
今回の方法では、
カーソルのスピードをMAXにします。

設定方法は簡単、
「Appleマーク」→「システム環境設定」→「キーボード」

実際の手順は下記動画をご覧ください。
※音は出ませんので安心してご視聴ください。

[video width=""1920"" height=""1080"" mp4=""http://ver-1-0.net/wp-content/uploads/2017/05/カーソルスピード最大化.mp4""][/video]

&nbsp;

&nbsp;

また、
マウスのポインタの移動スピードも
「Appleマーク」→「システム環境設定」→「トラックパッド」から
設定できます。

写真のように軌跡の速さをMAXにします。

<a href=""http://ver-1-0.net/wp-content/uploads/2017/05/スクリーンショット-2017-05-25-10.53.04.png""><img class=""alignnone size-large wp-image-384"" src=""http://ver-1-0.net/wp-content/uploads/2017/05/スクリーンショット-2017-05-25-10.53.04-1024x791.png"" alt=""マウスポインタ設定"" width=""700"" height=""541"" /></a>

スピードを最大にすると、
マウスポインタが軽くなった感じになります。
（最初慣れないと行き過ぎてしまうのですが。。）

より、少ない手の動きでそうさできるので、
長時間PCを触る人には役に立つと思います。

&nbsp;

Macではこのような簡単な設定をすることで、
日々の作業の効率を変更できます。

ぜひ試してみてください！！

[adsense_double_rect]"
"676","2017-09-20 23:29:06","2017-12-26 20:27:33","飽きっぽい人にお勧めする良書3選","books-for-akippoi","http://ver-1-0.net/wp-content/uploads/2017/09/745668dac97914c8ffb6d069679af8a4_s.jpg","%e6%9c%ac%e6%a3%9a::::%e3%81%8a%e3%81%99%e3%81%99%e3%82%81%e8%a8%98%e4%ba%8b","&nbsp;

&nbsp;

どうも3連休明けの
@version1です。

私は自分で
結構<strong>飽きっぽい</strong>と自覚しているのですが、
皆さんはどうでしょうか？

エンジニアなので、<strong>一人で黙々と作業するのが苦でなく、好き</strong>でもあるんですが、長期的にみると色々な事に手を出していてプログラミングの勉強もしたい、投資の勉強もしたい、英語の勉強も。。

という感じで気付いているとやる事が増えすぎて、定期的にやらないことの整理みたいなのが必要になってくることが多々あります。

やはり日本のお国柄なのか、飽きっぽいというのはあまり良いイメージをもたれないので、「このままでは良くない！」と思う事もあるんですが、

私自身多くの場合、好奇心旺盛とか、興味の幅が広いとかとかプラスに捉えてなんとかやりくりしています。

そんなこんなで飽きっぽいって良い事なの？悪い事なの？という疑問がある人が興味を持ちそうな書籍を紹介させていただきます。

&nbsp;
<h2 class=""chapter"">一貫したテーマを持って手数出した人の勝ち</h2>
&nbsp;

&nbsp;

先に紹介する本を載せておくとこのような感じになります。
<ul>
 	<li><a href=""http://amzn.to/2w6ARbX"">多動力　（著）堀江貴文</a></li>
 	<li><a href=""http://amzn.to/2w7rmcf"">極めるひとほどあきっぽい　（著）窪田良</a></li>
 	<li><a href=""http://amzn.to/2xi5Inn"">やり抜く力 GRIT(グリット)――人生のあらゆる成功を決める「究極の能力」を身につける 　（著）アンジェラ・ダックワース</a></li>
</ul>
これらの本は、自分自信が<strong>「飽きっぽい」</strong>と感じているので、ついつい買って読んでしまいました。

&nbsp;

どれも面白い本でしたが、<strong>多動力</strong>と<strong>Grid（やり抜く力）</strong>が対極にある考えのタイトルで面白いですね。

<strong>多動力</strong>はインターネットが普及して、業界の壁が崩れてきているのに、一生を一つの会社とか一つの肩書きで終えるのは勿体無いよね。と言っていて、

<strong>Grid</strong>は、才能があるからって成功できる訳ではなく、情熱があってやり抜けるということが大事で、さらにその粘り強さも鍛えることが可能です。ということを言っています。

&nbsp;

タイトルをみると意見が真っ向からぶつかっているように見えますが、読んでみるとどちらも<strong>1万時間の鍛錬</strong>について言及してて、やっぱり<strong>集中すること</strong>や<strong>のめりこむこと</strong>について言っていて、違う角度から同じことを言っているようにも思えます。

さらに二番目に紹介する
「極めるひとほど飽きっぽい」でも、窪田さんは研究者、臨床医、バイオベンチャーの起業家など様々な経歴は持ちますが<strong>一貫して</strong><strong> 「眼」</strong>というテーマを持って仕事をしていると書いています。

とこれら、
三冊を実際に読んでみてまとめてみると

&nbsp;

<strong>一貫したテーマを自分の中に持ちつつ、それに必要な要素を手数多く試したもん勝ち</strong>
というようになるんでしょうね。

&nbsp;

<strong>「飽きっぽい」</strong>みなさんまだ読んだことのない本がこの中に
あればぜひ読んでみてはいかがでしょうか？？

&nbsp;

&nbsp;

&nbsp;
<h2 class=""chapter"">多動力　（著) 堀江貴文</h2>
<div class=""cstmreba""><div class=""booklink-box""><div class=""booklink-image""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4344031156/llg01-22/"" target=""_blank"" rel=""nofollow"" ><img src=""https://images-fe.ssl-images-amazon.com/images/I/51of-IcKWRL._SL320_.jpg"" style=""border: none;"" /></a></div><div class=""booklink-info""><div class=""booklink-name""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4344031156/llg01-22/"" target=""_blank"" rel=""nofollow"" >多動力 (NewsPicks Book)</a><div class=""booklink-powered-date"">posted with <a href=""https://yomereba.com"" rel=""nofollow"" target=""_blank"">ヨメレバ</a></div></div><div class=""booklink-detail"">堀江 貴文 幻冬舎 2017-05-27    </div><div class=""booklink-link2""><div class=""shoplinkamazon""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4344031156/llg01-22/"" target=""_blank"" rel=""nofollow"" >Amazonで購入</a></div><div class=""shoplinkkindle""><a href=""http://www.amazon.co.jp/exec/obidos/ASIN/B072HVZ9RF/llg01-22/"" target=""_blank"" rel=""nofollow"" >Kindleで購入</a></div><div class=""shoplinkrakuten""><a href=""https://hb.afl.rakuten.co.jp/hgc/163854b7.d97e8d5b.163854b8.3c41ae34/?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F14918400%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F"" target=""_blank"" rel=""nofollow"" >楽天ブックスで購入</a></div><div class=""shoplinkseven""><a href=""https://px.a8.net/svt/ejp?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2&a8ejpredirect=http%3A%2F%2F7af-ent.omni7.jp%2Frelay%2Faffiliate%2FentranceProcess.do%3Furl%3Dhttp%253A%252F%252F7net.omni7.jp%252Fsearch%252F%253FsearchKeywordFlg%253D1%2526keyword%253D4-34-403115-9%252520%25257C%2525204-344-03115-9%252520%25257C%2525204-3440-3115-9%252520%25257C%2525204-34403-115-9%252520%25257C%2525204-344031-15-9%252520%25257C%2525204-3440311-5-9"" target=""_blank"" rel=""nofollow"" >7netで購入</a><img border=""0"" width=""1"" height=""1"" src=""https://www17.a8.net/0.gif?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2"" alt=""""></div>            	  	  	  	</div></div><div class=""booklink-footer""></div></div></div>


&nbsp;

言わずもがな、最近話題となったホリエモンの<strong>多動力</strong>です。

高度経済成長期の終身雇用の時代は１つの会社に勤め上げることが美徳とされていしました。景気も良く待遇も良くなるので「飽きっぽい」というのはマイナスで１つのことをコツコツと続けるのがよしとされ、転職さえも悪者として扱われていました。

が、

「多動力」では、業界の垣根を超えた仕事であったり、肩書きに囚われないことが重要であると説いています。
（細かい内容は実際読んでみてください。。。自分は原液のくだりとか好きです）

読んだ感想も記事にしているので興味があればどうぞ
<a href=""https://ver-1-0.net/2017/05/28/tado-ryoku/"">=&gt;「多動力」読んでみた</a>
<h2 class=""chapter"">極める人ほど飽きっぽい　（著）窪田 良</h2>
<div class=""cstmreba""><div class=""booklink-box""><div class=""booklink-image""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4822274209/llg01-22/"" target=""_blank"" rel=""nofollow"" ><img src=""https://images-fe.ssl-images-amazon.com/images/I/513Eg1ZIsfL._SL320_.jpg"" style=""border: none;"" /></a></div><div class=""booklink-info""><div class=""booklink-name""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4822274209/llg01-22/"" target=""_blank"" rel=""nofollow"" >極めるひとほどあきっぽい</a><div class=""booklink-powered-date"">posted with <a href=""https://yomereba.com"" rel=""nofollow"" target=""_blank"">ヨメレバ</a></div></div><div class=""booklink-detail"">窪田 良 日経BP社 2013-05-23    </div><div class=""booklink-link2""><div class=""shoplinkamazon""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4822274209/llg01-22/"" target=""_blank"" rel=""nofollow"" >Amazonで購入</a></div><div class=""shoplinkkindle""><a href=""http://www.amazon.co.jp/exec/obidos/ASIN/B00F3UTNUK/llg01-22/"" target=""_blank"" rel=""nofollow"" >Kindleで購入</a></div><div class=""shoplinkrakuten""><a href=""https://hb.afl.rakuten.co.jp/hgc/163854b7.d97e8d5b.163854b8.3c41ae34/?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F12279899%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F"" target=""_blank"" rel=""nofollow"" >楽天ブックスで購入</a></div><div class=""shoplinkseven""><a href=""https://px.a8.net/svt/ejp?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2&a8ejpredirect=http%3A%2F%2F7af-ent.omni7.jp%2Frelay%2Faffiliate%2FentranceProcess.do%3Furl%3Dhttp%253A%252F%252F7net.omni7.jp%252Fsearch%252F%253FsearchKeywordFlg%253D1%2526keyword%253D4-82-227420-7%252520%25257C%2525204-822-27420-7%252520%25257C%2525204-8222-7420-7%252520%25257C%2525204-82227-420-7%252520%25257C%2525204-822274-20-7%252520%25257C%2525204-8222742-0-7"" target=""_blank"" rel=""nofollow"" >7netで購入</a><img border=""0"" width=""1"" height=""1"" src=""https://www17.a8.net/0.gif?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2"" alt=""""></div>            	  	  	  	</div></div><div class=""booklink-footer""></div></div></div>

&nbsp;

&nbsp;

こちらは、20代で加齢黄斑変性の原因遺伝子を発見し、30代は眼の臨床医として活躍し、40代で、バイオベンチャーを立ち上げCEOに就任した多様な経歴を持つ窪田良さんの本です。

本書では、専門性のある人は多趣味な場合が多く、飽きっぽいほどに好奇心が強くないとなにかを極める事はできない。

一生でなにか１つの付加価値を身につけたところで、いつそのスキルが陳腐化してもおかしくないと指摘しています。
（眼というテーマに対して様々な角度からチャレンジし続けているというところがイケてますね）

&nbsp;

&nbsp;
<h2 class=""chapter"">やり抜く力 GRIT(グリット)――人生のあらゆる成功を決める「究極の能力」を身につける</h2>
<div class=""cstmreba""><div class=""booklink-box""><div class=""booklink-image""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4478064806/llg01-22/"" target=""_blank"" rel=""nofollow"" ><img src=""https://images-fe.ssl-images-amazon.com/images/I/51VtDFjmZdL._SL320_.jpg"" style=""border: none;"" /></a></div><div class=""booklink-info""><div class=""booklink-name""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4478064806/llg01-22/"" target=""_blank"" rel=""nofollow"" >やり抜く力 GRIT(グリット)――人生のあらゆる成功を決める「究極の能力」を身につける</a><div class=""booklink-powered-date"">posted with <a href=""https://yomereba.com"" rel=""nofollow"" target=""_blank"">ヨメレバ</a></div></div><div class=""booklink-detail"">アンジェラ・ダックワース ダイヤモンド社 2016-09-09    </div><div class=""booklink-link2""><div class=""shoplinkamazon""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4478064806/llg01-22/"" target=""_blank"" rel=""nofollow"" >Amazonで購入</a></div><div class=""shoplinkkindle""><a href=""http://www.amazon.co.jp/exec/obidos/ASIN/B01LMP9RLY/llg01-22/"" target=""_blank"" rel=""nofollow"" >Kindleで購入</a></div><div class=""shoplinkrakuten""><a href=""https://hb.afl.rakuten.co.jp/hgc/163854b7.d97e8d5b.163854b8.3c41ae34/?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F14398454%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F"" target=""_blank"" rel=""nofollow"" >楽天ブックスで購入</a></div><div class=""shoplinkseven""><a href=""https://px.a8.net/svt/ejp?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2&a8ejpredirect=http%3A%2F%2F7af-ent.omni7.jp%2Frelay%2Faffiliate%2FentranceProcess.do%3Furl%3Dhttp%253A%252F%252F7net.omni7.jp%252Fsearch%252F%253FsearchKeywordFlg%253D1%2526keyword%253D4-47-806480-1%252520%25257C%2525204-478-06480-1%252520%25257C%2525204-4780-6480-1%252520%25257C%2525204-47806-480-1%252520%25257C%2525204-478064-80-1%252520%25257C%2525204-4780648-0-1"" target=""_blank"" rel=""nofollow"" >7netで購入</a><img border=""0"" width=""1"" height=""1"" src=""https://www17.a8.net/0.gif?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2"" alt=""""></div>            	  	  	  	</div></div><div class=""booklink-footer""></div></div></div>

<a href=""http://amzn.to/2xgN4vO"">やり抜く力 GRIT(グリット)――人生のあらゆる成功を決める「究極の能力」を身につける</a>

本書は、人生でなにかを成し遂げるには生まれもった才能よりも情熱と粘り強さが関係する可能性が高いことを突き止め、アメリカで天才賞と呼ばれるマッカーサー賞を受賞した心理学者の本です。

グリーンベレーと共同研究の内容や著者自信の教師の経験談などから、やり抜く力を持った人が良い成績をあげることことを指摘し、成功者の共通点ややり抜く力の高め方などについて言及しています。
（他の二冊よりはより科学的な書き方になっています。個人的には冒頭の著者と著者のエピソードが好きです）

&nbsp;"
"202","2017-02-08 23:04:35","2018-01-30 23:22:43","エンジニアを助けるノート(メモ帳)アプリ Boostnote が快適","bootsnote","http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-08-22.47.51.png","engineering::::for-beginner","&nbsp;
<h2 class=""chapter"">社会に出てエンジニアとして役に立った助言</h2>
&nbsp;

私が
エンジニアとして社会に出て
最も役に立った助言の
一つに、
「リンクやよく使うコマンドを取っておいて、いざという時に簡単に
引き出せるというのが大事だよ」
というものがありました。

[after_intro]

確かに、
その助言の通りエクセルやテキストエディタに
メモをしておくと
よく使うんだけどなかなか覚えられないコマンドやワンライナー
よく使うリンクなど、
探したり思い出したりする手間を省くと
だいぶ業務を効率化できました。

以来、
そのアドバイスを頂いてから
都度使うコマンドやリンクはメモ帳
するという習慣が付いてはいました。

ただ、
如何せん見づらかったり、
グルーピングできなかったりで
うまく整理できず丁度良いツールを探していたところ

&nbsp;

&nbsp;

&nbsp;

ついに見つけました。
その待望のツールとはこちら、
<h2><del datetime=""2017-11-15T02:22:20+00:00"">bootsnote</del>　boostnote　（すみません、スペルミスしてました。。）</h2>
です。
<a href=""http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-08-22.47.51.png""><img class=""alignnone size-large wp-image-204"" src=""http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-08-22.47.51-1024x482.png"" alt=""bootsnote"" width=""700"" height=""329"" /></a>

なにやらgoogle先生にお伺いを立ててみると
<strong>100種類のプログラミング言語に対応</strong>
<strong>180カ国に展開</strong>
などなど
評判のツールであることも伺えます。

&nbsp;

[mid_article]

&nbsp;
<h2 class=""chapter"">感想</h2>
&nbsp;

ダウンロードして見て使ってみると
Markdownでメモ書きができたり、
SQLや簡単なコード、コマンドなどをスニペットとして
保存できるなどかなりいい感じです。

&nbsp;

さらにはアプリを起動したままにしておけば
<strong>「あぁ〜コピペしたい」「あぁ〜あのコマンドってどうだっけ？」</strong>
というときにショートカットキーで呼び出して
目当てのコマンドやプログラムをコピーできます。

<a href=""http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-08-22.57.43.png""><img class=""alignnone size-large wp-image-205"" src=""http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-08-22.57.43-1024x657.png"" alt=""bootsnote"" width=""700"" height=""449"" /></a>

こういう形で左上のメニューボタンを押すと
設定ができるので、
そこで任意のショートカットキーに割り当てることができます。

&nbsp;

デフォルトでは Cmd + Alt + L ( Mac ) ですが、
InteliJ形のIDEだとこれをオートインデントで使っているので
私の場合は Cmd + P でウィンドウが表示されるように設定しています。

これでメモもコピペも簡単です。

&nbsp;

&nbsp;

繰り返しにはなりますが、
<h2><del datetime=""2017-11-15T02:22:20+00:00"">bootsnote</del></h2>

<h2>boostnote</h2>
※こちらの綴りが正しいです。


おすすめです。
まだ使い始めなので、
さらに便利な機能等あればこちらで紹介していきたいと
思っています!!

以上です!!

[after_article]"
"31","2017-01-03 21:09:23","2018-08-26 12:52:07","CakePHPをインストール","cakephp-install","http://ver-1-0.net/wp-content/uploads/2017/01/スクリーンショット-2017-01-03-18.52.23.png","colum::::engineering::::for-beginner","&nbsp;

OSはLubuntu 16.0.4

<h2 class=""chapter"">PHPの7.0インストール</h2>
まずはPHPをインストール
<pre><code>sudo apt-get install php7.0-cli
</code></pre>

<pre><code class=""language-php"">php -v
PHP 7.0.8-3ubuntu3 (cli) ( NTS )
Copyright (c) 1997-2016 The PHP Group
Zend Engine v3.0.0, Copyright (c) 1998-2016 Zend Technologies
    with Zend OPcache v7.0.8-3ubuntu3, Copyright (c) 1999-2016, by Zend Technologies
</code></pre>

<a href=""https://book.cakephp.org/3.0/ja/installation.html"">https://book.cakephp.org/3.0/ja/installation.html</a>

&nbsp;

[after_intro]

&nbsp;

<h2>CakePHPインストール</h2>

<h4>CakePHP に必要なライブラリをインストール</h4>
<pre><code class=""language-bash"">sudo apt-get install php-mbstring php-intl php-mysqli
</code></pre>


<h4>composer のインストール</h4>

ここからダウンロード
<a href=""https://getcomposer.org/download/"">https://getcomposer.org/download/</a>
ダウンロードしたcomposerにパスが通るように移動
<pre><code class=""language-bash"">mv composer.phar /usr/local/bin/composer</code></pre>


<pre><code class=""language-bash"">composer self-update && composer create-project --prefer-dist cakephp/app my_app_name</code></pre>





<pre><code class=""language-bash"">$ composer self-update && composer create-project --prefer-dist cakephp/app my_app_name
You are already using composer version 1.3.0 (stable channel).
Do not run Composer as root/super user! See https://getcomposer.org/root for details
Installing cakephp/app (3.3.5)
  - Installing cakephp/app (3.3.5) Downloading: 100%         
Created project in my_app_name
Loading composer repositories with package information
Updating dependencies (including require-dev)
Package operations: 26 installs, 0 updates, 0 removals
  - Installing aura/installer-default (1.0.0) Downloading: 100%         
  - Installing cakephp/plugin-installer (0.0.15) Downloading: 100%         
  - Installing mobiledetect/mobiledetectlib (2.8.24) Downloading: 100%         
  - Installing psr/http-message (1.0.1) Downloading: 100%         
  - Installing zendframework/zend-diactoros (1.3.7) Downloading: 100%         
  - Installing aura/intl (1.1.1) Downloading: 100%         
  - Installing cakephp/chronos (1.0.3) Downloading: 100%         
  - Installing psr/log (1.0.2) Downloading: 100%         
  - Installing cakephp/cakephp (3.3.11) Downloading: 100%         
  - Installing symfony/yaml (v3.2.1) Downloading: 100%         
  - Installing symfony/debug (v3.2.1) Downloading: 100%         
  - Installing symfony/polyfill-mbstring (v1.3.0) Downloading: 100%         
  - Installing symfony/console (v3.2.1) Downloading: 100%         
  - Installing symfony/filesystem (v3.2.1) Downloading: 100%         
  - Installing symfony/config (v3.2.1) Downloading: 100%         
  - Installing robmorgan/phinx (v0.6.5) Downloading: 100%         
  - Installing cakephp/migrations (1.6.6) Downloading: 100%         
  - Installing jakub-onderka/php-console-color (0.1) Downloading: 100%         
  - Installing jakub-onderka/php-console-highlighter (v0.3.2) Downloading: 100%         
  - Installing dnoegel/php-xdg-base-dir (0.1) Downloading: 100%         
  - Installing nikic/php-parser (v3.0.2) Downloading: 100%         
  - Installing symfony/var-dumper (v3.2.1) Downloading: 100%         
  - Installing psy/psysh (v0.8.0) Downloading: 100%         
  - Installing jdorn/sql-formatter (v1.2.17) Downloading: 100%         
  - Installing cakephp/debug_kit (3.5.0) Downloading: 100%         
  - Installing cakephp/bake (1.2.10) Downloading: 100%         
cakephp/app suggests installing markstory/asset_compress (An asset compression plugin which provides file concatenation and a flexible filter system for preprocessing and minification.)
cakephp/app suggests installing phpunit/phpunit (Allows automated tests to be run without system-wide install.)
cakephp/app suggests installing cakephp/cakephp-codesniffer (Allows to check the code against the coding standards used in CakePHP.)
symfony/console suggests installing symfony/event-dispatcher ()
symfony/console suggests installing symfony/process ()
symfony/var-dumper suggests installing ext-symfony_debug ()
psy/psysh suggests installing ext-pdo-sqlite (The doc command requires SQLite to work.)
psy/psysh suggests installing hoa/console (A pure PHP readline implementation. You'll want this if your PHP install doesn't already support readline or libedit.)
cakephp/debug_kit suggests installing ext-sqlite (DebugKit needs to store panel data in a database. SQLite is simple and easy to use.)
Writing lock file
Generating autoload files
> Cake\Composer\Installer\PluginInstaller::postAutoloadDump
> App\Console\Installer::postInstall
Created `config/app.php` file
Set Folder Permissions ? (Default to Y) [Y,n]? Y
Permissions set on /mnt/VBShare/projects/php/my_app_name/tmp/cache
Permissions set on /mnt/VBShare/projects/php/my_app_name/tmp/cache/models
Permissions set on /mnt/VBShare/projects/php/my_app_name/tmp/cache/persistent
Permissions set on /mnt/VBShare/projects/php/my_app_name/tmp/cache/views
Permissions set on /mnt/VBShare/projects/php/my_app_name/tmp/sessions
Permissions set on /mnt/VBShare/projects/php/my_app_name/tmp/tests
Permissions set on /mnt/VBShare/projects/php/my_app_name/tmp
Permissions set on /mnt/VBShare/projects/php/my_app_name/logs
</code></pre>

mysql をインストール
<pre><code class=""language-bash"">sudo apt-get install mysql-server</code></pre>

mysql を起動
<pre><code class=""language-bash"">sudo service mysql start</code></pre>

アプリケーション用DBを作成
<pre><code class=""language-bash"">sudo service mysql start
mysql -u root -pxxxxx -e ""create database myapp""
</code></pre>

config/app.phpの220行あたりのデータベース接続情報を変更

<pre><code class=""language-bash""> 'Datasources' => [
        'default' => [
            'className' => 'Cake\Database\Connection',
            'driver' => 'Cake\Database\Driver\Mysql',
            'persistent' => false,
            'host' => 'localhost',
            /** 
             * CakePHP will use the default DB port based on the driver selected
             * MySQL on MAMP uses port 8889, MAMP users will want to uncomment
             * the following line and set the port accordingly
             */
            //'port' => 'non_standard_port_number',
            'username' => 'user',
            'password' => 'password',
            'database' => 'myapp',
            'encoding' => 'utf8',
            'timezone' => 'UTC',
            'flags' => [], 
            'cacheMetadata' => true,
            'log' => false,
</code></pre>

<h2>サーバを起動して稼動確認</h2>

<pre><code class=""language-bash"">$bin/cake server -H 0.0.0.0</code></pre>

ブラウザから接続下記画面で
<img src=""http://ver-1-0.net/wp-content/uploads/2017/01/スクリーンショット-2017-01-03-18.52.23-300x274.png"" alt=""CakePHP初期画面"" width=""300"" height=""274"" class=""alignnone size-medium wp-image-39"" />


"
"233","2017-02-17 22:29:21","2018-08-26 12:30:23","CakePHPでテスト PHPUnitを使ったテスト","cakephp-phpunit","http://ver-1-0.net/wp-content/uploads/2017/02/6njoebtarec-lee-campbell.jpg","engineering::::for-beginner","&nbsp;

&nbsp;

さて今回は PHPUnitを使ったテストです。

自分の<a href=""http://kabu-ka.net/"">運営しているサイト</a>に修正が必要

だったので、
修正がてらテストコードも書いて見ました。
[after_intro]
&nbsp;
<h2 class=""chapter"">CakePHP で PHPUnitを使う。</h2>


&nbsp;

CakePHPではPHPUnitの使用が想定されているので、
Composerで簡単に導入できます。

&nbsp;

早速ですが、composerで依存性を追加
<pre><code class=""language-php"">$ php composer.phar require --dev phpunit/phpunit:""&lt;6.0""</code></pre>
&nbsp;

Fixturesで使用するDBの設定
<pre><code class=""language-php"">'test' =&gt; [
        'datasource' =&gt; 'Cake\Database\Driver\Mysql',
        'persistent' =&gt; false,
        'host' =&gt; 'dbhost',
        'username' =&gt; 'dblogin',
        'password' =&gt; 'dbpassword',
        'database' =&gt; 'test_database'
    ],
</code></pre>
&nbsp;
&nbsp;
<h2 class=""chapter"">早速テストの実行</h2>

&nbsp;

テストの実行は以下のコマンドで
<pre><code class=""language-bash"">vendor/bin/phpunit</code></pre>
&nbsp;

&nbsp;

まずはなにも書かず実行してみます。
<pre><code class=""language-bash"">$vendor/bin/phpunit
PHPUnit 5.7.13 by Sebastian Bergmann and contributors.

.IIIII....IIIIIII.                                                18 / 18 (100%)

Time: 506 ms, Memory: 15.25MB

OK, but incomplete, skipped, or risky tests!
Tests: 18, Assertions: 24, Incomplete: 12.
</code></pre>
こうやって実行すると、
tests/TestCase の下のテストコードたちが
実行されます。

&nbsp;

&nbsp;

細かい規約は以下 CakePHPの<a href=""https://book.cakephp.org/3.0/ja/development/testing.html"">CookBook</a>から引用
<ul>
 	<li>テストを含むPHPファイルは、 tests/TestCase/[Type] ディレクトリに置きます。</li>
 	<li>ファイル名の最後は必ずただ .php とだけ書くのではなく Test.php とします。</li>
 	<li>テストを含むクラスは Cake\TestSuite\TestCase 、 Cake\TestSuite\IntegrationTestCase または \PHPUnit_Framework_TestCase を継承する必要があります。</li>
 	<li>他のクラス名と同様に、テストケースのクラス名はファイル名と一致する必要があります。 RouterTest.php は、 class RouterTest extends TestCase が含まれている 必要があります。</li>
 	<li>テストを含むメソッド (つまり、アサーションを含むメソッド) の名前は testPublished() のように test で始める必要があります。 @test というアノテーションをメソッドに マークすることでテストメソッドとすることもできます。</li>
</ul>
&nbsp;

これだけではなにもわからないので、
実際にサイトで使われているコードのテストの一部を
書いて見ました。

&nbsp;

&nbsp;

テストをするのはCommonServiceの
<strong>getLatestDate</strong>というメソッドで、

現在取得している株価の中で<strong>最新日付</strong>を
返してくれます。
具体的にいうと
今日が2017年の2月17日だとして、
17日の株価がまだ取得できていない時は、
2月の16日の日付を返してくれるというようなものです。
そしてもし、データ自体がない場合はNullを返します。

&nbsp;

以下、実際のコードです
<pre><code class=""language-php"">use Cake\TestSuite\IntegrationTestCase;
use App\Service\CommonService;
use Cake\ORM\TableRegistry;

/**
 * Created by PhpStorm.
 * User: version1
 * Date: 2017/02/17
 * Time: 20:26
 */
class RankingsServiceTest extends IntegrationTestCase
{
    private $common;
    private $kabukaTbl;
    public $fixtures = ['app.Commons/normal','app.Commons/empty'];

    function setUp()
    {
        $this-&gt;common = new CommonService();
        $this-&gt;kabukaTbl = TableRegistry::get('KabukaTbl');
    }

    /** getLatestDate is expected to return null
     *  when the result of select is empty.
     */
    function testGetLatestDate()
    {
        // load fixture
        $this-&gt;loadFixtures('Normal');
        $result = $this-&gt;common-&gt;getLatestDate();
        assert('2017-02-17', $result);
    }

    /** getLatestDate is expected to return null
     *  when the result of select is empty.
     */
    function testGetLatestDateError()
    {
        // load fixture
        $this-&gt;loadFixtures('Empty');
        $result = $this-&gt;common-&gt;getLatestDate();
        echo $result ;
        self::assertNull($result);
    }
}
</code></pre>
コードはだいぶ端折っていて、
正常に日付が返るケースとデータがないケース
のみのテストになります。

その中でもポイントはいくつかあって
<ul>
 	<li>1.テスト前の準備メソッド<strong>setUp()</strong></li>
 	<li>2.Fixtureの読み込み</li>
</ul>
の二つがポイントです。

&nbsp;

&nbsp;
<h2 class=""chapter"">テスト前の準備メソッドsetUp</h2>

テストクラスに<strong>setUp()</strong>メソッドを実装すると
クラス単位でのテストが始まる前に何らかの処理
例えば、テスト用のインスタンスの生成などを行えます。

また上では使っていませんが、
全テストの終了後の処理は、
<strong>tearDown()</strong>メソッドで実装できます。

&nbsp;

&nbsp;

&nbsp;
<h2 class=""chapter"">Fixturesの読み込み</h2>


Fixtureとはテストを行う際に
自動でデータベースにあらかじめ用意したデータを挿入し、
テスト後に削除するという形になります。

コードを見るとわかるのですが、
<pre><code class=""language-bash"">public $fixtures = ['app.Commons/normal','app.Commons/empty'];</code></pre>
で使用するFixtureを選択し、
<pre><code>$this-&gt;loadFixtures('Normal');</code></pre>
のような形でテストケースごとに使用するFixtureを分けています。

また、
最初に読み込む時に 'app.commons' とすれば
tests/Fixtures/CommonsFixture.phpのような
Fixtures直下のものを読み込むことができます。

ただ、
１クラスにより複数種のデータを扱うテストがあることも考えると
一段Directoryを切って、
Fixturesをグループ化するということも大切です。

&nbsp;
&nbsp;

以上、自分のサイトのソースを使い、
CakePHPで
テストコードを書いてみました。

実際のサイトにはここで書いた以上のテストを書く必要がありそうです。。
<a href=""http://kabu-ka.net"">http://kabu-ka.net</a>

&nbsp;

&nbsp;

&nbsp;

&nbsp;

私が去年から始めた株価データベースサイトです。
興味がおありでしたら覗いて見てください。。
"
"315","2017-04-24 01:04:53","2018-08-26 01:17:45","CakePHP3 でJSONレスンポンスを返すAPIを作成","cakephp3-json-response","http://ver-1-0.net/wp-content/uploads/2017/01/スクリーンショット-2017-01-03-18.52.23.png","engineering","&nbsp;

&nbsp;

私の運営しているサイトで
APIが必要になったので、
作り方を調べつつ
JSONレスポンスを返却するAPIを開発してみました。

&nbsp;

[after_intro]

&nbsp;
<h2 class=""chapter"">DBの準備</h2>
下のものは、説明用のアプリです。DBは以下のようなものを用意しました。
<table>
<thead>
<tr>
<th>id</th>
<th>title</th>
<th>artist</th>
<th>lyric</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>崖の上のポニョ</td>
<td>藤岡藤巻と大橋のぞみ</td>
<td>ポーニョポーニョポニョ...</td>
</tr>
<tr>
<td>2</td>
<td>だんご三兄弟</td>
<td>速水けんたろう</td>
<td>くしにささって だんご だんご...</td>
</tr>
<tr>
<td>3</td>
<td>およげ!たいやきくん</td>
<td>子門真人</td>
<td>まいにち まいにち ぼくらは てっぱんの...</td>
</tr>
</tbody>
</table>
&nbsp;
<h2 class=""chapter"">APIを作っていく</h2>
&nbsp;

まずは楽曲の一覧を通常通り画面で表示させますと
以下の通りになります。
<a href=""http://ver-1-0.net/wp-content/uploads/2017/04/スクリーンショット-2017-04-24-0.02.48.png""><img class=""alignnone size-large wp-image-316"" src=""http://ver-1-0.net/wp-content/uploads/2017/04/スクリーンショット-2017-04-24-0.02.48-1024x450.png"" alt="""" width=""700"" height=""308"" /></a>

&nbsp;

&nbsp;

&nbsp;

これらの楽曲をJSON形式で取得するAPIを作成します。

JSON形式のレスポンスを返す際のコードのポイントは3つで

&nbsp;

&nbsp;
<ul>
 	<li>
画面の表示はいらないのでオートレンダリングをOFFにする。・・・①
</li>
 	<li>
レスポンスオブジェクトにレスポンス形式をセットする。・・・②
</li>
 	<li>
レスポンスBodyにJSONデータを格納する。・・・③
</li>
</ul>
&nbsp;

になります。

以下、コードです。
<pre><code class=""language-php"">
define('BAD_REQUEST_CODE',400);
define('NORMAL_REQUEST_CODE',200);
define('AUTHORIZED_API_TOKEN','authorized_key_string');




class SongsController extends AppController
{
　　　　　　　　// index , view などのメソッドは割愛
　　　　　　　　・
　　　　　　　　・
　　　　　　　　・
    public function getSongs(){

    // ①HTMLの表示はいらないため自動レンダリングをOFFにする
    $this-&gt;autoRender = false;
    // レスポンスの形式をJSONで指定
    $this-&gt;response-&gt;type('application/json');

    // 認証キーを取得
    $key = $this-&gt;get_query_parmas('key');
    $auth = true;

    // 認証キーと合わない場合
    if ($key != AUTHORIZED_API_TOKEN) {
      // レスポンス用JSONを生成するための連想配列を生成
      $data = $this-&gt;create_response_data($key, BAD_REQUEST_CODE, 'bad request');
      // ③レスポンスのBodyにjsonをセット
      $this-&gt;response-&gt;body(json_encode($data));
      $auth = false;

    }

    // 認証成功の場合
    if ($auth) {
      // Tableから楽曲の一覧を取得
      $records =  $this-&gt;Songs-&gt;find('all')-&gt;toArray();
      // レスポンス用JSONを生成するための連想配列を生成
      $data = $this-&gt;create_response_data($key, NORMAL_REQUEST_CODE, 'success' , $records);
      $this-&gt;log(json_encode($data),LOG_DEBUG);
      // ③レスポンスのBodyにjsonをセット
      $this-&gt;response-&gt;body(json_encode($data,JSON_UNESCAPED_UNICODE));
    }

  }

  private function create_response_data($key, $status, $message , $data = null)
  {
    if ($status === NORMAL_REQUEST_CODE){
      $data = ['parmas' =&gt; ['key' =&gt; '[MASK]'],
        'result' =&gt; ['status' =&gt; $status, 'message' =&gt; $message],
        'data' =&gt; $data];
    }else{
      $data = ['parmas' =&gt; ['key' =&gt; $key],
        'result' =&gt; ['status' =&gt; $status, 'message' =&gt; $message]];
    }

    return $data;
  }
}
</code></pre>
&nbsp;

&nbsp;

これで、簡単にCakeでJSONを返すAPIを作成できます。

&nbsp;

&nbsp;

APIを使用する場合は、
普通リクエストに含まれる認証キーと照合してデータを
返すので、
そこも実装しています。
不正な場合は不正な旨の結果を返してあげると良いかと思います。
（ちゃんとやるならStatusCodeを変えてやるんだと思います。）

&nbsp;


&nbsp;

以下、実行結果です。
<pre><code class=""language-bash"">$ #　失敗パターン
$curl http://localhost:8765/Songs/getSongs?key=hogehoge
{""parmas"":{""key"":""hogehoge""},""result"":{""status"":400,""message"":""bad request""}}
$</code></pre>
&nbsp;
<pre><code>$#　成功パターン
$curl http://localhost:8765/Songs/getSongs?key=authorized_key_string
{""parmas"":{""key"":""[MASK]""},""result"":{""status"":200,""message"":""success""},""data"":[{""id"":1,""title"":""崖の上のポニョ"",""artist"":""藤岡藤巻と大橋のぞみ"",""lyric"":""ポーニョポーニョポニョ...""},{""id"":2速水けんたろう"",""lyric"":""くしにささって だんご だんご...""},{""id"":3,""title"":""およげ!たいやきくん"",""artist"":""子門真人"",""lyric"":""まいにち まいにち ぼくらは てっぱんの...""}]}
</code></pre>
&nbsp;

&nbsp;

&nbsp;

以上です！！

[after_article]"
"45","2017-01-04 23:47:57","2018-08-26 12:49:31","【CakePHP3】テンプレートを共通化。CakePHP部分テンプレート","cakephp3-partial","http://ver-1-0.net/wp-content/uploads/2017/01/スクリーンショット-2017-01-03-18.52.23.png","engineering::::rails","Rails のようにCakePHPでもViewの共通化ができないか
調べた。

その結果。見つけた。
<a href=""http://improve-future.com/cakephp3-how-to-use-partial-template-like-in-rails.html"">http://improve-future.com/cakephp3-how-to-use-partial-template-like-in-rails.html</a>

[after_intro]

&nbsp;
<h2>共通テンプレートをTemplate/Elementに切り出し</h2>
共通化したい部分のビューを
Template/Element配下に~.ctpとして配置。
CakePHP2では、View/Elementだったそう。

そして、本チャンのテンプレートから呼び出し
<pre><code class=""language-bash"">$this-&gt;element('search_firm',[ 'result' =&gt; $result_org); ?&gt;
</code></pre>
上の書き方だと
部分テンプレートでは $resultとして変数の値を引き継げる。

どこからでもテンプレートが呼び出せて便利。
検索フォームなどで使えるかも
あとは表組みなど。
"
"136","2017-01-29 14:27:43","2018-08-26 12:39:39","【CakePHP3】CakePHP3でSQLをログに吐き出す方法","cakephp3-sql-log","http://ver-1-0.net/wp-content/uploads/2017/01/5ntkpxqt54y-sai-kiran-anagani.jpg","engineering","CakePHP3でRailsのようにSQLを
ログに書き出すようにしたいなあと
思っていたので、
少し調べました。

&nbsp;

[after_intro]

&nbsp;

調べたところ
ここに書いてありました。
<a href=""https://book.cakephp.org/3.0/ja/orm/database-basics.html#database-configuration"">https://book.cakephp.org/3.0/ja/orm/database-basics.html#database-configuration</a>
<blockquote>log
クエリログを有効にするには true をセットします。 有効なクエリで debug レベルの時に、 queriesLog スコープでログ出力されます。</blockquote>
これでアプリケーションのdebug設定がtrueの時は,
SQLをapp/logs/*.logに吐いてくれます。

&nbsp;

&nbsp;

デバック設定にする方法は以下の通り
<strong>app/config/app.php 10~13行目あたり</strong>


<pre><code class=""language-php"">* true: Errors and warnings shown.
*/
'debug' =&gt; filter_var(env('DEBUG', true), FILTER_VALIDATE_BOOLEAN),

</code></pre>
"
"441","2017-06-17 11:52:07","2018-08-26 11:55:55","CakePHP3 twitteroauthを使って、tweetする( composer install )","cakephp3-twitteroauth","http://ver-1-0.net/wp-content/uploads/2017/06/19cb5fd445481b1337387866670d094f_s.jpg","engineering","&nbsp;

&nbsp;

今回はtwitterで
CapkePHP3からtweetする方法を紹介します。

このtwitteroauthというライブラリを使います。
<a href=""https://github.com/abraham/twitteroauth"">https://github.com/abraham/twitteroauth</a>

流れは以下のようになります。
<h4></h4>
<h4></h4>
<h4>①Twitter Appを作成し、アクセストークンを取得</h4>
<h4>②twitteroauthをcomposerでインストール</h4>
<h4>③Controllerからtweet</h4>
&nbsp;

[after_intro]

&nbsp;

&nbsp;
<h2 class=""chapter"">Twitter Appを作成し、アクセストークンを取得</h2>
&nbsp;

&nbsp;

このリンクから
<a href=""https://apps.twitter.com/"">https://apps.twitter.com/</a>
twitter Appを作成すると、
<ul>
 	<li>Consumer Key</li>
 	<li>Consumer Secret</li>
 	<li>Access Token</li>
 	<li>Access Token　Secret</li>
</ul>
を取得できます。
（後の手順で使用します。)

&nbsp;

&nbsp;

<span style=""text-decoration: underline;""><strong>1.Create Newをクリック</strong></span>
<img class=""alignnone size-large wp-image-442"" src=""http://ver-1-0.net/wp-content/uploads/2017/06/スクリーンショット-2017-06-17-11.10.29-1024x691.png"" alt=""Create Twitter App"" width=""700"" height=""472"" />

&nbsp;

&nbsp;

<span style=""text-decoration: underline;""><strong>2.必要な情報を入力</strong></span>

&nbsp;
<img class=""alignnone size-full wp-image-443"" src=""http://ver-1-0.net/wp-content/uploads/2017/06/スクリーンショット-2017-06-17-11.10.59.png"" alt=""Register Twitter App"" width=""929"" height=""736"" />

&nbsp;

<span style=""text-decoration: underline;""><strong>3.トークンの確認</strong></span>

&nbsp;

作成が完了すると、
以下のような画面になるので、
Keys and access Tokenタブを選択し、
<ul>
 	<li>Consumer Key</li>
 	<li>Consumer Secret</li>
 	<li>Access Token</li>
 	<li>Access Token　Secret</li>
</ul>
が表示されていることを確認します。
（アクセストークンがない場合は、Token Actionsあたりにあるボタンを押して作成する。)
<img class=""alignnone size-full wp-image-450"" src=""http://ver-1-0.net/wp-content/uploads/2017/06/スクリーンショット-2017-06-17-12.01.29.png"" alt=""my twitter app"" width=""782"" height=""160"" />

&nbsp;

&nbsp;
<h2 class=""chapter"">②twitteroauthをcomposerでインストール</h2>
&nbsp;

&nbsp;

compserを使って、
twitteroauthをダウンロードします。
<pre><code class=""bash"">composer require abraham/twitteroauth
</code></pre>
&nbsp;
<h2 class=""chapter"">Controllerからtweet</h2>
&nbsp;

実際にtweetするコードは以下になります。

実際は、
トークンは定数ファイルなどで外だしした方が良いかもしれません。

また、
今回は、Controllerにtweetの処理を記述しましたが、
tweet,create_twitter_oauthあたりのメソッドは、
モジュールにまとめて他のコントローラからも使えるようにすると
再利用できて良いと思います。

&nbsp;

<strong>TwitterController</strong>
<pre><code class=""language-php"">
namespace App\Controller;
use Abraham\TwitterOAuth\TwitterOAuth;

class TweetController extends AppController 
{ 
　　function postTweet(){ 
　　　// Hello Worldと呟く 
　　　$this-&gt;tweet(""Hello World!!!!!"");&lt;
 　}
 　　
　　function tweet($text){
     if ( $text != null &amp;&amp; count($text) &gt; 0 ){
         $oauth = $this-&gt;create_twitter_oauth();
         $result = $oauth-&gt;post('statuses/update', array(""status""=&gt; $text ));
     }
 　}

　　private　function create_twitter_oauth(){
　　　　// ①で入手したトークンを引数に渡し,TwitterOAuthオブジェクトを生成する。
　　　　return new TwitterOAuth(
　　　　　　　　　　　　　""Your TWETTER_CONSUMER_KEY"",
　　　　　　　　　　　　　""Your TWETTER_CONSUMER_SECRET"",
　　　　　　　　　　　　　""Your TWETTER_ACCESS_TOKEN"",
　　　　　　　　　　　　　""Your TWETTER_ACCESS_TOKEN_SECRET""
　　　　　　　　　　　　　);
　　　　}
}
</code></pre>

&nbsp;"
"608","2017-09-02 12:10:11","2018-01-30 23:20:00","CodePen - webサービスのデザインを考えるときにおすすめの海外サイト","codepen","http://ver-1-0.net/wp-content/uploads/2017/09/codepen.png","engineering::::design","&nbsp;

どうも<a href=""https://twitter.com/version1_2017"">@version1</a>です。

私はwebサイトの
デザインとかレイアウトを
考えるときは、ググって「いいね！」って
思うのを探すことが多いんですが、

それをするのに<strong>おすすめのサイト</strong>が
あったので紹介します。

&nbsp;

&nbsp;

それは、
<a href=""https://codepen.io/"">CodePen</a>というサイトで
ここには、数々の
イケてるデザインレイアウトやコンポーネントなどがアップされています。
<a href=""https://codepen.io/"">https://codepen.io/</a>

<img class=""alignnone size-large wp-image-616"" src=""http://ver-1-0.net/wp-content/uploads/2017/09/スクリーンショット-2017-09-02-12.07.04-1024x770.png"" alt=""codepentop"" width=""700"" height=""526"" />

&nbsp;
<h2 class=""chapter""> 気に入ったデザインを探して参考にしてみる</h2>
&nbsp;

例えばですが、
自分のサイトのログインフォームを
チャチャッと作りたいけど
なんか「良いレイアウトとか配色ないかなぁ」
と考えたら

サイトの右上の虫眼鏡の部分をクリックして
「Login」
とかで検索します。

<a href=""https://codepen.io/search/pens?q=Login&amp;limit=all&amp;type=type-pens"">https://codepen.io/search/pens?q=Login&amp;limit=all&amp;type=type-pens</a>

そうすると
ズラってイケてるデザインが
出てきます。

<img class=""alignnone size-large wp-image-612"" src=""http://ver-1-0.net/wp-content/uploads/2017/09/スクリーンショット-2017-09-02-12.00.58-1024x766.png"" alt=""searchinig result by login"" width=""700"" height=""524"" />

&nbsp;

&nbsp;

そして、
きになるデザインがポチッと
クリックすれば
気になるデザインのhtml,css,javascriptの
コードが見れます。

&nbsp;

<img class=""alignnone size-large wp-image-614"" src=""http://ver-1-0.net/wp-content/uploads/2017/09/スクリーンショット-2017-09-02-12.04.54-1024x768.png"" alt=""codepen detail"" width=""700"" height=""525"" />

&nbsp;

コードを見たり、
どうやって書いているんだろうというのを
見てみたり、
(このスケスケどうやっているんだろうとか）
気入ったデザインにコメントしたり
使い方は自由です！

というか見てるだけでも割とワクワクして
見てられます！

&nbsp;
<h2 class=""chapter"">自分でもアップロードしてみた</h2>
&nbsp;

そもそも、
ログインフォームを
作るのに
どんな感じで作ろかなぁというので
このサイトに辿りついたので、
自分でも作成したものをアップロードしてみました。

&nbsp;
<iframe height='500' scrolling='no' title='Simple Login Form' src='//codepen.io/version1/embed/QMVzJd/?height=265&theme-id=0&default-tab=result,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/version1/pen/QMVzJd/'>Simple Login Form</a> by version1 (<a href='https://codepen.io/version1'>@version1</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

&nbsp;

・・・

他の人気デザインに比べれば
だいぶ見劣りしますが

&nbsp;

まあまあとりあえずはこんなところで、
(Edit on CodePenというところを押すとサイトで見れます）
&nbsp;
CodePenを使えば上のようにブログでのシェアも簡単なので
ぜひ使ってみると良いと思います！！

&nbsp;

以上です！


&nbsp;
<hr>

webデザインの基本のちょっと上を学ぶなら
この本をオススメします。

css,htmlはわかっているけど
なんかデザインとかレイアウト
とかはいまいちという人はこの本にあるコードを
真似してみると良いと思います。

<a target=""_blank"" href=""https://www.amazon.co.jp/gp/product/4798141577/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4798141577&linkCode=as2&tag=llg01-22&linkId=59c6ec7214ebedaca86ef962b5ea40ac"">HTML5/CSS3モダンコーディング フロントエンドエンジニアが教える3つの本格レイアウト スタンダード・グリッド・シングルページレイアウトの作り方 (WEB Engineer’s Books)</a><img src=""//ir-jp.amazon-adsystem.com/e/ir?t=llg01-22&l=am2&o=9&a=4798141577"" width=""1"" height=""1"" border=""0"" alt="""" style=""border:none !important; margin:0px !important;"" />

<a target=""_blank""  href=""https://www.amazon.co.jp/gp/product/4798141577/ref=as_li_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4798141577&linkCode=as2&tag=llg01-22&linkId=6211e8a5d20ef0dc2a07bf1e1e7586b0""><img border=""0"" src=""//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=JP&ASIN=4798141577&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=llg01-22"" ></a><img src=""//ir-jp.amazon-adsystem.com/e/ir?t=llg01-22&l=am2&o=9&a=4798141577"" width=""1"" height=""1"" border=""0"" alt="""" style=""border:none !important; margin:0px !important;"" />
&nbsp;

"
"552","2017-08-09 23:18:54","2018-08-26 01:16:14","LaravelにVue.jsを導入してみる。- Bladeの{{ }}とコンフリクトする問題の対処 -","conflict-vue-with-blade","http://ver-1-0.net/wp-content/uploads/2017/01/5ntkpxqt54y-sai-kiran-anagani.jpg","engineering","&nbsp;

どうも、
トレーニング後にビールを
飲んでしまう@version1です。

&nbsp;

今回は、
そろそろ勉強のために、
JqueryでなくAngular, React, Vueらへん
使って見ようかということ
で<strong>vue.js</strong>を<strong>laravel</strong>にインストールしてみました。

&nbsp;

[after_intro]

&nbsp;

数あるjavascriptライブラリの
中で<strong>vue.js</strong>を選んだ理由は
特になく、なんとなく
なのですが強いて言うのであれば、
今からやるのであれば後発の新しいライブラリを
使いたいと言うところでした。

&nbsp;

以下、Googleトレンドで他ライブラリとの
検索の割合調べてみた画像。

<img class=""alignnone size-large "" src=""http://ver-1-0.net/wp-content/uploads/2017/08/Compare-Javasctipt-Library-1024x567.png"" alt=""javasctipyライブラリ比較"" width=""700"" height=""388"" />

&nbsp;

検索数も伸びてますね。
後発だけに他ライブラリの課題を見事に解決しているとか
いないとか

&nbsp;
<h2 class=""chapter"">まずはライブラリのインストール</h2>
&nbsp;

インストールの方法は<a href=""https://jp.vuejs.org/v2/guide/installation.html"">こちら</a>から

最初に触ってみる程度であれば
CDNでの読み込みが一番早いので、
htmlのヘッダ部に下記を追加してしまうのが早いです。
<pre><code>&lt;script src=""https://unpkg.com/vue""&gt;&lt;/script&gt;
</code></pre>
&nbsp;

が、
これだとライブラリがアップデートされると
アプリが使うライブラリのバージョンも変わってしまうので、
ダウンロードリンクから直接
ライブラリをダウンロードして配置します。

&nbsp;

&nbsp;

開発版と本番版があるようなので
両方ダウンロードしてpublic/jsに

public/js/vue.js (開発版）
public/js/vue.min.js (本番版）

を配置します。

&nbsp;

ヘッダ部分は以下のようにして、
.envのAPP_DEBUGの値を元に読み込むライブラリを
変えるようにしましょう。
<pre><code class=""language-markup"">@if (env('APP_DEBUG'))
    &lt;script src=""{{ asset('js/vue.js') }}""&gt;&lt;/script&gt;
@else
    &lt;script src=""{{ asset('js/vue.min.js') }}""&gt;&lt;/script&gt;
@endif
</code></pre>
&nbsp;
<h2 class=""chapter"">Hello Worldしてみる　〜 Bladeとのコンフリクト解消方も ~</h2>
&nbsp;

上のような設定が終わっていれば
下記のようにすれば<strong>Hello Vue! </strong>
という文字が表示されるので
導入完了です！

&nbsp;

※注意※

<strong>Laravel</strong>で<strong>blade</strong>を使っている場合は、
{{}}のMastache記法がコンフリクトして、
Vueのテキスト表示がPHPに解釈されエラーとなってしまいます。

<strong>blade + vue</strong>の場合は
<strong>blade（PHP)の式を書く場合</strong> -&gt; {{}}で囲う
<strong>vueの式を書く場合は、</strong> -&gt; {{}} の前に@を表示する

ようにしてください。

&nbsp;
<pre><code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;head&gt;
    &lt;title&gt;Sample&lt;/title&gt;
    &lt;link href=""{{ asset('css/reset.css') }}"" rel=""stylesheet""&gt;
    &lt;link href=""{{ asset('css/style.css') }}"" rel=""stylesheet""&gt;
    @if (env('APP_DEBUG'))
        &lt;script src=""{{ asset('js/vue.js') }}""&gt;&lt;/script&gt;
    @else
        &lt;script src=""{{ asset('js/vue.min.js') }}""&gt;&lt;/script&gt;
    @endif
&lt;/head&gt;

&lt;body&gt;
    &lt;div class=""container"" id=""app""&gt;
        @{{ message }}
    &lt;/div&gt;
    &lt;script&gt;
      var app = new Vue({
            el: '#app',
            data: {
                message: 'Hello Vue!'
            }
        })
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
&nbsp;

以上です。

↓ここでは<strong>Vue.js</strong>でできたアプリを試していますので是非
<a href=""https://jp.vuejs.org/v2/examples/"">https://jp.vuejs.org/v2/examples/</a>

&nbsp;

[after_article]"
"1501","2017-11-29 23:07:19","2018-01-30 23:16:43","dockerコンテナのDBにホストから接続する方法","connect-db-container","https://ver-1-0.net/wp-content/uploads/2017/11/whale-2193356_640-1.jpg","engineering","&nbsp;

&nbsp;
<h2 class=""chapter"">PostgresのコンテナのDBの中身をみたい</h2>
&nbsp;

掲題のようにdockerで作成したDBコンテナのDBにホスト側のクライアントツールで接続したいという欲求が高まったので記事にしました。

vagrantなどだと完全に別OSのサーバになるので、IPアドレスを調べてそのまま接続ということができるのですが、Dockerの場合は同OS上にコンテナを作成するのでIPは変わらずにいけます。
<pre><code class=""console"">psql -U [任意のuser] -h 127.0.0.1 database </code></pre>
&nbsp;

&nbsp;

[after_article]

&nbsp;
<h2 class=""chapter"">ホストOSでもデータベースをインストールしている場合</h2>
&nbsp;

ホストOSでもpoostgresなどのDBサーバが起動している場合は、クライアントツールが先にホストOSのデータベースに接続してしまうので思ったことができません。

&nbsp;

その場合はサーバを停止してあげるかホスト側の5432以外のポートをコンテナの5432のポートに転送するように設定します。

サーバを停止せずにコンテナに接続するポートを変更する場合は、
コマンドなら

&nbsp;
<pre><code class=""console"">docker run -p [外部から接続したいポート]:80 postgres</code></pre>
&nbsp;

&nbsp;

docker-comopseなら

&nbsp;
<pre><code class=""ruby"">
  db:
    images: postgres
    ports:
      - ""[外部から接続したいポート]:5432""
</code></pre>
&nbsp;

とします。

あとは接続の際に先ほど指定した外部から接続する際に使うポートを指定してあげれば無事に接続できます。

&nbsp;
<pre><code class=""console"">psql -U [任意のuser] -h 127.0.0.1 -p [指定したポート] database</code></pre>
&nbsp;

GUIクライアントツールでも同様にポート番号やユーザ名に注意して接続可能です。

&nbsp;

&nbsp;
<h2 class=""chapter"">その他Dockerに関する記事たち</h2>
&nbsp;

dockerに関する記事を書いているので、よろしければどうぞ。

&nbsp;

<a href=""https://ver-1-0.net/2017/11/19/rails-nginx-postgres-on-docker-1/"">DockerでRails + Nginx + Postgresの環境を構築する。その①</a>

dockerの入門として、基本的な仕組みを説明し、コンテナを起動させたり、コンテナ’に接続してみたりしています。

&nbsp;

<a href=""https://ver-1-0.net/2017/11/23/rails-nginx-postgres-on-docker-2/"">DockerでRails + Nginx + Postgresの環境を構築する。その②</a>

rubyのイメージを使って、railsアプリケーションを構築する方法を説明しています。

&nbsp;

<a href=""https://ver-1-0.net/2017/11/29/docker-rails-nginx-postgres/"">DockerでRails + Nginx + Postgresの環境を構築する。その③</a>

dockerでのRails + Nginx + Postgres 環境について解説しています。

&nbsp;

&nbsp;

[after_article]"
"1295","2017-11-17 00:20:44","2018-01-30 23:17:20","CoolなマークダウンエディタInkdrop！！ マークダウンも使えて、モバイルとの連携もできる。","cool-markdown-editor-inkdrop","https://ver-1-0.net/wp-content/uploads/2017/11/Screen-Shot-2017-11-16-at-22.45.06.png","engineering::::for-beginner","<h2 class=""chapter"">Coolなメモアプリ Inkdrop を見つけたきっかけ</h2>
&nbsp;

知り合いのエンジニアさんからこのような記事を
教えてもらったのがきっかけで、
このアプリに出会いました。
<a href=""https://blog.craftz.dog/how-i-built-a-markdown-editor-earning-1300-mo-profit-inkdrop-c6691eca7091"">
Markdownエディタを作って月15万円稼ぐまでにやったこと — Inkdrop</a>

まず記事のタイトルがなかなか興味をそそるので
じっくりと記事を読んでいきました。

記事を読んでみると、
アプリをグロースするに当たってなるほど！ということが書かれていたり、
かなり戦略的に考えて運営されているのが伺えました。

記事がよかったので、アプリもつい触ってみたくなり、
アプリを実際にダウンロードして触ってみました。

最初の印象は単純に
<strong>「え、かっこいい」</strong>
でした。

すごい表面的な評価ではありますが、
<strong>ファーストインプレッションて大事ですよね。</strong>

有料のアプリですが、
値段もお手頃 月5ドルだそうです。

とりあえず<strong>60日間は無料で使える</strong>そうなので、早速無料で登録して使い始めました。
まだ、無料使用期間中ではありますが、
私のお気に入りの<strong>Inkdrop</strong>の良さをまとめてみました。

[after_intro]
<h2 class=""chapter"">Coolなポイント その1 洗練されたUI</h2>
&nbsp;

画像にもあるように、
<strong>UIがシンプルで、洗練されていて使っていてワクワクします！！</strong>

他のアプリとは<strong>少し違ったフォルムで独特な</strong>
<strong> 配色のアイコン</strong>もまた良いです。

<a href=""https://ver-1-0.net/2017/11/17/cool-markdown-editor-inkdrop/screen-shot-2017-11-16-at-22-50-51/"" rel=""attachment wp-att-1298""><img class=""alignnone size-large wp-image-1298"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/Screen-Shot-2017-11-16-at-22.50.51-1024x688.png"" alt=""inkDropダークなUI"" width=""700"" height=""470"" /></a>

UIの好みも人それぞれですが、
こっちのダークなUIも渋くていいですよね。

各ペインがフラットに繋がってる感じとか、フォントとかが
絶妙で、眺めているだけでも楽しくなってきます。

普段使いのツールなので、
<strong>ユーザーをワクワクさせるアプリ</strong>というのは強いですね。

&nbsp;
<h2 class=""chapter"">Coolなポイント その2 開発体制</h2>
&nbsp;

開発者の<strong>Takuya</strong>さんですが、
Mediumのポストをみる限り、
<strong>企画・開発・運用・マーケティングまでを全部一人</strong>でこなしてしまっています。
しかも着実にプロダクトも成長し、
海外のユーザもいるという。

凄いの一言です。。
その一言につきます。

プロダクトに対して評価が下されるべきで、
何人で作ったかというのは本質的な部分では
ないのかもしれないですが、
やっぱり<strong>一人でこれだけのクオリティのものを</strong>
<strong> 作れるというのは本当に凄い</strong>と思うし、尊敬します。

記事中で表明されているように、
<blockquote>僕はいわゆる「成功」を求めているのではなく、ただ今をより楽しく生きようとしているだけです。</blockquote>
というように自分のライフスタイルにや
エンジニアとしてのスタイルへの強いこだわりも
伺えます。

勝手ながらついつい応援したくなってしまい、
今後の課金は間違いないかと思います。

[mid_article]
<h2 class=""chapter"">Coolなポイント その3 端末間連携</h2>
&nbsp;

ポイントその3は

<strong>端末間で連携ができるし、オフラインでも使えるというところです。</strong>

マークダウンエディタは他にも色々と存在するのですが、
これは他のプロダクトとは一線を画しており、
<strong>モバイル版があるというのもイケているポイント</strong>です。

モバイル版もあると
出先で気になったことなどはその都度メモをして置けますし、
マークダウンを使えばブログの下書きを書いてしまうこともできます。

これらの<strong>メモは自動でデスクトップアプリにも同期</strong>されるので、
重宝しています。

ちょうどこういうアプリ欲しかった。
Evernoteなどクラウド上にデータを保存するアプリはいくつかありますが、
マークダウンは使えないですよね。

&nbsp;

&nbsp;
<h2 class=""chapter"">まとめ</h2>
&nbsp;

UIがかっこよくて、
携帯と同期もできて、開発者の方も素晴らしくてという言うことなしの
<strong>inkdrop</strong>を紹介してきました。

こちらは有料のエディタにはなるようですが、
月5ドル払う価値は十分あると断言できます。

私もこれまで綺麗なUIが特に気に入っていてMacでも
iPhoneでも楽しく使わせていただいてます。

今回は
<strong>inkdrop</strong>の良いところをとりあえず、
3つほど上げさせて頂きましたが、
今後も機能が追加されていくそうですので、
どんな便利な機能が追加されていくのか
楽しみです!!

<a href=""https://blog.craftz.dog/the-next-roadmap-of-inkdrop-vol-2-ec04a81cc3a7"">Inkdropの実装予定の機能 (vol.2)</a>

&nbsp;

個人的には、
・ファイルごとに同期させるか選べる機能。
・アプリが起動している状態なら、ショートカットキーで
最前面にウィンドウを表示してactivateしてくれる機能

&nbsp;

があると嬉しいなぁ〜という感じです。

&nbsp;

ぜひ使ってみてください。
オススメです。

&nbsp;

[after_article]"
"1278","2017-11-15 00:47:51","2018-01-30 23:17:30","サイトやfaviconを作成するときに使える配色自動生成ツール coolors.co","cooler-co-convinent-color-tool","https://ver-1-0.net/wp-content/uploads/2017/11/coolors.co_.png","engineering::::for-beginner","&nbsp;

こんばんは！

突然ですが、webサイトなどデザインを行うときに
<strong>配色についてなかなかアイディアが出て来ず手が止まってしまう
</strong>はたまた、
<strong>どのような配色にすれば良いかわからない</strong>
というような悩みありませんでしょうか。

私は、
ついこないだブログ開設当初から放置していた
faviconを作成しているときにこの問題にぶち当たりました。

※faviconとは、下の画像のようなタイトルの横にある画像の
ことです。
<a href=""https://ver-1-0.net/2017/11/15/cooler-co-convinent-color-tool/screen-shot-2017-11-14-at-23-52-18/"" rel=""attachment wp-att-1280""><img class=""alignnone size-full wp-image-1280"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/Screen-Shot-2017-11-14-at-23.52.18.png"" alt=""faviconの例"" width=""142"" height=""37"" /></a>

&nbsp;

&nbsp;

<strong>「サイトの配色にあったfaviconが欲しいけど、
自己流でやったら絶対ガチャガチャの色遣いになる・・・」</strong>

&nbsp;

そういう悩みを解決してくれるサイトが
あり、これを使ったらそれなりのfaviconができたので、
以下でサイトを紹介していきます。

&nbsp;

[after_intro]

&nbsp;

&nbsp;
<h2 class=""chapter"">配色自動生成サイト Coolers.co</h2>
&nbsp;

<a href=""https://coolors.co/"">coolers.co</a>というサイトを使うと
良い感じの色を自動で生成してくれるので、
その配色をそのまま使って
自身の作品の配色を決めることができてしまいます！！

<strong>ガチャガチャな色づかいを防ぐ</strong>には、
配色の理論だったりを知らないといけないので、
これはかなり助かります。

さらに、
メールアドレスで登録を行ってしまえば、
<strong>一度決めた配色を保存して取っておくことができます。</strong>
使いかたはチュートリアルも
ついてあったりと
<strong>簡単でシンプルなツールになっています。</strong>

シンプルで簡単とは言いましたが、
サイトが英語で抵抗感がある方もいらっしゃるかと思うので、
後で解説していきます。

&nbsp;

&nbsp;

[mid_article]

&nbsp;
<h2 class=""chapter"">Coolers.coの使い方</h2>
&nbsp;

&nbsp;

まず、
トップページはこのような形になります。

<a href=""https://ver-1-0.net/2017/11/15/cooler-co-convinent-color-tool/screen-shot-2017-11-15-at-0-04-49/"" rel=""attachment wp-att-1282""><img class=""alignnone size-full wp-image-1282"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/Screen-Shot-2017-11-15-at-0.04.49-e1510673350509.png"" alt=""coolorsトップページ"" width=""865"" height=""678"" /></a>

配色を保存して置きたいなどの要望があれば、
アカウントを作成して置きましょう。
今回は使い方の説明になるので、
登録方法は割愛します。

&nbsp;

&nbsp;

まず最初に色を自動生成するページには、
メニューのGenerateというリンクをクリックします。

色の自動生成を行う画面は以下のようになっています。

&nbsp;

<a href=""https://ver-1-0.net/2017/11/15/cooler-co-convinent-color-tool/coolors-explanation/"" rel=""attachment wp-att-1281""><img class=""alignnone size-large wp-image-1281"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/coolors-explanation-1024x926.png"" alt=""coolorsの使い方"" width=""700"" height=""633"" /></a>

&nbsp;

&nbsp;

画像にはつらつらと説明を書きましたが、
<strong>メニュー真ん中あたりの「？」のアイコンをクリックをして</strong>
<strong> チュートリアルを行う</strong>のが、
使い方を知る上では一番良いと思います。

画像には書きませんでしたが、
<strong>一番基本的な部分は</strong>
<strong> スペースボタンで、新たな配色を生成するということです。</strong>
表示された配色が気に入らなければ、
スペースボタンを押してガンガン切り替えましょう。

また、
もし自分で使いたい色が決まっているのであれば、
それらを入力して、<strong>ロック</strong>をかけてしまいましょう。

<strong>ロック</strong>をかけてしまえば、
次にスペースボタンを押した時でもそこの色は
シャッフルされず、それに合わせた色が表示されます。

そして、
何度かシャッフルを繰り返したり、
微調整を行ったらあとは、
それを画像に吐き出したり、保存しておくとことができます。

画像のエクスポートは、
メニュー右上からできます。

また、
それより右にあるアイコンを押せば、
配色を保存したり、
保存した配色を確認することができます。

以上、
一応解説はしましたが、
チュートリアルを行うと一通りの使い方は、
動きを見ながらなれることができるので、
それが一番良いと思います。

説明はここまでで、
ぜひみなさん、配色に困った場合はcoolers.coを
お使いになると良いと思います。

では！

[after_article]"
"1343","2017-11-20 12:58:23","2018-08-26 01:10:28","CSSでマウスオーバーした時にうにょーんって下線が伸びるようにする","css-mouseover-underline","https://ver-1-0.net/wp-content/uploads/2017/11/underline-transform.gif","engineering::::design","&nbsp;

cssでマウスオーバした時に下線
をうにょーんってさせるアニメーションです。
<p class=""codepen"" data-height=""500"" data-theme-id=""0"" data-slug-hash=""gXoVEX"" data-default-tab=""css,result"" data-user=""version1"" data-embed-version=""2"" data-pen-title=""gXoVEX"">See the Pen <a href=""https://codepen.io/version1/pen/gXoVEX/"">gXoVEX</a> by version1 (<a href=""https://codepen.io/version1"">@version1</a>) on <a href=""https://codepen.io"">CodePen</a>.</p>
<script async src=""https://production-assets.codepen.io/assets/embed/ei.js""></script>

それぞれ、Spring,Summer,Autumn,Winterの文字の
上にマウスを当てるとアンダーラインが引かれるようになっています。


demoにはcodepenを利用しています。
興味ある方はこちらもどうぞ
<a href=""https://ver-1-0.net/2017/09/02/codepen/"">CodePen – webサービスのデザインを考えるときにおすすめの海外サイト</a>
&nbsp;

&nbsp;

cssについて、
簡単に説明すると肝になっているのは、
<pre><code class=""language-css"">
.list-item::after{
   content: '';
   display:block;
   width:0;
   margin: 6px auto 0;
   border-bottom: 1px solid  white;
   transition: width 0.3s ease-in-out;
}

.list-item:hover::after{
  width: 100%;
}
</code></pre>
ここの部分です。

&nbsp;

[mid_article]

&nbsp;

&nbsp;

&nbsp;
<h2 class=""chapter"">after擬似要素で見えない下線を指定する</h2>
&nbsp;

まずは、
:after擬似要素で、それぞれSpringなど季節の
文字の後にwidth:0で下のボーダーだけが存在する要素を
入れ込みます。

その後に、
.list-item:hover::afterで
マウスオーバーされた時のスタイルを指定して
いきます。
ここではwidth:100pxが指定させているので、
下線が表示されるようになります。

&nbsp;
<h2 class=""chapter"">transformでうにょーんを表現する</h2>
&nbsp;

注意点として、
transitionで最初borderのwidthが0である部分から、
マウスオーバーされてwidthが100%になるまでの、
時間を指定する必要があります。

この例では、
0.3秒かけて変化させるという指定を
行なっているので、
実際のサンプルのような動きになります。
(指定しないといきなり下線が表示される感じになります。)

&nbsp;
<h2 class=""chapter"">aタグをinline-blockで指定する</h2>
&nbsp;

また、
aタグでdisplay:inline-blockを
指定していますが、
<pre><code class=""language-css"">a {
  color:white;
  display: inline-block;
  font-size:30px;
  text-decoration:none;
}
</code></pre>
これを指定しないと、
文字幅でなく、画面の横幅全体に下線が
広がってしまうので注意してください。

[after_article]"
"950","2017-10-27 17:33:42","2017-12-22 22:42:36","【書籍紹介】「できる社員」に感じる違和感について。「日本企業の風土組織改革」柴田 昌治","dekiru-syain","http://ver-1-0.net/wp-content/uploads/2017/09/78456f795b3d1f38d8bb2c2d2b69124f_s.jpg","colum::::%e6%9c%ac%e6%a3%9a","&nbsp;

&nbsp;

今回紹介する本はこちらです。
<a href=""http://amzn.to/2hd3wXe"">日本企業の組織風土改革 その課題と成功に導く具体的メソッド</a>
<a href=""https://www.amazon.co.jp/dp/B019OQ2HR4/ref=as_li_ss_il?_encoding=UTF8&amp;btkr=1&amp;linkCode=li2&amp;tag=llg01-22&amp;linkId=8105d69f6b1235cc782bceb79338695a"" target=""_blank"" rel=""noopener noreferrer""><img src=""//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=B019OQ2HR4&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=llg01-22"" border=""0"" alt=""日本企業の組織風土改革の表紙""/></a><img style=""border: none !important; margin: 0px !important;"" src=""https://ir-jp.amazon-adsystem.com/e/ir?t=llg01-22&amp;l=li2&amp;o=9&amp;a=B019OQ2HR4"" alt="""" width=""1"" height=""1"" border=""0"" />

&nbsp;

&nbsp;

ある日いつもの
ようにネットサーフィンをしていたら
このような記事を見つけました。
<a href=""http://shuchi.php.co.jp/the21/detail/2881"">「優等生社員のワナ」第１回　なぜ「できる人」が会社を滅ぼすのか</a>

<a href=""https://ver-1-0.net/2017/10/27/%e3%80%8c%e3%81%a7%e3%81%8d%e3%82%8b%e7%a4%be%e5%93%a1%e3%80%8d%e3%81%ab%e6%84%9f%e3%81%98%e3%82%8b%e9%81%95%e5%92%8c%e6%84%9f/screen-shot-2017-10-27-at-12-33-43/"" rel=""attachment""><img class=""alignnone size-full wp-image-951"" src=""https://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-27-at-12.33.43.png"" alt=""できる社員に関するツイート"" width=""593"" height=""526"" /></a>
<blockquote>「決断が速い」「処理能力が高い」「気が利く」「調整能力がある」……誰もが「できるビジネスマンの条件」として思い浮かべるこれらの能力。だが、それだけに頼っていると、むしろ組織を弱体化させるリスクとなる。こう話すのは、組織の風土改革の第一人者として知られる柴田昌治氏だ。従来型の「できる人」から脱却し、自分と組織を強くするにはどうすればいいのか。</blockquote>
&nbsp;

私が日常的に感じていた
巷にあふれる「できる社員」像みたいなものに対する違和感について
言及している記事で「その通り！」と思い
紹介されている書籍もそのまま勢いで購入してしまいました。

今回はこちらの書籍について
紹介します。

[adsense_double_rect]

&nbsp;
<h2 class=""chapter"">「できる社員」への違和感の正体</h2>
&nbsp;

リンク先の記事では、
いわゆる「できる社員」の弊害を
<ul>
 	<li style=""list-style-type: none;"">
<ul>
 	<li>仕事をさばく</li>
 	<li>上司の的をあてにいく</li>
 	<li>即断即決</li>
 	<li>自部門のみのエキスパート</li>
 	<li>調整能力がある</li>
</ul>
</li>
</ul>
のように指摘しています。

&nbsp;

中には
<h4>「え、それ良いことじゃないの？」</h4>
と言われそうな
ものもありますが、
これらが私の感じる<strong>違和感の正体</strong>でした。

例えば、
一般的に<strong>仕事をさばく</strong>、処理する能力が高い人は<strong>「できる」</strong>人と
認められやすいですが、
それを言い換えると意味や目的・価値などを<strong>「考える習慣」の欠如と</strong>も
言え「上司から指示されたことはやるが、それ以上のことは何もやらない」
と言うこともできます。

また、「即断即決」と言うものも上司が全部自分の経験に基づいて
「即断即決」してまうので部下が育たない。
現場に身近で詳しいはずの部下の意見が判断に利用されない、
議論されないなどの問題があります。

他にも「調整」という言葉は聞こえは良いですが、
皆の意見を平等に聞いて、なんとなく当たり触りのない判断になってしまうリスクや、
率直な意見を覆い隠して問題を先送りにしてしまう可能性も十分にあり得ます。

ネットに転がっている記事やメディアで話題になる<strong>「できる社員」</strong>に関する
記事はどれもこれらのリスクに対して言及していることが
あまりなく、思考停止しているような感じがして
これまで、それらの記事や情報に随分と

「なんか違うよなぁ」

「こういう人が身近にいても
別に本当の意味ですごいとは思わないだろうなぁ」

と違和感を感じていました。

中でも
「上司の的をあてにいく」「調整能力」あたり
に強く違和感がありました。

（会社ってそもそもお客様に良いサービスを提供して、売り上げ
を上げるというところが目標なはずなのに、
あれ社内での調整のためとか、
上司にOKをもらうために時間を使っているのはおかしい。）

という風に常日頃から感じていたことを
代弁してもらったような気がしてスッキリしました。

&nbsp;

&nbsp;
<h2 class=""chapter"">組織の生産性の低さと立場を守るための保険仕事</h2>
&nbsp;

これは面白いと思って
<a href=""http://amzn.to/2hd3wXe"">日本企業の組織風土改革 その課題と成功に導く具体的メソッド</a>
も読んで見たのですが、

記事の方では割と「できる社員」という形で個人にスポットを
当てた記事になっていましたが、
こちらはより組織にスポットを当てたものでした。

&nbsp;

例えば、
日本企業の間接部門の生産性の低さを指摘し、
さらにそれらが決して怠惰な仕事の結果でないこととも言っています。

また、
日本企業で働く組織人は<strong>「自分の立場」</strong>を第一に考え、
上司や同僚の評価に依存し、<strong>「利益」など本来的な企業の存在意義</strong>とは
ずれた指標で行動を決め、
その「立場」を守るための保険仕事ばかりに多くの時間を費やしている
としています。
（同僚や上司が遅くまで働くからなんとなく自分もつられて残業するなど・・）

上司に言われた仕事で、
目的や利益・採算など考えても腑に落ちない点もあるが
右から左に仕事をこなしていけば、
とりあえずは上司や同僚からの評判も悪くならないからやる。
というようなことが日常茶飯事だと書いています。

本文では、
<strong>「コアネットワーク」</strong>という概念を元に組織体質の改善を図り
組織の生産性を向上させることなども言及されていますが、
読み進めていく中で
いわゆる「できる社員」「評価される社員」の共通概念を改めて
考え直すだけでも大分違うのではないでしょうか。

&nbsp;
<h2 class=""chapter"">まとめ -できる社員像を考え直そう-</h2>
&nbsp;

本文では、
人間に二種類の判断能力があると書かれています。

<strong>「与えられた制約条件の範囲内で最適解を求めていく能力」</strong>
と
<strong>「問題をそれぞれバラバラに捉えるのではなく、問題相互の関連で捉えることができる能力」</strong>
です。

後者は
与えられた制約条件を鵜呑みにするのではなく、
他の条件との関係性の何が本当の制約条件なのかを見直したり、
どこに本当の問題があるのか特定し、それの解決に尽力する能力のことのようです。

これまでの「できる社員像」というのは
前者の能力を持って「仕事を早くさばける」
「関係各所に気を配り、波風が立たないで仕事を進める」
ことが評価されている部分が大きいです。

が、

私は先にも言ったように改めて<strong>「できる社員」像</strong>を
改めないといけないと考えています。

これからは
後者の能力が評価されるようになるべきで、

「あの人は調整能力がすごい！」
「あの人はたくさんの仕事量をこなしていてすごい！」

などではなく、
「あの人は根本的な問題の解決に向き合っている」
「会社全体を考えて部門や立場に縛られず仕事をしている」
などの部分で評価されるというのが理想です。

目的地を勘違いしていると、
物事はあらぬ方向に進んでしまいます。
まずは、「できる社員」像をしっかり考え直して、
それに即した教育・育成・文化醸成ができると
個人が自立した活発で生産性の高い組織ができるのではないでしょうか。
以上です。

紹介はここまでですが
<ul>
 	<li>「できる社員」「優秀な社員」という言葉に違和感を感じる方</li>
 	<li>日本企業の生産性を嘆いている方</li>
 	<li>今いる自分の会社で無駄な仕事ばかりされている方</li>
 	<li>そもそもできる社員って何という部分に興味のある方</li>
</ul>
は一度目を通してみると良いと思います。

読んでくださってありがとうございました。
<div class=""cstmreba""><div class=""booklink-box""><div class=""booklink-image""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4569829740/llg01-22/"" target=""_blank"" rel=""nofollow"" ><img src=""https://images-fe.ssl-images-amazon.com/images/I/510WwA0rhEL._SL320_.jpg"" style=""border: none;"" /></a></div><div class=""booklink-info""><div class=""booklink-name""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4569829740/llg01-22/"" target=""_blank"" rel=""nofollow"" >日本企業の組織風土改革 (PHPビジネス新書)</a><div class=""booklink-powered-date"">posted with <a href=""https://yomereba.com"" rel=""nofollow"" target=""_blank"">ヨメレバ</a></div></div><div class=""booklink-detail"">柴田 昌治 PHP研究所 2015-12-19    </div><div class=""booklink-link2""><div class=""shoplinkamazon""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4569829740/llg01-22/"" target=""_blank"" rel=""nofollow"" >Amazonで購入</a></div><div class=""shoplinkkindle""><a href=""http://www.amazon.co.jp/exec/obidos/ASIN/B019OQ2HR4/llg01-22/"" target=""_blank"" rel=""nofollow"" >Kindleで購入</a></div><div class=""shoplinkrakuten""><a href=""https://hb.afl.rakuten.co.jp/hgc/163854b7.d97e8d5b.163854b8.3c41ae34/?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F13523236%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F"" target=""_blank"" rel=""nofollow"" >楽天ブックスで購入</a></div><div class=""shoplinkseven""><a href=""https://px.a8.net/svt/ejp?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2&a8ejpredirect=http%3A%2F%2F7af-ent.omni7.jp%2Frelay%2Faffiliate%2FentranceProcess.do%3Furl%3Dhttp%253A%252F%252F7net.omni7.jp%252Fsearch%252F%253FsearchKeywordFlg%253D1%2526keyword%253D4-56-982974-6%252520%25257C%2525204-569-82974-6%252520%25257C%2525204-5698-2974-6%252520%25257C%2525204-56982-974-6%252520%25257C%2525204-569829-74-6%252520%25257C%2525204-5698297-4-6"" target=""_blank"" rel=""nofollow"" >7netで購入</a><img border=""0"" width=""1"" height=""1"" src=""https://www17.a8.net/0.gif?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2"" alt=""""></div>            	  	  	  	</div></div><div class=""booklink-footer""></div></div></div>
&nbsp;

[adsense_double_rect]"
"2117","2018-08-23 09:28:55","2018-09-02 13:09:21","[React] Component, PureComponent, SFCComponentのレンダリングの挙動の違いをまとめてみる。","diffrence-between-react-components","https://ver-1-0.net/wp-content/uploads/2018/08/Screen-Shot-2018-08-23-at-7.58.42.png","engineering::::react","「Componentはどういう時に再レンダリングされるんですか？」

Reactで開発している方はもちろん、「propsやstateが変更された時だよ！」と自信をもって答えられるかもしれません。

が、

「ネストした時はどうなるんですか？」

「PureComponentやSFCとかってレンダリングの挙動が変わるんですか？どう変わるんですか？」

みたいなところにちゃんと答えられる自信がなかったのでそれぞれのコンポーネントの違いをまとめてみました。

[after_intro]

&nbsp;
<h2>各コンポーネントの違い</h2>
&nbsp;
<h3>Component</h3>
&nbsp;
<pre><code>class HelloComopnent extends Component {
  render() {
   return &lt;div&gt;&lt;h1&gt;Hello World&lt;/h1&gt;&lt;/div&gt;
}</code></pre>
言わずと知れたReactのComponentクラスです。

チュートリアルでも使っているように特に意識しなければ、このクラスを継承する形でコンポーネントを定義します。

Component classにはライフサイクルメソッドなるものが実装されており、コンポーネントのマウント時から、アンマウント時、propsが変化した場合などにフックを仕込むことができます。

<a href=""https://reactjs.org/docs/react-component.html#the-component-lifecycle"">he Component Lifecycle</a>

&nbsp;
<h3>PureComponent</h3>
&nbsp;
<pre><code>class HelloComopnent extends PureComponent {
  render() {
   return &lt;div&gt;&lt;h1&gt;Hello World&lt;/h1&gt;&lt;/div&gt;
}</code></pre>
Reactのv15.3から追加されたコンポーネントで基本的な部分はComponentと変わらずライフサイクルメソッドが使えます。

Componentとの大きな違いは、デフォルトでshouldComponentUpdateが実装されている所です。

shouldComponentUpdateはライフサイクルメソッドの一つでReactコンポーネントを再レンダリングするかどうかをtrue/falseで返すことで再レンダリングを制御できます。(trueを返した場合だけ再レンダリングされます。)

繰り返しにはなりますがPureComponentはshouldComponentUpdateがデフォルトで実装されているので自身のコンポーネントのpropsに変更がなければ再レンダリングが走らないようになっています。

&nbsp;
<h3>SFC(Stateless Functional Component)</h3>
&nbsp;
<pre><code>const HelloComopnent = (props) =&gt; {
   return &lt;div&gt;&lt;h1&gt;Hello World&lt;/h1&gt;&lt;/div&gt;
}</code></pre>
SFCはステートレスの名前の通り、内部に状態を持ちません。

関数としてのコンポーネントなので、同じpropsからはつねに同じdomがレンダーされることが保証されています。

表示に特化したPlesentationalなコンポーネントとして用いられいることが多く、ライフサイクルメソッドが使えません(渡されたpropsを表示するだけとなので必要ないと言えばそうなのですが)

&nbsp;
<h2>デモでそれぞれの違いを確認</h2>
&nbsp;

説明のためにデモを作ってみました。

<a href=""https://version-1.github.io/react-rendering-sample/"">デモ</a>

<a href=""https://version-1.github.io/react-rendering-sample""><img class=""alignnone size-full wp-image-2126"" src=""https://ver-1-0.net/wp-content/uploads/2018/08/Screen-Shot-2018-08-23-at-7.58.42.png"" alt=""React Rendering Sample"" width=""577"" height=""929"" /></a>

&nbsp;

実際にデモを見てもらうとわかるのですが、
親のコンポーネントがあってそのなかにそれぞれ並列でComponent,PureComponent,SFCが存在するような構造になります。

ソースはこちらです。
<a href=""https://github.com/version-1/react-rendering-sample"">version-1/react-rendering-sample</a>

紫のボタンがcounterをインクリメントしてくれるボタンで、
それぞれの色のボタンがそれぞれのflgをトグルしてくれるボタンです。

stateは全て親コンポーネントをラップするAppComponentが保持しています。

紫のボタンをクリックするとタブがcounterがインクリメントされます。
その他の色のボタンを押すと対応したコンポーネント内に表示されているflgの値が切り替わります。

また、それぞれのコンポーネントのrenderメソッド内にconsole.logを仕込んであるのでコンポーネントが再レンダリングされるタイミングでコンソールにログが表示されるようになっています。
（以下で色々と説明していきますが、実際にデベロッパーツール開いて自分で試した方がわかりやすいです。）

これらを前提に実際のコンポーネントの挙動を見ていきます。

&nbsp;
<h3>親コンポーネントから渡されたpropsが変化した場合</h3>
&nbsp;

先ほども説明したように、紫のボタンを押すとcounterの値がインクリメントされるので<strong>親コンポーネントのpropsが変化し、再レンダリング</strong>されます。続いてそのpropsが渡されている子のコンポーネントも連鎖して<strong>再レンダリングが走ります。</strong>

&nbsp;
<h3>親コンポーネントから渡されていないpropsが変化した場合</h3>
&nbsp;

親コンポーネントからpropsが渡されていない（自身のpropsが変化しない）ケースを試したいので、それぞれのボタンを押下して各コンポーネントがレンダリングされるかどうかを調べます。

結果は次の表の通りになり、
<table>
<thead>
<tr>
<th></th>
<th>緑ボタン押下</th>
<th>黄ボタン押下</th>
<th>赤ボタン押下</th>
</tr>
</thead>
<tbody>
<tr>
<th>Component（緑）</th>
<td>レンダリングされる</td>
<td>レンダリングされる</td>
<td>レンダリングされる</td>
</tr>
<tr>
<th>Pure Component（黄）</th>
<td><strong>レンダリングされない</strong></td>
<td>レンダリングされる</td>
<td><strong>レンダリングされる</strong></td>
</tr>
<tr>
<th>SFC（赤）</th>
<td>レンダリングされる</td>
<td>レンダリングされる</td>
<td>レンダリングされる</td>
</tr>
</tbody>
</table>
PureComponent以外は親の状態（props) が変化すると自身の状態が変化していないのにもかかわらず再レンダリングされてしまうことがわかります。

&nbsp;
<h2>無駄なレンダリングを避けるためのPureComponent</h2>
&nbsp;

実際にデモを動かしてみて、無駄なレンダリング（自身の状態が変わっていないのに再描画すること）によるオーバヘットを防ぐにはPureComponentを極力使っていった方が良いということがわかりました。

もちろん、ComponentでもshouldComponentUpdateを愚直に実装すれば同じことができるのですが、まあPureComponentで良いですよね。またSFCの場合は、recomposeなどのライブラリを使えばPureComponentチックなSFCもかけるみたいです。

「現状そんなに複雑で大きいコンポーネントってないから別にPureComponentじゃなくても」というのもあるかと思うのですが、個人的な意見としてシステムは寿命が長くなるほど大きく複雑に変化しておくのでいまのうちから少しずつPureComponentで実装しておくと後が楽なのかなと思っています。

&nbsp;
<h2>PureComponentを使わない方が良い場合</h2>
&nbsp;

どうやら、shouldComponentUpdateの計算コストも少なくないらしく、頻繁にpropsが変化するようなコンポーネントでは、毎回レンダリングするかどうかの計算を行わないといけないのでそういったコンポーネントにはComponentを使って無条件に再レンダリングさせるのが良いようです。

PureComopnent最高！という感じで全てのコンポーネントを置き換えると逆に遅くなったというのもありますので一応ここは念頭においておく必要があるのではないでしょうか？

&nbsp;
<h2>まとめ</h2>
&nbsp;
<ul>
 	<li>PureComponentはデフォルトでshoulComponentUpdateが実装されており、自身のpropsが変化していなければ再レンダリングしないという判断を自動でしてくれる。</li>
 	<li>親が再レンダリングされるとComponentもSFCも再レンダリングされ自身のpropsが変わっていないのにレンダリングされるという無駄が生じる。</li>
 	<li>PureComponentは頻繁に自身のpropsが書き換わるようなコンポーネントでは使わない方がよい</li>
</ul>
このように3つまとめてみましたが、今回の観点で比べるとPureComponentが特徴的な動作をするのでこのようなPureComponentが主役のまとめになりました。

レンダリングの挙動が言葉で説明されてもいまいちピンとこなかったのでデモを作って公開してみました。実際にさわってみると自分でも結構わかりやすいなと感じたのでぜひ触ってみてください。

"
"1987","2018-04-30 10:30:54","2018-09-02 13:09:21","Dockerで使い捨てできるMysqlコンテナを構築","docker-build-tmp-mysql","https://ver-1-0.net/wp-content/uploads/2017/11/whale-2193356_640-1.jpg","engineering","&nbsp;

自分のローカル環境で、複数のMySQL使わないといけない時ってありますよね？

仕事ではちょっと古めのバージョンを使ってるけど、プライベートの開発では最新の使いたいなどなど

そんな時はDockerを使って使い捨てのMy SQL環境を構築しましょう。

Dockerを使えば、起動時に必要なデータベース、ユーザーを作成してくれるので一度環境さえ作ってしまえば、使い捨てのデータベースを作成したり、捨てたりを結構カジュアルにできます。

&nbsp;
<h2>Dockerの公式イメージを取得</h2>
&nbsp;

Dockerの基本はこちらにまとめているので、Dockerの基本的な操作がわからない方はこちらを参照ください。
<a href=""https://ver-1-0.net/2017/11/19/rails-nginx-postgres-on-docker-1/"">DockerでRails + Nginx + Postgresの環境を構築する。その①</a>

また、Dockerのインストールがまだの人はこちらでインストールしましょう。

今回は、My SQL環境の構築にMy SQLの公式イメージを使っていきます。

公式イメージを使うとコンテナ作成時に環境変数を与えてあげるだけで、必要なデータベースとユーザーを作成することができます。

先ずははDockerコマンドで公式イメージを取得してきましょう。

&nbsp;
<pre><code class=""language-bash"">docker pull mysql</code></pre>
&nbsp;

このコマンドでmysqlの最新のバージョンを取得することができます。

バージョンを指定して取得したい場合は、

&nbsp;
<pre><code class=""language-bash"">docker pull mysql:5.6</code></pre>
&nbsp;

のようにします。

&nbsp;
<h2>Dockerコンテナの作成</h2>
&nbsp;

イメージが取得できたら、コンテナを作成していきます。

&nbsp;
<pre><code class=""language-bash"">docker run --name mydb -e MYSQL_ROOT_PASSWORD -p 3309:3306 -d mysql</code></pre>
&nbsp;

docker runでコンテナを作成していきます。

引数の説明をすると

&nbsp;
<table>
<tbody>
<tr>
<th>--name</th>
<td>コンテナの名前を指定</td>
</tr>
<tr>
<th>-e</th>
<td>コンテナ起動時の環境変数を指定</td>
</tr>
<tr>
<th>-p</th>
<td>ポートフォワーディングの指定</td>
</tr>
<tr>
<th>-d</th>
<td>デーモン起動</td>
</tr>
</tbody>
</table>
&nbsp;

mysql 使用するイメージを指定。5.6を使う場合はmysql:5.6とする。

&nbsp;

ポイントはいくつかありますが、繰り返し書いたように-e オプションでコンテナ起動時の環境変数を指定できるので、起動時のROOTユーザーのパスワードを設定しています。

指定できる環境変数はいくつかあって、

&nbsp;
<table>
<tbody>
<tr>
<th>MYSQL_USER</th>
<td>起動時に作成されるユーザー名</td>
</tr>
<tr>
<th>MYSQL_PASSWORD</th>
<td>起動時に作成されるユーザーのパスワード</td>
</tr>
<tr>
<th>MYSQL_ROOT_PASSWORD</th>
<td>起動時のrootユーザーのパスワード</td>
</tr>
<tr>
<th>MYSQL_DATABASE</th>
<td>起動時に作成されるデータベース名</td>
</tr>
</tbody>
</table>
&nbsp;

のようになります。

また、 dockerでは-pオプションでポートフォワーディングの指定ができ、上のように
3309:3306
とするとホスト上の3309番のポートをコンテナ上の3306番ポートに、流し込んでくれます。

&nbsp;

&nbsp;
<h2>起動したMySQLコンテナに接続する</h2>
&nbsp;

ここが今回の記事の肝になってきますが、 dockerにあまり慣れていない人は立ち上げたDBコンテナに接続する時のIPアドレスは？？？どうやって接続するの？？？となりがちです。

結論から先に書くと、IPアドレスは127.0.0.1です。

これを聞くと、ローカルに既にあるmysqlのホストも127.0.0.1なんだけど。。。

となると思いますが安心してください。 dockerに繋げるときは別のポートで繋ぎましょう。

これを念頭においているので、上のコンテナ作成時は3309番がコンテナの3306番に割り当てられるように指定しています。

この3309番というのはポートが空いてさえいればなんでも良いのですが上で3309:3306として指定しているので、今回MySQLに接続する際はこの3309番を使用します。

&nbsp;
<pre><code class=""language-bash"">mysql -u root -p -h 127.0.0.1 -P 3309</code></pre>
&nbsp;

でデータベースに接続できます。

&nbsp;
<h2>独自のユーザー、データベースが作成されたコンテナを作成</h2>
&nbsp;

上では、rootユーザーでコンテナを使う形になっていますがそんなのは嫌なのでちゃんと独自のユーザーとDBを使いましょう。

便宜的に独自のデータベース名をmydbとするとコンテナ作成のコマンドは以下になります。

&nbsp;
<pre><code class=""language-bash"">docker run --name mydb \
-e MYSQL_ROOT_PASSWORD=password \
-e MYSQL_USER=mydb \
-e MYSQL_PASSWORD=mydb \
-e MYSQL_DATABASE=mydb \
-p 3309:3306 \
mysql</code></pre>
&nbsp;

これで独自のユーザーを持ったコンテナを作成できます。接続する際のコマンドは

&nbsp;
<pre><code class=""language-bash"">mysql -u mydb -p -h 127.0.0.1 -P 3309 mydb</code></pre>
&nbsp;

です。

&nbsp;
<h2>データベース起動時に初期化処理を差し込む</h2>
&nbsp;

mysqlの公式イメージでは、/docker-entrypoint-initdb.d
にスクリプトやSQLを配置するとコンテナ起動時に実行してくれます。

コンテナ作成時にデータベース内のテーブルもいっしょに作成してほしい！ダンプを取り込んで欲しい！という場合はローカルにそれらのファイルを配置しコンテナ作成時にそのディレクトリを/docker-entrypoint-initdb.dにマウントしてあげます。

ホストのディレクトリをコンテナのディレクトリにマウントするには、-vオプションを指定します。
(ホストのディレクトリは絶対パスでの指定が必要です。）

例を書くと、

&nbsp;
<pre><code class=""language-bash"">mkdir init-scripts
touch init-scripts/init.sql
</code></pre>
&nbsp;

として
init.sqlの中身を

&nbsp;
<pre><code class=""language-sql"">create table ~略~</code></pre>
&nbsp;

として次のコマンドでコンテナを作成します

&nbsp;
<pre><code class=""language-bash"">docker run --name mydb \
-e MYSQL_ROOT_PASSWORD=password \
-e MYSQL_USER=mydb \
-e MYSQL_PASSWORD=mydb \
-e MYSQL_DATABASE=mydb \
-v $( pwd )/init-scripts:/docker-entrypoint-initdb.d \
-p 3309:3306 \
-d mysql</code></pre>
&nbsp;

これでコンテナ起動時に必要なデータベースを流し込みことができます。

ここまでで記事タイトルの目的は達成していますが以下にはトラブルシューティングを書いておきます。

&nbsp;
<h2>初期化スクリプトがエラーになりコンテナが立ち上がらない時</h2>
&nbsp;

初期化のスクリプトでエラーになった場合はコンテナが立ち上がらないので、-dオプションを取ってログを見ながらデバッグしましょう。

&nbsp;
<h2>立ち上がったコンテナを削除したい</h2>
&nbsp;
<pre><code class=""language-bash"">docker rm [コンテナ名] で削除できます</code></pre>
&nbsp;

-fオプションをつけるとコンテナが起動している状態でも問答無用で削除できます。

同じ名前のコンテナを２つ起動することはできないので既にあるコンテナが邪魔な場合は消してしまいましょう。

&nbsp;
<h2>mysqlが文字化けする</h2>
&nbsp;

mysqlのデータが文字化けする場合は、mysqlの設定が原因なので、起動時にmysqlのオプションで文字コードをutf8に指定してあげましょう。

&nbsp;
<pre><code class=""language-bash"">docker run --name mydb \
-e MYSQL_ROOT_PASSWORD=password \
-e MYSQL_USER=mydb \
-e MYSQL_PASSWORD=mydb \
-e MYSQL_DATABASE=mydb \
-v $( pwd )/init-scripts:inithogehoge \
-p 3309:3306 \
-d mysql --character-set-server=utf8 --collation-server=utf8_unicode_ci</code></pre>
&nbsp;
<h2>まとめ | 自分が使用しているスクリプトを晒す</h2>
&nbsp;

こうやって使い捨てのDBが構築できるようになるとカジュアルにデータベース捨てられるので、データも綺麗な状態を保てるし、ローカルも汚さないで複数のデータベース入れられるしでとっても捗りますね。

ちょっと難点として気軽にdb構築できる割にコマンドが長くて煩雑なので僕はスクリプトにして、再利用しています。

今回はそのスクリプトを晒して終わりにしたいと思います。基本は上にまとめたコマンドと同じですが、コンテナの落とし上げを繰り返すと同じコンテナ名が被って起動できないので、既に同じコンテナがある場合は削除するか訪ねてくれるようにしています。

もしつかえそうだったらコピペして使って頂ければ

&nbsp;
<pre><code class=""language-bash"">INIT=$(pwd)""/init/ddl.sql""
CONTAINER_NAME=mydb

if [[ $( docker ps -a | grep ""${CONTAINER_NAME}"" ) ]]
then
  echo  ${CONTAINER_NAME}"" is already started...""
  echo  ""remove container? (y/n) -------&gt;""
  read ANS
  if [[ $ANS == [yY] ]]
  then
    docker rm -f ${CONTAINER_NAME}
  else
    exit 1
  fi
fi

if [[ ! -r ${INIT} ]]
then
  echo ""not found ${INIT}""
  exit 1
fi

docker run \
  --name ${CONTAINER_NAME} \
  -e MYSQL_DATABASE=${CONTAINER_NAME} \
  -e MYSQL_USER=${CONTAINER_NAME} \
  -e MYSQL_PASSWORD=${CONTAINER_NAME} \
  -e MYSQL_ROOT_PASSWORD=${CONTAINER_NAME} \
  -v ${INIT}:/docker-entrypoint-initdb.d \
  -p 3309:3306 \
  -d mysql:5.6 --character-set-server=utf8 --collation-server=utf8_unicode_ci
</code></pre>
&nbsp;"
"1466","2017-11-29 02:41:35","2018-08-26 01:06:08","DockerでRails + Nginx + Postgresの環境を構築する。その③","docker-rails-nginx-postgres","https://ver-1-0.net/wp-content/uploads/2017/11/whale-2193356_640-1.jpg","engineering::::rails","&nbsp;
<h2 class=""chapter"">Docker Composeを利用する</h2>
&nbsp;


<ol>
 	<li><a href=""https://ver-1-0.net/2017/11/19/rails-nginx-postgres-on-docker-1/"">DockerでRails + Nginx + Postgresの環境を構築する。その①</a></li>
 	<li><a href=""https://ver-1-0.net/2017/11/23/rails-nginx-postgres-on-docker-2/"">DockerでRails + Nginx + Postgresの環境を構築する。その②</a></li>
 	<li>DockerでRails + Nginx + Postgresの環境を構築する。その③</li>
</ol>



前回二つの記事でDockerとは何？？ということや、Dockerでrailsのアプリケーションを構築する方法などを紹介してきました。今回はそのラストの記事になります。


前回までは、イメージを引っ張ってきて、コンテナ作って、起動してRailsアプリケーションを作ってという一コンテナの話に終始していましたが今回は違います。

今回はdocler-composeを使って、各コンテナを管理するということを行なっていきます。そのゴールとしてRailsの構成としてよくある<strong>Rails+Nginx+Postgres</strong>という構成を実現するということをやっていきます。

Dockerには<strong>「一コンテナ一プロセス」</strong>という思想があり一つのコンテナにアプリケーションもデータベースもぜーんぶ含め流のではなく、アプリケーション用のコンテナ、Webサーバ用のコンテナ、DB用のコンテナに分けてコンテナを作りそれぞれを連携させるというのが正しいあり方になっています。

&nbsp;

そうなると当然Railsのアプリケーションを立ち上げた時に

<strong>「どのコンテナを起動すればいいの？」</strong>

などの管理が大変になります。

&nbsp;

その問題を解決するのがdocker-composeでyaml形式のdocker-compose.ymlファイルにそれぞれのコンテナの関係性を記述していきます。

そのため、一度docker-composeを記述してしまえば、
<pre><code class=""language-bash"">docker-compose up</code></pre>
のコマンドだけで必要なコンテナが起動することができます。

docker-compose.ymlの紹介はここまでにして、実際にdocker-composeでrails+nginx+postgress環境を作っていきましょう。

[after_intro]

&nbsp;
<h2 class=""chapter"">rails new でアプリケーション環境を構築</h2>
&nbsp;

&nbsp;

まずは前回作成したrails のイメージを使ってrailsアプリケーションをローカルのディレクトリに生成します。

&nbsp;

コマンドを実行する前に適当なGemfileをカレントにコピっといてください。Gemfileがないと当然怒られます。
<pre><code class=""language-bash"">mkdir rnp-sample &amp; cd rnp-sample
cp -pr [手頃なGemfile] ./.
docker run --rm -it -v ""$PWD"":/usr/src/sample version1/sample bundle install
docker run --rm -it -v ""$PWD"":/usr/src/sample version1/sample rails new . -d postgresql</code></pre>
これで構築を始める準備完了です。

&nbsp;

次に、コンテナを起動する際のDockerfileを用意します。

Docker Fileはこんな形になります。
<pre><code class=""language-docker"">FROM ruby:2.4.2

# 必要なモジュールをインストール
# ここでpostgresのクライアントを入れておく
RUN apt-get update -qq &amp;&amp; \
    apt-get install -y build-essential libpq-dev nodejs postgresql-client

ENV APP_DIR /rnp

# Rails App
RUN mkdir /rnp
WORKDIR $APP_DIR
ADD Gemfile $APP_DIR
ADD Gemfile.lock $APP_DIR
RUN bundle install
ADD . $APP_DIR
RUN mkdir -p tmp/sockets # nginxとの通信用


# Expose volumes to frontend
VOLUME /rnp/public
VOLUME /rnp/tmp

# Start Server
CMD bundle exec puma
</code></pre>
このファイルで行なっていることは前回の内容とかぶるところが多いので説明は省きます。

&nbsp;

ここまででアプリケーション部分の準備は完了です。
お次は、postgresです。

&nbsp;
<h2 class=""chapter"">postgresの環境を構築</h2>
&nbsp;

railsアプリのファイル群をルート直下（rnp-sample/)に置いて他のコンテナはcontainers/配下に配置するような形で配置していきます。
<pre><code class=""language-bash"">mkdir -p containers/postgres
cd containers/postgres
echo 'create database rnp;' &gt; initdb.sql
touch Dockerfile
</code></pre>
&nbsp;

このような形でpostgres関係のファイルを配置していきます。

&nbsp;

initdb.sqlというファイルが気になるかと思うのですが、postgresイメージを使用してコンテナを作成する場合に、sqlファイルやshファイルを/docker-entrypoint-initdb.d/配下に配置しておくと、コンテナ起動時にそれらを実行してくれます。

ここでは、とりあえずアプリケーションで使用するDatabaseだけ作成していますが、ユーザを作成するSQLを入れたりするのも良いかと思います。

&nbsp;

&nbsp;

Dokcerファイルは次のようになります。
<pre><code class=""language-docker"">FROM postgres:10.1
COPY initdb.sql /docker-entrypoint-initdb.d/.
</code></pre>
シンプルに先ほど作成したsqlを/docker-entrypoint-initdb.d下にコピーしただけです。Dockerfileでここまでやっておけばあとはビルドしたときに勝手にSQLが発行されます。

&nbsp;

&nbsp;
<h2 class=""chapter"">nginxの環境を構築</h2>
&nbsp;

&nbsp;

次は、nginxの環境を構築していきます。
<pre><code class=""language-bash"">mkdir -p containers/nginx
cd containers/nginx
touch Dockerfile
</code></pre>
&nbsp;

Dockerfileは
<pre><code class=""language-docker"">FROM nginx:1.12.2
RUN rm -f /etc/nginx/conf.d/*
ADD nginx.conf /etc/nginx/conf.d/[任意のアプリ名].conf
CMD /usr/sbin/nginx -g 'daemon off;' -c /etc/nginx/nginx.conf
</code></pre>
&nbsp;

このようになりADDするnginx.confは下記のようになります。

&nbsp;
<pre><code class=""language-nginx""># https://github.com/puma/puma/blob/master/docs/nginx.md
upstream [任意のアプリ名] {
  server unix:///[任意のアプリ名]/tmp/sockets/puma.sock;
}

server {
  listen 80;
  server_name localhost; 

  keepalive_timeout 5;

  # static files
  root /[任意のアプリ名]/public;

  location / {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;

    # static files
    if (-f $request_filename) {
      break;
    }
    if (-f $request_filename.html) {
      rewrite (.*) $1/index.html break;
    }
    if (-f $request_filename.html) {
      rewrite (.*) $1.html break;
    }

    if (!-f $request_filename) {
      proxy_pass http://[任意のアプリ名];
      break;
    }
  }

  location ~* \.(ico|css|gif|jpe?g|png|js)(\?[0-9]+)?$ {
    expires max;
    break;
  }
}
</code></pre>
&nbsp;

また、これに関連してpumaの設定の変更も必要なので

&nbsp;

config/puma.rb
<pre><code class=""language-ruby"">threads_count = ENV.fetch(""RAILS_MAX_THREADS"") { 5 }.to_i
threads threads_count, threads_count
port        ENV.fetch(""PORT"") { 3000 }
environment ENV.fetch(""RAILS_ENV"") { ""development"" }
plugin :tmp_restart

app_root = File.expand_path(""../.."", __FILE__)
bind ""unix://#{app_root}/tmp/sockets/puma.sock""

stdout_redirect ""#{app_root}/log/puma.stdout.log"", ""#{app_root}/log/puma.stderr.log"", true

</code></pre>
とします。

&nbsp;

お次は実際にdocker-composeを書いていきます。

&nbsp;

&nbsp;

[mid_article]
<h2 class=""chapter"">docker-composeでRails+Nginx+Postgresを管理する。</h2>
&nbsp;

先にも書いたようにdocker-composeはyml形式で各コンテナ間の関係を記載していて、先に今回のdocker-composeを見せておくと以下のようになります。

&nbsp;
<pre><code class=""language-yaml"">version: '2'
services:
  app:
    build: .
    volumes:
      - .:/rnp
    depends_on:
      - db
  db:
    build: containers/postgres
    environment:
      - POSTGRES_PASSWORD=password
    volumes:
      - ./db/pgdata:/var/lib/postgresql/data
  web:
    build: containers/nginx
    ports:
      - ""80:80""
    volumes_from:
      - app
</code></pre>
&nbsp;

それぞれservicesの下で各コンテナに関して定義をしており,buildという命令がどのディレクトリでビルドを行うのか指名します。
※docker-composeに関してはこちらを<a href=""http://docs.docker.jp/compose/toc.html"">compose リファレンス</a>参考にすると良いと思います。

今回の場合は,app = rails, db = postgres , web = nginxとなります。左辺に関しては自由に名前をつけるごとができ、わかりやすいような名前をつけることが好ましいです。

&nbsp;

他の命令を説明するとvolumesでホストOSのディレクトリをコンテナ内のディレクトリにマウントしています。上のDockerfileではapp,dbでマウントを行なっていますが、appではホストOSのファイルの変更がコンテナに同期されるため、dbではコンテナを削除してもデータが消えないようにするために行なっています。

構築の段階ではあまり気になりませんが、railsのアプリのコードがコンテナと同期されていないといちいちコンテナ内に入ってソースを変更しなくてはなりません。<strong>appのマウントは開発中の手間を省くため</strong>に行なっています。

一方dbでのマウントは<strong>データの永続化</strong>を実現するために行なっています。これをしないとコンテナを終了した場合や自分のPCを再起動した場合docker上のデータは完全に失われてしまいます。コンテナを起動するたびに新たにデータを入れ直すというスクリプトを組むことも可能ですが、都度時間を取られてしまうので、望ましくないです。

<strong>データベースの永続化</strong>は検索してみると色々な記事が出てくるので腑に落ちない場合はそれらを参考にすると良いと思います。

ここまででだいたい<strong>Rails+Nginx+Postgres</strong>の環境構築はあとビルドするだけとなってはいますが、最後にデータベースの設定だけ変更して完了となります。

下記はあくまでも例ですが、お使いの環境に合わせてconfig/database.ymlを変更しましょう。
<pre><code class=""language-yaml"">default: &amp;default
  adapter: postgresql
  encoding: unicode
  pool: &lt;%= ENV.fetch(""RAILS_MAX_THREADS"") { 5 } %&gt;
  host: db
  database: rnp
  username: postgres
  password: password
</code></pre>
databaseのパスワードはdocker-composeで記した環境変数の値になります。また、ここでホスト名をdbとしている所にも注意です。

&nbsp;

ここまでで一通り準備ができたのでビルドしていきます。
<pre><code class=""console"">docker-compose up</code></pre>
エラーが出力されず、問題なさそうでなければhttp://localhostに接続してrailsのトップ画面が出力されることを確認します。

&nbsp;

ここまでで構築は完了です。追加で開発を行いたい場合は、
<pre><code class=""language-bash"">docker-compose run --rm app rails g scaffold</code></pre>
や
<pre><code class=""language-bash"">docker-compose run --rm app rake db:migrate</code></pre>
とすれば
などどして開発して行けばホストOSにrailsがインストールされていなくても開発を行うことができます。

&nbsp;

docker-comoposeは一度触っただけではなかなか理解しづらい部分がありました。今回この記事をかくにあたり自分で試行錯誤をしたらだいぶ理解が深まったように思います。データの永続化など実際開発を行うときに大事になる部分はあまり説明できなかったので、もしかしたら別記事でフォローするようなことがあるかもしれません。

とりあえず今回はここまでとします。

では。

[after_article]"
"1221","2017-11-12 15:49:19","2018-01-01 11:30:10","Udemy でデザインのコースを受けてみた感想。Udemyで勉強するメリットまとめ","e-learning-udemy","https://ver-1-0.net/wp-content/uploads/2017/11/Udemy-Top.png","%e3%81%8a%e3%81%99%e3%81%99%e3%82%81%e8%a8%98%e4%ba%8b","&nbsp;

日々のエンジニアリング中で、自分でアプリケーションを作っていて、デザインが思った通りいかず「くそっ!!」ってなってしまうのが最近の悩みなのですが、

今になって「学生の時にもっと勉強しておけばよかった」など変えられないことにくよくよしたりしています。

そんなことを言っていても過去は変えられないので興味のある分野の勉強をするべくUdemyに登録して、デザインのコースを購入してみました。

<strong>シリコンバレー発のオンライン学習サービスUdemy</strong>
<a href=""https://px.a8.net/svt/ejp?a8mat=2TVGOQ+BH6WX6+3L4M+68MF5"" target=""_blank"" rel=""nofollow noopener"">
<img src=""https://www29.a8.net/svt/bgt?aid=171109178694&amp;wid=004&amp;eno=01&amp;mid=s00000016735001048000&amp;mc=1"" alt="""" width=""300"" height=""250"" border=""0"" /></a>

&nbsp;

実際に使ってみて学習効率の面だったり、場所を選ばずに勉強できる点でかなりよかったので紹介させていただきます。

&nbsp;
<h2 class=""chapter"">オンライン学習サービスUdemyとは</h2>
<a href=""https://www.udemy.com/courses/?deal_code=JPA8DEAL2PERCENTAGE&amp;aEightID=s00000016735001"" rel=""attachment wp-att-1223""><img class=""alignnone size-full wp-image-1223"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/Udemy-Top.png"" alt=""Udemy-Top"" width=""640"" height=""360"" /></a>

&nbsp;

&nbsp;

Udemyとは、<strong>シリコンバレー発のオンライン学習プラットフォームサービス</strong>です。

なんらかの技能やスキルを持った個人個人がコースを開講して、彼らの作成したコンテンツを元に学習できると言うサービスです。

&nbsp;

<strong>世界中で17,000万人ののユーザーがいて、</strong><strong>講師の数も20000人以上、コース数も55,000以上のコースがある</strong><strong>世界規模のサービス</strong>となっているようです。

英語が苦手な方もいらっしゃると思いますが、日本語でのコンテンツも十分にあり、人気カテゴリであれば言語の問題を気にすることなく
学習できます。

&nbsp;

開講されているコースとしては、

<strong>ビジネスやITに関するコースが多く目につき、</strong><strong>プログラミング、webデザイン、マーケティングなどの</strong><strong>幅広い分野</strong>

でのコンテンツが充実しています。

<strong>今流行りの機械学習など最新技術のコンテンツ</strong>も多くあるようです。

&nbsp;

私も実際にいくつかコースをみて見ましたが、個人的に興味のあるイーサリアムでのアプリ開発の講座など割と<strong>他では見られない分野の講座も</strong><strong>あったりと広いカバー率にも感心しました。</strong>

&nbsp;

&nbsp;
<h2 class=""chapter"">UdemyでWebデザインのコースを取ってみた感想</h2>
&nbsp;

私は「未経験からプロのWebデザイナーになる！ 400レッスン以上の完全マスターコース」というコースを受講しました。

&nbsp;

動画はタイトルの通り、未経験からプロのwebデザイナーとあるようにPhotoshopの使い方から、webの設計、HTML/CSSのコーディングなどデザイナーに必要な要素を一つ一つ丁寧に解説しているという感じでした。

動画では、大事な部分を繰り返し伝えていたり、実習のための画像やpsdファイルなどの教材が用意されていたりして実際に自分でも作りながら勉強できて勉強のやりがいがありました。

&nbsp;

動画を見ながら

「へぇこういう使い方があるのか」

というのがいくつもあり、新鮮な気づきを持ちながら学習を進めていけました。

他にもいくつか印象に残っていた部分があるので以下にポイントを絞って書いていきます。

&nbsp;

&nbsp;
<h3 class=""section"">驚きのコスパ400レッスン以上コースが1200円</h3>
&nbsp;

セール中でしたので1200円でこのコースを購入できました。

正直このコンテンツ量で1200円は

<strong>かなりお得</strong>

です。
（定価は24,000円らしいです。。）

&nbsp;

どうやらUdemyでは<strong>定期的にセール</strong>をやっているらしく、定価が2万円以上の割と高価なコースもありますが、こちらのコースのように<strong>時期によって、</strong><strong>数千円で購入できてしまったり</strong>もできるようです。

セールについてはこちらにもう少し詳しく説明を載せています。
<a href=""https://ver-1-0.net/2017/11/29/udemy-sale/"">=&gt; Udemyの料金は高くない。勉強したいコースを購入するならセールで買うのが狙い目！！</a>

&nbsp;

&nbsp;
<h3 class=""section"">プロの操作や実際の作業の様子が見れる</h3>
&nbsp;

独学の時って、実際

<strong>プロの人がどういう手順で操作しているか</strong>

とかって気になりますよね。

実際に職場でやっていたりすると気にならないのですが、一人で勉強している場合知らず、知らずのうちに非効率な使い方をしていないか気になってしまいます。

Udemyなら動画で実際のウィンドウの配置だったり、細かい作業の順番を見ながら勉強できるので、少しずつ上のような不安が解消されいきます。

&nbsp;

&nbsp;
<h3 class=""section"">動画の視聴スピードを調整できる</h3>
&nbsp;

これは動画で学ぶ利点の一つですね。他の本での勉強とは違う部分の一つでもあります。

動画の<strong>視聴速度が調節できる</strong>ので、すでにわかっていることだったり、一度一通りのレッスンの流れを確認したいというときにすごく役立ってくれます。

最初の一周は通してみて、自分のわからないところだけピックアップして見たいという時ありますよね。

そんなときに、2倍速で動画を見れれば半分の時間で最初の一周を終わらせることができます。

&nbsp;
<h3 class=""section"">モバイルでも学習できる。</h3>
&nbsp;

Udemyでは、モバイルのアプリもあり、PCのアカウントとコースを共有できるので、PCで購入したコースをモバイルでダウンロードして通勤中に動画をみて勉強するということができます。

家でWiFiを使って携帯に動画をダウンロードしておいて、通勤中にそれを見るとしておけば余計な通信料もかかりません。

&nbsp;

&nbsp;
<h3 class=""section"">動画なので、集中力が持続する。記憶に残りやすい。</h3>
&nbsp;

&nbsp;

コース自体は、Photoshopの使い方やWebサイトを作成する際の注意点や進め方、HTML/CSSに関するものが丸っと入っている感じでしたが、

動画の長さも5分程度で、集中力を保ったまま、動画を見終えることができます。
先に書いた視聴スピードも調整つすれば2分ちょっとで動画を見終えることもできます。

<img src=""https://www13.a8.net/0.gif?a8mat=2TVGOQ+BH6WX6+3L4M+6MROH"" alt="""" width=""1"" height=""1"" border=""0"" />

&nbsp;
<h3 class=""section"">気になる分野の学習のスタートに最適</h3>
&nbsp;

ここまで、Udemyの説明や特徴の紹介、実際に受講してみた感想をお伝えしてきましたがUdemyを活用することができるとみなさんの気になる分野で幸先の良いスタートが切れると思っています。

&nbsp;

「デザインの勉強してみたいけど何から始めればいいかわからない・・・」

↓

「未経験からプロのWebデザイナーになる！ 400レッスン以上の完全マスターコース」を受講する。

↓

「パッケージになっているから必要な分野を体系立てて勉強できる！5分ごとの動画で構成されているから少しずつ自分のペースで続けられる。」

↓

「webデザイナーに必要な要素が網羅的にわかるので、その中で自分の興味ある分野を深めたりさらにステップアップするまでの下地が作れる」

&nbsp;

デザインに限らず、機械学習や語学、会計、ビジネス、マーケティングなど様々な分野のものが揃っているので、これから勉強を始めたいという方には良いサービスになっています。

「こいう知識欲しいなぁ」と日常的に悶々している方はぜひ<a href=""https://px.a8.net/svt/ejp?a8mat=2TVGOQ+BH6WX6+3L4M+BW8O2&amp;a8ejpredirect=https%3A%2F%2Fwww.udemy.com%2F"" target=""_blank"" rel=""nofollow noopener"">Udemy</a>
<img src=""https://www11.a8.net/0.gif?a8mat=2TVGOQ+BH6WX6+3L4M+BW8O2"" alt="""" width=""1"" height=""1"" border=""0"" />をのぞいてみると良いと思います。

&nbsp;

&nbsp;
<h2 class=""chapter"">まとめ - Udemyをおすすめしたい人 -</h2>
&nbsp;

ここまで、ざーっとUdemyの良い部分を紹介してきましたが、悪い部分は今のところあまり感じていません。

&nbsp;

強いていうと、Udemyはインストラクターに直接質問ができるそうですが、コースによっては<strong>質問しても返信が返ってこない</strong>などがあるようです。

そのコースで質問が返ってくるかは、コースを受講する前にコースのレビューを見たりすることで確認できます。

&nbsp;

最後にはなりますが、Udemyは自分できになる分野をどんどん勉強してスキルアップしていきたい人にはぜひオススメです。

<strong>すでに少し勉強した分野の理解度の確認</strong>や<strong>全く新しい分野の勉強</strong>のどちらにも使えるツールになっています。

「気になっているけどどうやって勉強すればいいかわからない・・」

「勉強したいことがあるけど近くに教えてくれる人がいない・・」

というような方は一度サイトを見て頂けると良いのではと思います。

&nbsp;

登録・購入はこちらのリンクから行えます。↓↓↓

&nbsp;

「未経験からプロのWebデザイナーになる！ 400レッスン以上の完全マスターコース」がきになる方はこちらから
<a href=""https://px.a8.net/svt/ejp?a8mat=2TVGOQ+BH6WX6+3L4M+BW8O2&a8ejpredirect=https%3A%2F%2Fwww.udemy.com%2Fweb-design-master%2F"" target=""_blank"" rel=""nofollow"">未経験からプロのWebデザイナーになる！ 400レッスン以上の完全マスターコース</a>
<img border=""0"" width=""1"" height=""1"" src=""https://www10.a8.net/0.gif?a8mat=2TVGOQ+BH6WX6+3L4M+BW8O2"" alt="""">

他のコースが気になる方はこちらからどうぞ。

<a href=""https://px.a8.net/svt/ejp?a8mat=2TVGOQ+BH6WX6+3L4M+68MF5"" target=""_blank"" rel=""nofollow noopener"">
<img src=""https://www29.a8.net/svt/bgt?aid=171109178694&amp;wid=004&amp;eno=01&amp;mid=s00000016735001048000&amp;mc=1"" alt="""" width=""300"" height=""250"" border=""0"" /></a>
<img src=""https://www17.a8.net/0.gif?a8mat=2TVGOQ+BH6WX6+3L4M+68MF5"" alt="""" width=""1"" height=""1"" border=""0"" />"
"272","2017-04-09 23:01:23","2018-08-26 12:13:15","Electron の勉強がてら電卓を作ってみた~その① - インストール編 -~","electron-calculator-1","http://ver-1-0.net/wp-content/uploads/2017/03/スクリーンショット-2017-03-23-13.10.10.png","engineering","&nbsp;

今回はWebの技術でデスクトップアプリが作れると噂のElectron
に関する記事です。

こんなツールないかなぁと思って、
探すしてダウンロードして使ってみたり
するのですが、
「イマイチイメージと違うな」
ということが常日頃からあり、
自分で作れたらなぁと思い前々から気になっているのが、
このElectronでした。

せっかく紹介するので、少しElectronについて調べてみました。

&nbsp;
[after_intro]
&nbsp;
<h2 class=""chapter"">Electronについて</h2>


開発元:ソースコード管理サービスでおなじみ<a href=""https://github.com/"">gitHub</a>
Runtime:Node.js , Chronium

これが基本情報。
情報不足感は否めませんが、
Slack,AtomなどもこのElectronで作られていて、
今熱い技術のようです。

&nbsp;

<a href=""https://electron.atom.io/"">https://electron.atom.io/</a>
これがelectronのサイトです。

<a href=""http://ver-1-0.net/wp-content/uploads/2017/03/スクリーンショット-2017-03-23-13.17.07.png""><img class=""alignnone size-large wp-image-273"" src=""http://ver-1-0.net/wp-content/uploads/2017/03/スクリーンショット-2017-03-23-13.17.07-1024x401.png"" alt="""" width=""700"" height=""274"" /></a>
引用元:https://electron.atom.io/

はい、英語です。

&nbsp;

何が書かれているかというと、

思ったより簡単。
Webサイトを作るのと同じ要領で、Desktopアプリも作れます。
Electronはそのためのフレームワークで、
JavaScript, HTML, CSSなどで実装できます。
しかもElectronがhard partsをうまいことしてくれるので
開発者はアプリケーション開発に集中できます。

&nbsp;

&nbsp;

と書いてあります。



と、まあ調査はこれくらいにして、
題にもあるようにまずはインストール。
OSはMacです。

手順は難しくなく、
①node.jsのインストール
②electronのインストール
でインストールは完了ですが、
今回は動作確認もHello Wordlまでは行きましょうか。

&nbsp;

&nbsp;
<h2 class=""chapter"">インストール ( For Mac )</h2>


それでは早速、インストールから、
この手順ではあとあと、
nodeのバージョンを変更できるように、
nvmもインスートールします。

&nbsp;
<h5>①nvmインストール</h5>
インストール
<pre><code class=""language-bash"">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash
</code></pre>
インストールできたらバージョン確認
<pre><code class=""language-bash"">$nvm --version
0.33.1
</code></pre>
&nbsp;
<h5>①Node.jsインストール</h5>
先ほどインストールしたnvmでnodeをインストール
<a href=""https://nodejs.org/ja/"">https://nodejs.org/ja/</a>
このサイトによると、現在の推奨バージョンが6.10.2だそうなので、
それをインストール
<pre><code class=""language-bash"">nvm install 6.10.2</code></pre>
&nbsp;
<h5>②Electronインストール</h5>
<pre><code class=""language-bash"">npm -g install electron-prebuilt</code></pre>
&nbsp;

npm はnode.jsパッケージ管理ツールですので、
それを使ってElelctronをインストールします。
これだけでElectronを起動できるので、

特に自分で作成したプロダクトをパッケージングする必要がないのであれば、
これだけでOK。

ですが、
このあと作ったアプリをパッケージしたいので、
そちらのツールもインストール。
<pre><code class=""language-bash"">npm -g install electron-packager</code></pre>
&nbsp;

&nbsp;
<h5>③HelloWorld!!</h5>
インストールも完了したので、
早速動かしてみましょう。
<pre><code class=""language-bash"">mkdir sample
npm init -y 
</code></pre>
これをすると下のようなpackage.jsonファイルが出来上がります。
デフォルトだと下記のようにindex.jsが起動時に
実行されるファイルになります。
<pre><code class=""language-json"">{
  ""name"": ""sample"",
  ""version"": ""1.0.0"",
  ""description"": """",
  ""main"": ""index.js"",
  ""scripts"": {
    ""test"": ""echo \""Error: no test specified\"" &amp;&amp; exit 1""
  },
  ""keywords"": [],
  ""author"": """",
  ""license"": ""ISC""
}
</code></pre>
まだ、index.jsがないので
作成しましょう。

index.jsはコチラを参考に作成
https://electron.atom.io/docs/tutorial/quick-start/
<pre><code class=""language-javascript"">const {app, BrowserWindow} = require('electron')
const path = require('path')
const url = require('url')

let win

function createWindow () {
  win = new BrowserWindow({width: 800, height: 600})


  win.loadURL(url.format({
    pathname: path.join(__dirname, 'index.html'),
    protocol: 'file:',
    slashes: true
  }))

  //　とりあえずデベロッパーツールはいらない、メニューからでも起動できるので
  //win.webContents.openDevTools()

  win.on('closed', () =&gt; {
    win = null
  })
}

app.on('ready', createWindow)


app.on('window-all-closed', () =&gt; {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () =&gt; {
  if (win === null) {
    createWindow()
  }
})

</code></pre>
一緒にindex.htmlも作成
<pre><code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=""UTF-8""&gt;
    &lt;title&gt;Hello World!&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Hello World!&lt;/h1&gt;
    We are using node &lt;script&gt;document.write(process.versions.node)&lt;/script&gt;,
    Chrome &lt;script&gt;document.write(process.versions.chrome)&lt;/script&gt;,
    and Electron &lt;script&gt;document.write(process.versions.electron)&lt;/script&gt;.
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
それでは、起動
<pre><code class=""bash"">electron . </code></pre>
<a href=""http://ver-1-0.net/wp-content/uploads/2017/04/スクリーンショット-2017-04-09-22.56.09.png""><img class=""alignnone size-medium wp-image-283"" src=""http://ver-1-0.net/wp-content/uploads/2017/04/スクリーンショット-2017-04-09-22.56.09-300x225.png"" alt=""Electron sample"" width=""300"" height=""225"" /></a>
<h3>無事起動できました！！</h3>
無事インストール＆動作確認済んだので次は
実際に電卓を作ります。
"
"292","2017-04-10 01:27:49","2018-08-26 12:10:42","Electron の勉強がてら電卓を作ってみた~その② - 実装編- ~","electron-calculator-2","http://ver-1-0.net/wp-content/uploads/2017/03/スクリーンショット-2017-03-23-13.10.10.png","engineering","&nbsp;

<a href=""https://ver-1-0.net/2017/04/09/electron-calculator-1/"">前回</a>
の記事では、
Electronのインストールまでやりました。


今回は実際にElectronで電卓を作って行きます。
今回肝となるのは、
<strong>IPC通信</strong>というものです。

&nbsp;

&nbsp;

Webの世界だと、
Httpを使って、サーバとクライアント間で通信を行うのですが、
ElectronはこのIPC通信というものでデータのやりとりを
行うようです。

&nbsp;

&nbsp;

なんか難しいことを
言っている気がするのですが、
百聞は一件にしかずで
実際にコードをみてみましょう。
[after_intro]
&nbsp;
&nbsp;
<h2 class=""chapter"">計算機の完成系</h2>


画面はこんな感じ
<a href=""http://ver-1-0.net/wp-content/uploads/2017/04/スクリーンショット-2017-04-10-1.26.51.png""><img class=""alignnone size-medium wp-image-311"" src=""http://ver-1-0.net/wp-content/uploads/2017/04/スクリーンショット-2017-04-10-1.26.51-257x300.png"" alt=""電卓"" width=""257"" height=""300"" /></a>

&nbsp;

&nbsp;

<h2 class=""chapter"">それでは実装</h2>

今回のディレクトリ構成は以下の通り
<a href=""http://ver-1-0.net/wp-content/uploads/2017/04/スクリーンショット-2017-04-10-0.24.25.png""><img class=""alignnone size-medium wp-image-293"" src=""http://ver-1-0.net/wp-content/uploads/2017/04/スクリーンショット-2017-04-10-0.24.25-298x300.png"" alt=""ディレクトリ構成"" width=""298"" height=""300"" /></a>
※今回はjqueryも使用しています。

&nbsp;

&nbsp;

起動ポイントであるmain.jsがメインプロセス、
app以下のファイルがそれぞれレンダラプロセスや画面表示の変更を行います。

&nbsp;

&nbsp;

まず、main.js
<pre><code class=""language-javascript"">'use strict';

var electron = require('electron');
var app = electron.app;
var BrowserWindow = electron.BrowserWindow;

var mainWindow = null;
var calc = require('./app/calculate.js');


app.on('window-all-closed', function() {
    if (process.platform != 'darwin')
    app.quit();
});

app.on('ready', function() {

    // bootChronium
    mainWindow = new BrowserWindow({width: 250, height: 310});
    mainWindow.setResizable(false);
    mainWindow.loadURL('file://' + __dirname + '/public/index.html');
    // mainWindow.openDevTools();
    mainWindow.on('closed', function() {
        mainWindow = null;
    });
});

const {ipcMain} = require('electron');


// IPC通信のレンダラープロセスからのリクエストに対してレスポンスを返す。
ipcMain.on('push-num-button', (event, arg) =&gt; {
    console.log(arg);
    if (arg.operand === 'ac' || arg.operand === 'reverse' ){
        //ACや +/- が押された場合
        arg.result = calc[arg.operand]();
    }else{
        if ( arg.operand === 'append'  ){
            // 数字が押された場合
            if ( !calc.is_append){
                calc.is_append = true;
                calc.sum = 0;
            }
            arg.result = calc.append(arg.input);
        }else if (arg.input == '.') {
            // 小数点が押された場合
            arg.result = calc.point();
        }else{
            // 数字以外が押された場合
            // (AllClear や +/- 以外)
            if ( Number(calc.sum) != 0
                 &amp;&amp; Number(calc.reserve) != 0
                 &amp;&amp; calc.operand != 'reverse'  ){
                //計算を実行
                calc[calc.operand](calc.sum);
            }

            arg.result = calc.sum;      //電卓のディスプレイに表示
            calc.operand = arg.operand; //演算子を保存
            calc.reserve = calc.sum;    //これまでの計算結果を保持
            if (calc.operand != 'equal' ){
                calc.reset();
            }

        }
    }
    console.log(calc);
    event.returnValue = arg;
});
</code></pre>
&nbsp;

&nbsp;

そして、こちらがメインプロセスにリクエストを送る
function.js
<pre><code class=""language-javascript"">'use strict';
var $ = require('jquery');
const {ipcRenderer} = require('electron')

//electron によりhtmlが描画されてから実行
$(document).ready(function(){
  $(""button"").on('click',function(){

    var num = $(this).html();
    var result = $('#result').val();
    var operand = $(this).attr('class').split(' ')[0];
    operand = operand === 'num' ? 'append' : operand;
    pushNumButton(num , result,operand);
  });

});

function pushNumButton(input , result ,operand ) {
  // json形式でリクエストを送信
  var data = { input: input , result: result , operand: operand};
  var response = ipcRenderer.sendSync('push-num-button', data);
  // レスポンス結果を元にディスプレイに変更。
  $('#result').val(response.result);
}
</code></pre>
&nbsp;

&nbsp;

&nbsp;

説明すると、
function.jsに
ボタンが押された時にイベントが発生すると
<strong>pushNumButton</strong>というfunctionが呼ばれます。

&nbsp;

そして、その<strong>pushNumButton</strong>がメインプロセスに
<strong>'push-num-button'</strong>というイベントを発生させ、
メインプロセス(<strong>main.js</strong>)の対応する関数が
そのリクエストに対してレスポンスを返すというような構造になっています。

処理の順番としては、
<pre>画面でボタンが押される(<strong>index.html</strong>)
-&gt; function.jsに書かれたclickイベントが発火しメインプロセスにリクエストを送る。
-&gt; main.jsに書かれたプログラムが<strong>'push-num-button'</strong>イベントをキャッチし、
そのリクエストに対してレスポンスを返す。</pre>
もっと具体的にすると。
<pre>1のボタンが押される
-&gt; 1という数字が押されたことをメインプロセスに送信
-&gt; メインプロセスに保持されたデータに1を加え、電卓に表示すべき数字を返す。
</pre>
というような流れになります。

この基本的な流れを抑えたらあとは、
試行錯誤を繰り返し電卓を作るのみです。
（丸投げw）

ソースはここに置いたので、
もしよければ試してみてください。
<a href=""https://github.com/version-1/calculator"">https://github.com/version-1/calculator</a>

cloneしてきて、
<pre><code class=""language-bash"">cd calculator
electron src
</code></pre>
で起動できます。
"
"1560","2017-12-08 18:46:56","2018-08-25 22:18:16","疲れ目・肩こりエンジニアの三種の神器。机上ラック、アイマスク、ブルーライトカットメガネ","engineer-three-items","https://ver-1-0.net/wp-content/uploads/2017/12/office-583841_1280.jpg","colum::::%e3%81%8a%e3%81%99%e3%81%99%e3%82%81%e8%a8%98%e4%ba%8b","<h2 class=""chapter"">エンジニアを悩ます疲れ目・肩こり</h2>
&nbsp;

エンジニアって本当にずっとPCと向き合ってますよね。エンジニアにとってはPCを使いこなす必要があり、翼くんのようにPCと友達になる必要があります。

&nbsp;

友達なんだから長いこと一緒にいないとダメですよね。そうはいっても、本当に集中して何時間もPC画面に向かいっぱなしだと本当に目が疲れて肩もこりますよね。私もちょっと忙しくなって残業したり、家でもプログラミングしたりしている途端に画面が目にしみるようになってきます。

エンジニアの方々でなくても、仕事では必ずPCを見るし、移動中はスマートフォンで記事を読んだり本を読んだり漫画を読んだり。

&nbsp;

ジョブスがiPhoneを発表して以来、インターネットに接続する機会も増えましたが、液晶ディスプレイをみている時間も急激に伸びました。仕事にも私生活にも欠かせないPCやスマートフォン、あと何十年働くと考えていても目は大切にしたいですよね。

今回はそんな<strong>デジタル社会で快適に暮らす</strong>ための疲れ目対策必需品を紹介させて頂きます。

&nbsp;
<h2 class=""chapter"">正しい姿勢で疲れ目緩和 | 机上ラック</h2>
&nbsp;

最初に紹介するのが<strong>机上ラック</strong>です。

&nbsp;

これがあると正しい姿勢が身につきますし、ラックの下にちょっとした物を置けるので机が綺麗になります。私も最近これを購入して自宅の机に導入したのですが、ラックの下にちょっとした小物を置けたりして机が綺麗になって本当に導入してみてよかったです。

机上ラックの一番のメリットは<strong>ディスプレイの位置が座って、背筋を伸ばした時にちょうど良い位置</strong>にくることです。

PCの位置が低いとつい屈むような姿勢になり、猫背になって姿勢が悪くなりがちです。そんな時に机上ラックがあると背筋を伸ばしたままPCにむかえます。

PCに向かう姿勢として15度程度下をむくのが良いそうなのですが、ラックがあればPCの高さを保てるのでこの姿勢が取りやすいです。

&nbsp;

私としては今の所下に貼った物で満足しています。タイトルに高さ調節可能と書いてありますが、基本的には高くすることができるのみで、低くしたりすることはできません。もっとちゃんと自分にあった高さにしたいというのであれば、<strong>モニターアーム</strong>を購入された方が良いかもしれません。

&nbsp;
<div class=""cstmreba"">
<div class=""kaerebalink-box"">
<div class=""kaerebalink-image""><a href=""http://www.amazon.co.jp/exec/obidos/ASIN/B01M9I0XX6/llg01-22/"" target=""_blank"" rel=""noopener""><img style=""border: none;"" src=""https://images-fe.ssl-images-amazon.com/images/I/515N6dQtK9L._SL160_.jpg"" /></a></div>
<div class=""kaerebalink-info"">
<div class=""kaerebalink-name"">

<a href=""http://www.amazon.co.jp/exec/obidos/ASIN/B01M9I0XX6/llg01-22/"" target=""_blank"" rel=""noopener"">Fitueyes 机上台 モニター台 キーボード収納 幅600mm 高さ調整可能な 透明な DT106006GC</a>
<div class=""kaerebalink-powered-date"">posted with <a href=""http://kaereba.com"" target=""_blank"" rel=""nofollow noopener"">カエレバ</a></div>
</div>
<div class=""kaerebalink-detail"">Fitueyes</div>
<div class=""kaerebalink-link1"">
<div class=""shoplinkamazon""><a href=""http://www.amazon.co.jp/gp/search?keywords=Fitueyes%20%E6%9C%BA%E4%B8%8A%E5%8F%B0%20%E3%83%A2%E3%83%8B%E3%82%BF%E3%83%BC%E5%8F%B0%20%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E5%8F%8E%E7%B4%8D%20%E5%B9%85600mm%20%E9%AB%98%E3%81%95%E8%AA%BF%E6%95%B4%E5%8F%AF%E8%83%BD%E3%81%AA%20%E9%80%8F%E6%98%8E%E3%81%AA%20DT106006GC&amp;__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;tag=llg01-22"" target=""_blank"" rel=""noopener"">Amazon</a></div>
<div class=""shoplinkrakuten""><a href=""https://hb.afl.rakuten.co.jp/hgc/163854b7.d97e8d5b.163854b8.3c41ae34/?pc=http%3A%2F%2Fsearch.rakuten.co.jp%2Fsearch%2Fmall%2FFitueyes%2520%25E6%259C%25BA%25E4%25B8%258A%25E5%258F%25B0%2520%25E3%2583%25A2%25E3%2583%258B%25E3%2582%25BF%25E3%2583%25BC%25E5%258F%25B0%2520%25E3%2582%25AD%25E3%2583%25BC%25E3%2583%259C%25E3%2583%25BC%25E3%2583%2589%25E5%258F%258E%25E7%25B4%258D%2520%25E5%25B9%2585600mm%2520%25E9%25AB%2598%25E3%2581%2595%25E8%25AA%25BF%25E6%2595%25B4%25E5%258F%25AF%25E8%2583%25BD%25E3%2581%25AA%2520%25E9%2580%258F%25E6%2598%258E%25E3%2581%25AA%2520DT106006GC%2F-%2Ff.1-p.1-s.1-sf.0-st.A-v.2%3Fx%3D0%26scid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2F"" target=""_blank"" rel=""noopener"">楽天市場</a></div>
<div class=""shoplinkseven""><a href=""https://px.a8.net/svt/ejp?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2&amp;a8ejpredirect=http%3A%2F%2F7af-ent.omni7.jp%2Frelay%2Faffiliate%2FentranceProcess.do%3Furl%3Dhttp%253A%252F%252F7net.omni7.jp%252Fsearch%252F%253Fkeyword%253DFitueyes%252520%2525E6%25259C%2525BA%2525E4%2525B8%25258A%2525E5%25258F%2525B0%252520%2525E3%252583%2525A2%2525E3%252583%25258B%2525E3%252582%2525BF%2525E3%252583%2525BC%2525E5%25258F%2525B0%252520%2525E3%252582%2525AD%2525E3%252583%2525BC%2525E3%252583%25259C%2525E3%252583%2525BC%2525E3%252583%252589%2525E5%25258F%25258E%2525E7%2525B4%25258D%252520%2525E5%2525B9%252585600mm%252520%2525E9%2525AB%252598%2525E3%252581%252595%2525E8%2525AA%2525BF%2525E6%252595%2525B4%2525E5%25258F%2525AF%2525E8%252583%2525BD%2525E3%252581%2525AA%252520%2525E9%252580%25258F%2525E6%252598%25258E%2525E3%252581%2525AA%252520DT106006GC%2526searchKeywordFlg%253D1"" target=""_blank"" rel=""noopener"">7net</a><img src=""https://www17.a8.net/0.gif?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2"" alt="""" width=""1"" height=""1"" border=""0"" /></div>
</div>
</div>
<div class=""booklink-footer""></div>
<div></div>
</div>
</div>
<div class=""cstmreba"">
<div class=""kaerebalink-box"">
<div class=""kaerebalink-image""><a href=""http://www.amazon.co.jp/exec/obidos/ASIN/B01L76YRO0/llg01-22/"" target=""_blank"" rel=""noopener""><img style=""border: none;"" src=""https://images-fe.ssl-images-amazon.com/images/I/41G%2B4NPb91L._SL160_.jpg"" /></a></div>
<div class=""kaerebalink-info"">
<div class=""kaerebalink-name"">

<a href=""http://www.amazon.co.jp/exec/obidos/ASIN/B01L76YRO0/llg01-22/"" target=""_blank"" rel=""noopener"">BESTEK PC モニター アーム 液晶ディスプレイ アーム クランプ式 水平多関節 17-27インチ対応 BTSS01BK</a>
<div class=""kaerebalink-powered-date"">posted with <a href=""http://kaereba.com"" target=""_blank"" rel=""nofollow noopener"">カエレバ</a></div>
</div>
<div class=""kaerebalink-detail"">BESTEK</div>
<div class=""kaerebalink-link1"">
<div class=""shoplinkamazon""><a href=""http://www.amazon.co.jp/gp/search?keywords=BESTEK%20PC%20%E3%83%A2%E3%83%8B%E3%82%BF%E3%83%BC%20%E3%82%A2%E3%83%BC%E3%83%A0&amp;__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;tag=llg01-22"" target=""_blank"" rel=""noopener"">Amazon</a></div>
<div class=""shoplinkrakuten""><a href=""https://hb.afl.rakuten.co.jp/hgc/163854b7.d97e8d5b.163854b8.3c41ae34/?pc=http%3A%2F%2Fsearch.rakuten.co.jp%2Fsearch%2Fmall%2FBESTEK%2520PC%2520%25E3%2583%25A2%25E3%2583%258B%25E3%2582%25BF%25E3%2583%25BC%2520%25E3%2582%25A2%25E3%2583%25BC%25E3%2583%25A0%2F-%2Ff.1-p.1-s.1-sf.0-st.A-v.2%3Fx%3D0%26scid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2F"" target=""_blank"" rel=""noopener"">楽天市場</a></div>
<div class=""shoplinkseven""><a href=""https://px.a8.net/svt/ejp?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2&amp;a8ejpredirect=http%3A%2F%2F7af-ent.omni7.jp%2Frelay%2Faffiliate%2FentranceProcess.do%3Furl%3Dhttp%253A%252F%252F7net.omni7.jp%252Fsearch%252F%253Fkeyword%253DBESTEK%252520PC%252520%2525E3%252583%2525A2%2525E3%252583%25258B%2525E3%252582%2525BF%2525E3%252583%2525BC%252520%2525E3%252582%2525A2%2525E3%252583%2525BC%2525E3%252583%2525A0%2526searchKeywordFlg%253D1"" target=""_blank"" rel=""noopener"">7net</a><img src=""https://www17.a8.net/0.gif?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2"" alt="""" width=""1"" height=""1"" border=""0"" /></div>
</div>
</div>
<div class=""booklink-footer""></div>
</div>
</div>
<h2 class=""chapter"">疲れ目対策定番 | ブルーライトカットメガネ</h2>
&nbsp;

お次は、<strong>ブルーライトカットメガネ</strong>です。ブルーライトカットのメガネはエンジニア業というか社会人になってからずっと使っています。寝ているからブルーライトを浴びてるかというような生活をしているので、これは今や私の生活必需品となっています。

&nbsp;

PC作業を行なっていると当たり前ですが、目を酷使します。ただ、PCを使わないという選択をすることもできないので、少しでも目の負担を和らげられるように、PCを使うときは常にこのメガネを使用するようにしています。

普通のメガネを使っている、視力は悪くないのでメガネはしていないという方はぜひ目を大切にしてブルーライトカットメガネを使って欲しいです。

&nbsp;

ブルーライトカットメガネの有名どころですと<strong>JINsPC</strong>が有名でしたが、今は新たにデザインされた<strong>JINsScreen</strong>というモデルがあるそうです。

今更ですが、本当に便利になりましたよね。JINsにはオンラインショップがあって<strong>今やメガネもオンラインで購入できてしまうようです。</strong>

&nbsp;

「度付きのメガネでも変えるの？」という疑問もあると思いますが、度付きの購入方法にはいくつか方法があり
<ul>
 	<li>過去にJINSで購入したメガネの保証書を知らせる</li>
 	<li>使っているメガネを郵送して同じ度数で作ってもらう</li>
 	<li>眼科やJINSの店舗で度数情報を作る</li>
</ul>
となるようです。
詳細は下記バナーから進んでいただけるとご覧になれるかと思います。

お値段も5000円からあるそうで、最近本当にメガネ安くなりましたね。ちょっと前は二万円とかかかっていたような。。

&nbsp;

<strong>「ブルーライトカットってあの色付きメガネでしょ・・・」</strong>

ときになる点はあるのかもしれませんが、JinsScreenでは<strong>従来のものよりより自然に肌に馴染むような色に改善</strong>されており、効果そのままで見た目が気にならない工夫もされているようです。

興味のある方はバナーからサイトに進んで見てみてください。

<a href=""https://px.a8.net/svt/ejp?a8mat=2TXJTR+AINRU2+1X1K+7LPE9"" target=""_blank"" rel=""nofollow noopener"">
<img src=""https://www25.a8.net/svt/bgt?aid=171206559636&amp;wid=004&amp;eno=01&amp;mid=s00000008948001277000&amp;mc=1"" alt="""" width=""300"" height=""250"" border=""0"" /></a>
<img src=""https://www13.a8.net/0.gif?a8mat=2TXJTR+AINRU2+1X1K+7LPE9"" alt="""" width=""1"" height=""1"" border=""0"" />

&nbsp;
<h2 class=""chapter"">5分でリラックス | ホットアイマスク</h2>
&nbsp;

最後にオススメするのはホットアイマスクです。
<div class=""cstmreba"">
<div class=""kaerebalink-box"">
<div class=""kaerebalink-image""><a href=""http://www.amazon.co.jp/exec/obidos/ASIN/B001OGJVAO/llg01-22/"" target=""_blank"" rel=""noopener""><img style=""border: none;"" src=""https://images-fe.ssl-images-amazon.com/images/I/61P6OPUtnEL._SL160_.jpg"" /></a></div>
<div class=""kaerebalink-info"">
<div class=""kaerebalink-name"">

<a href=""http://www.amazon.co.jp/exec/obidos/ASIN/B001OGJVAO/llg01-22/"" target=""_blank"" rel=""noopener"">あずきのチカラ目もと用</a>
<div class=""kaerebalink-powered-date"">posted with <a href=""http://kaereba.com"" target=""_blank"" rel=""nofollow noopener"">カエレバ</a></div>
</div>
<div class=""kaerebalink-detail"">桐灰化学</div>
<div class=""kaerebalink-link1"">
<div class=""shoplinkamazon""><a href=""http://www.amazon.co.jp/gp/search?keywords=%E3%81%82%E3%81%9A%E3%81%8D&amp;__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;tag=llg01-22"" target=""_blank"" rel=""noopener"">Amazon</a></div>
<div class=""shoplinkrakuten""><a href=""https://hb.afl.rakuten.co.jp/hgc/163854b7.d97e8d5b.163854b8.3c41ae34/?pc=http%3A%2F%2Fsearch.rakuten.co.jp%2Fsearch%2Fmall%2F%25E3%2581%2582%25E3%2581%259A%25E3%2581%258D%2F-%2Ff.1-p.1-s.1-sf.0-st.A-v.2%3Fx%3D0%26scid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2F"" target=""_blank"" rel=""noopener"">楽天市場</a></div>
<div class=""shoplinkseven""><a href=""https://px.a8.net/svt/ejp?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2&amp;a8ejpredirect=http%3A%2F%2F7af-ent.omni7.jp%2Frelay%2Faffiliate%2FentranceProcess.do%3Furl%3Dhttp%253A%252F%252F7net.omni7.jp%252Fsearch%252F%253Fkeyword%253D%2525E3%252581%252582%2525E3%252581%25259A%2525E3%252581%25258D%2526searchKeywordFlg%253D1"" target=""_blank"" rel=""noopener"">7net</a><img src=""https://www17.a8.net/0.gif?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2"" alt="""" width=""1"" height=""1"" border=""0"" /></div>
</div>
</div>
<div class=""booklink-footer""></div>
</div>
</div>
長時間PCをしていると本当に画面が目に沁みてきます。そんな時にはよくこのあずきのチカラの助けを借りています。

<strong>使い方は簡単で、アイマスクごと電子レンジで40秒ほど温めて目の上に乗せて5分程度ぼーっとするだけです。</strong>

電子レンジでチンするとあずきが予想以上にあったまって、疲れた目元を心地よくあっためてくれます。

&nbsp;

こちらは<strong>繰り返し250回ほど</strong>使えるそうなので、結構長持ちです。作業合間合間の時間に使って目がポカポカになると次の作業への気持ちも前向きになります。

&nbsp;

&nbsp;
<h2 class=""chapter"">まとめ | 定期的な休憩も忘れずに</h2>
&nbsp;

ここまで、エンジニアの疲れ目・肩こり対策の三種の神器を紹介させていただきました。

少しでも目の疲れや肩こりが軽減される物を紹介しましたが、なんだかんだ一番休息が大事です。あまり無理せず定期的に休憩をとり、働きすぎず長期的に活躍できるというのが一番大事なことかと思います。

目標や期限のために必死に頑張ることは良いことだとは思うのですが、休息も生産性をあげるための一つのツールして使えると良いですね。適度の休憩をとりつつももっと快適に仕事したいという時に今回紹介した商品などが役に立てると嬉しいです。

では。"
"881","2017-10-18 23:58:07","2017-12-22 22:44:11","私的お気に入り名言集をあげてみたら未来予測系が多かった","expect-meigen","http://ver-1-0.net/wp-content/uploads/2017/10/320cce7780627c8fd4f6f1b499dfff87_s.jpg","colum","&nbsp;

特に意味はないのですが、
備忘も兼ねて自分の好きな名言集をまとめておきます。

[adsense_double_rect]

&nbsp;

&nbsp;
<h2 class=""chapter"">「Be Water, My Friend!」- ブルースリー</h2>
&nbsp;

水のように生きよ！という意味ですが、
<strong>Be Water, My Friend!</strong>という言葉自体は下のようなインタビューの
中の一部のようです。
<blockquote>Empty your mind, be formless, shapeless - like water.
Now you put water into a cup, it becomes the cup,
you put water into a bottle, it becomes the bottle,
you put it in a teapot, it becomes the teapot.
Now water can flow or it can crash.
Be water, my friend.</blockquote>
要約すると、
<strong>水は形がなく、カップやボトルのように器に合わせて変化することができる。</strong>
<strong> さらに、水は流れることも砕くこともできる。</strong>
となるのですが、
水のような柔軟性と力強さを持てというメッセージだと
私は解釈しています。

世間に流されない力強さを持ちつつ、
変化にも対応していける柔軟な人でいたいななんて思う今日この頃です。

&nbsp;

&nbsp;
<h2 class=""chapter"">未来を予測する最善の方法は、自らそれを創りだすことである-アラン・ケイ</h2>
&nbsp;

&nbsp;

アラン・ケイは<strong>「パソコンの父」</strong>と称されるアメリカの計算機科学者です。
個人の活動を支援する<strong>「パーソナルコンピュータ」</strong>という概念を提唱した人物で、
高価で大きく、複数人で“共有”するのが当たり前だったコンピュータに、“個人向け”という利用状況を想定したこと、
オブジェクト指向プログラミングとユーザインタフェース設計に関する、
初期の功績で知られています。

未来を完全に予測することはできないと思いますが、
近い将来例えば1時間後とか、3時間後とか明日とか1週間後とか、1年後は
自分の行動で変えられると信じています。
[adsense]

&nbsp;
<h2 class=""chapter"">「素晴らしい選手ほど
パックがこれからどこにいくかに
焦点を合わせているものなんだ」- ウェイン・グレツキー</h2>
&nbsp;

&nbsp;

ウェイン・グレツキーは、
カナダ・オンタリオ州出身の元プロアイスホッケー選手です。
「アイスホッケーの神様」などと呼ばれて多くのホッケーファンに愛された
プレイヤーのです。
<blockquote>普通の選手は
パックが今ある場所に、
意識を集中している。

だけど、素晴らしい選手ほど
パックがこれからどこにいくかに
焦点を合わせているものなんだ。</blockquote>
&nbsp;

次はどこにパックが行くんでしょうかね？
この言葉を胸に次のチャンスがどこに転がっているか探し続けたいですね。

&nbsp;

&nbsp;

&nbsp;
<h2 class=""chapter"">明日はなんとかなると思うのは馬鹿者だ。今日でさえ遅すぎる。
賢者は昨日のうちに済ませてしまっている。- クーリー</h2>
&nbsp;

&nbsp;

おー怖。こんな上司いたらほんと会社行きたくなくなりそう笑。
すごい厳しいお言葉ですが、
ど正論で返す言葉もないです。

&nbsp;

チャールズ・クーリーはアメリカの社会心理学者。
アメリカ社会学協会創立メンバーの一人と。
「鏡に映る自我」の概念で知られているそうです。

これを仕事に当てはめると、
自分の中では
Someone:「これやっといてねお願い!」
私:「もう済ませました」
が理想形ですね。

こういう感じで、
常に必要な作業を把握して作業を進めて行きたいです。

基本、
今成功している人たちは既に済ませてしまっている賢者
なんでしょうね。。

自分のやりたいこと・やるべきことは先送りにせずガンガン
やって行きたいと改めて思います。

&nbsp;

&nbsp;
<h2 class=""chapter"">まとめ</h2>
&nbsp;

好きな名言をまとめたら、
未来予測系が多いですね。
ブルース・リーの名言以外は全部未来予測に関するものですね。

未来に囚われすぎるのも今をないがしろにしてしまう
リスクもあるので、
絶対良いことではないですが、
仕事する上では欠かせない要素ですよね。
あとは単純に未来を夢想するのが好きなのかもしれません。

&nbsp;

なんとなくまとめてみたら新鮮な気づきが得られました。
みなさんも好きな名言を書き出してみたら何か
良い発見があるかもしれませんね。

では。

以上です。

&nbsp;

[adsense_double_rect]"
"511","2017-07-10 00:06:59","2018-08-26 11:51:03","データベースマイグレーションにFlyway使ってみた","flyway-migration","http://ver-1-0.net/wp-content/uploads/2017/01/5ntkpxqt54y-sai-kiran-anagani.jpg","engineering","&nbsp;

&nbsp;

こんばんは
最近目を酷使しがちな<a href=""https://twitter.com/version1_2017?lang=ja"">@verion1</a>です。

&nbsp;

&nbsp;

さて、
最近セコセコと
自分で考えたwebサイトを
開発しているのですが、
<h3>「開発をしているとやっぱDBの変更もヴァージョン管理できるといいよね。」</h3>
と思い、
マイグレーションツールを導入しました。

&nbsp;

[after_intro]

&nbsp;

その名も<strong>Flyway</strong>です。
使っている人も多いのか少ないのか
よくわからないのですが、
kotlinで開発していてjava系のマイグレーションツールを
探していたので、
使ってみることにしました。

&nbsp;

&nbsp;

サイトをみると
コマンドラインのツールもあるみたいなのですが、
公開サーバにいちいちインストールするのも
怠いので、
gradleで全部やってしまいます。

&nbsp;

gradleなら
①依存性にFlywayを追加
②build.gradleごとgitにコミット
③サーバにデプロイしたら、 gradlewを使ってFlywayタスクを実行。

のような感じでスムーズにできるので

&nbsp;
<h2 class=""chapter"">Flywayを使ってみる　| 依存性の追加</h2>
&nbsp;

それでは、
依存性追加
<pre><code class=""language-groovy"">
buildscript {
    ext.springBootVersion = '1.5.1.RELEASE'
    ext.kotlin_version = '1.1.1'

    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath ""org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version""
        classpath ""org.flywaydb:flyway-gradle-plugin:3.0""
    }
}

apply plugin: 'kotlin'
apply plugin: 'flyway'


flyway{
    url = 'jdbc:mysql://localhost/hoge'
    user = 'sample'
    password = 'password'
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile ""org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version""
    compile 'mysql:mysql-connector-java:5.1.6'
}

</code></pre>
ここでは、
build.gradleに接続情報を持たせてしまっています。

&nbsp;

[mid_article]

&nbsp;

サイトをみると
コマンドラインで引数に渡す方法もあるみたいです。
ファイルにパスワードとか平文で書くのに抵抗ある方は
こっちの方が良いかと思います。

&nbsp;

さてこれで準備はできましたが、
マイグレーションするファイルがないのでは意味ないので
次は、マイグレーションファイルの準備です。

&nbsp;

&nbsp;
<h2 class=""chapter"">Flywayを使ってみる　| マイグレーションファイルの配置</h2>
&nbsp;

マイグレーションファイルはクラスパス上に
<h4>db/migration</h4>
と言うディレクトリを切って、
ファイルを配置します。

ファイルの命名規則は
<h3>V[バージョン番号]__[任意のファイル名].sql</h3>
です。

&nbsp;

例えば、
V1__create_hoge_table.sql
V1.1__add_column_to_hoge_table.sql
V1.2__alter_column_to_hoge_table.sql
V2__create_foo_table.sql
・
・
のような形です。

&nbsp;

&nbsp;

バージョン番号は以下のようなコマンドで確認できます。
State が実行のステータスを表し
「Pending」　・・・実行前
「Success」・・・成功
「Failed」・・・失敗

&nbsp;
<pre><code class=""language-bash"">$gradle flywayInfo
:compileKotlin
Using kotlin incremental compilation
w: The '-d' option with a directory destination is ignored because '-module' is specified
:compileJava NO-SOURCE
:copyMainKotlinClasses UP-TO-DATE
:processResources UP-TO-DATE
:classes UP-TO-DATE
:compileTestKotlin NO-SOURCE
:compileTestJava NO-SOURCE
:copyTestKotlinClasses UP-TO-DATE
:processTestResources NO-SOURCE
:testClasses UP-TO-DATE
:flywayInfo
+----------------+----------------------------+---------------------+---------+
| Version        | Description                | Installed on        | State   |
+----------------+----------------------------+---------------------+---------+
| 1              | create hoge table          | 2017-07-09 21:24:35 | Success |
| 1.1            | create companies           | 2017-07-09 21:24:35 | Success |
| 1.2            | Insert data into companies | 2017-07-09 21:24:36 | Success |
+----------------+----------------------------+---------------------+---------+

BUILD SUCCESSFUL


</code></pre>
ここまでで、準備は完了です。

次は実際に実行していきます。

&nbsp;

&nbsp;
<h2 class=""chapter"">Flywayを使ってみる　| マイグレーション実行</h2>
&nbsp;

&nbsp;

&nbsp;

いよいよ実行です。
コマンドはこちら
<pre><code class=""bash"">gradle flywayMigrate</code></pre>
このコマンドで、
db/migrate配下にあるSQLファイルがバージョン
の若い方から順番に
実行されていきます。

エラーが表示されず。
「BUILD SUCCCESSFUL」となれば成功です。

&nbsp;

&nbsp;

もし、失敗した場合は、
sqlファイルを直したりする必要があるのですが、
ファイルを直してから、
gradle flywayMigrationをしても
エラーになってしまいます。

Flywayの流儀として、
一度マイグレーションが失敗をしたら
<pre><code class=""bash"">gradle flywayRepair</code></pre>
でマイグレーションの実行状態を
リペアしてあげないといけません。

なので、
マイグレーションが失敗したら、
このコマンドは忘れないように実行するようにしてください。

&nbsp;

&nbsp;
<h2 class=""chapter"">Flywayを使ってみる　| まとめ</h2>
&nbsp;

&nbsp;

そもそもFlywayの導入は、
DBの状態もヴァージョン管理できるといいよね。
と言う目的で始めました。

&nbsp;

&nbsp;

なので、
一般的には先の手順で使用したようなsqlはgitにコミットして
おき、デプロイで使ったり他のサーバで環境を
作る際に利用します。

&nbsp;

&nbsp;

マイグレーションファイルは作成して、
問題ないことが確認できたら忘れずにコミットするように
習慣づけておきましょう。

もっと興味がある方は他のコマンドなども
調べてみると良いかと思います。

&nbsp;

&nbsp;

私があとよく使うのは
gradle flywayCleanくらいですかね。

これをするとdatabaseの全テーブルが綺麗になるので
利用には注意が必要ですが
アプリケーション開発の初期段階では、
頻繁にdbの構造を帰るのでまあまこれをやります。

今回は
基本的なところを
まとめましたが、
これ以上はおいおい知っていけば良いかなと。

では！！
"
"2393","2018-12-03 10:20:03","2018-12-03 10:20:03","フリーランスエンジニアが初めに選ぶオススメのフリーランスエージェント3選。","freelance-agent-select","https://ver-1-0.net/wp-content/uploads/2018/12/freelance-begineer.jpg","freelance","&nbsp;

フリーランスになる時の手っ取り早い方法がエージェントに案件を紹介してもらい、案件に参画することですが、

<strong>「エージェントってどこが良いの？」</strong>

<strong>「それぞれどんな所に違いがあるの？」</strong>

という疑問があると思うので、自分なりにここらへんが良いのではというエージェントをいくつか選びました。

<strong>「エージェントをつかうメリット・デメリットは？」</strong>

<strong>「そもそもフリーランスって良いの？」</strong>

みたいなところは、一旦置いておいて（下の方でそれぞれ書いています）オススメのエージェントを紹介します。

&nbsp;
<h2>おすすめエージェント3選</h2>
&nbsp;

はじめて会った人などにフリーランスです。と自己紹介をすると「どうやって仕事みつけてるんですか？」と聞かれることが多いのですが、答えはまあ色々です。フリーランスなりたての頃はエージェントを使って常駐の案件紹介してもらいましたし、他にも知り合い、Twitter、ブログなどさまざまです。

<a href=""https://ver-1-0.net/2018/11/26/how-to-be-enginner/"" data-blogcard=""1"">フリーランスエンジニアなるには？ソフトランディング戦略でいってみよう</a>

さらに「結局どうやって仕事見つけるのがいいんですかね？」という質問がありますがフリーランスなりたての人にはエージェントを使って案件獲得するのをオススメしています。理由は後ほど紹介しますが、私のオススメエージェントはこちらです。

&nbsp;
<h3>レバテックフリーランス</h3>
<img class=""alignnone size-full wp-image-2410"" src=""https://ver-1-0.net/wp-content/uploads/2018/12/levatech.jpg"" alt=""レバテックフリーランス"" width=""674"" height=""409"" />

引用元: <a href=""https://px.a8.net/svt/ejp?a8mat=2ZAXFD+FJ244Q+2JK4+1THW9E"" target=""_blank"" rel=""nofollow noopener"">レバテックフリーランス</a>
<img src=""https://www17.a8.net/0.gif?a8mat=2ZAXFD+FJ244Q+2JK4+1THW9E"" alt="""" width=""1"" height=""1"" border=""0"" />

個人的には<strong>一番有名だと思われるエージェント</strong>さんです。有名なだけあって<strong>求人数も豊富ですし、企業へのヒアリングを通して「どんな企業がどんな人材を求めているか」を理解し高いマッチング制度を誇っている</strong>そうです。

実際に企業と面談を行う前には、個別にエージェントの面談も用意されていてこちらの今の状況や希望の案件などを伝えることができます。私自身こちらの転職サービスを過去に利用したことがあるのですが、チャットでやりとりができたり面談先の企業をスプレッドシートで管理していたりと迅速にやりとりができる工夫をされていて、気軽に情報交換ができます。

他にも支払いが月末締めで翌月15日払いという支払いサイトの短さは地味に嬉しいです。エージェントの中には支払いが翌々月になってしまうところもあるので、支払いまでの速さは地味に嬉しいです。

レバテックフリーランスのサイトから案件や参画時の単価などを見ることもできるので、一度ご覧になってみると良いと思います。

<a href=""https://px.a8.net/svt/ejp?a8mat=2ZAXFD+FJ244Q+2JK4+1TMTQA"" target=""_blank"" rel=""nofollow noopener"">フリーエンジニアの案件探しは、レバテックフリーランス</a>
<img src=""https://www19.a8.net/0.gif?a8mat=2ZAXFD+FJ244Q+2JK4+1TMTQA"" alt="""" width=""1"" height=""1"" border=""0"" />
<h3>ITプロパートナーズ</h3>
<a href=""https://itpropartners.com/"">
<img class=""alignnone size-full wp-image-2400"" src=""https://ver-1-0.net/wp-content/uploads/2018/12/itpro.jpg"" alt=""ITプロパートナーズ"" width=""677"" height=""404"" />
</a>

（引用元: <a href=""https://itpropartners.com/"">https://itpropartners.com/</a> )

お次はITプロパートナーズです。<strong>こちらは週2,3日などフルタイムでないフリーランスの案件紹介を強み</strong>としているエージェントさんです。

こちらのエージェントさん自体私も利用したことがあるのですが、<strong>スタートアップで勢いのある企業さんの紹介が多く</strong>エンジニアとして、フロントだけとかサーバだけなど分野を決めつけないで割と幅広くフルスタックな形でやりたいという方にはオススメなのかなと思います。

また、週2,3日のように稼働を限った形の案件も紹介していただけるのでサービスを作りながら、生活資金を稼ぎたいみたいな方にはオススメです。（ただ、ある程度のスキルがないと週2,3日などの希望は通りづらいのでそこはご了承ください。。）

&nbsp;

<a href=""https://itpropartners.com/"">こちら</a>から無料登録できて、飛び先にどういった思いで事業を立ち上げたかなどの記事もあるのでご覧になると良いと思います。

&nbsp;

&nbsp;
<h3>ポテパンフリーランス</h3>
<img class=""alignnone size-full wp-image-2404"" src=""https://ver-1-0.net/wp-content/uploads/2018/12/potepan.jpg"" alt=""ポテパンフリーランス"" width=""678"" height=""270"" />
引用元:<a href=""https://px.a8.net/svt/ejp?a8mat=2ZU6N8+37I6GA+3UES+BW8O2&amp;a8ejpredirect=https%3A%2F%2Ffreelance.potepan.com%2F"" target=""_blank"" rel=""nofollow noopener"">https://freelance.potepan.com/</a>
<img src=""https://www12.a8.net/0.gif?a8mat=2ZU6N8+37I6GA+3UES+BW8O2"" alt="""" width=""1"" height=""1"" border=""0"" />

ポテパンフリーランスは、他のエージェントと同様エンド直での高単価な案件の紹介が強みです。また、ポテパンは、<strong>ポテパンキャンプというプログラミングスクールも運営していて技術や業界に詳しいコンサルタントにサポートしてもらうことができます。</strong>

少しサイトを見てみると<strong>案件獲得までには早ければ1〜3日、平均的に2週間以内には複数案件から選べる状況になっています。</strong>というようなことなので気になる方はぜひ登録してみると良いかと思います。

<a href=""https://px.a8.net/svt/ejp?a8mat=2ZU6N8+37I6GA+3UES+5YRHE"" target=""_blank"" rel=""nofollow noopener"">高単価案件が最短二日で決まる！【ポテパンフリーランス】</a>
<img src=""https://www16.a8.net/0.gif?a8mat=2ZU6N8+37I6GA+3UES+5YRHE"" alt="""" width=""1"" height=""1"" border=""0"" />
<h2> エージェントを利用するメリット・デメリット</h2>
&nbsp;

タイトルの都合上先にオススメのエージェントさんを紹介させて頂きましたが、ここからはエージェントを利用するメリット・デメリットを書かせて頂ければと思います。

&nbsp;
<h3>エージェントを利用するメリット</h3>
&nbsp;
<h4>不慣れな契約や案件探しをサポートしてもらえる</h4>
&nbsp;

ここは散々言われている部分ではあると思いますが、フリーランスなりたてのころは<strong>相場観がわからなかったり案件の進め方がわからなかったりするので業界経験の長いコンサルタントに色々と聞いてフリーランスについての知識を深めることができます。</strong>（需要の多いプログラミング言語や現場のレベル感など）

また、多くの方がこれまでエンジニアとしての社会人経験がメインの人が多いと思いますので契約の仕方などに不慣れな人が多いと思います。エージェントを使うと契約書の作成や現場との調整をお願いできるのでエンジニアとしての自分の作業に集中することができます。

エージェントの方とは定期的に連絡をとることになるので今の現場の状況やこうしたいというのを伝えておくと、契約の切れ目などに「次どうしますか？」「ここの現場である程度経験をつめたので次の現場ではもうちょっと単価よくなりますよ。」などのアドバイスをもらえたりします。

&nbsp;
<h4>組織体制の整った案件が見つかる</h4>
&nbsp;

これは完全に肌感ですが、<strong>エージェントさんを通すと一定のスクリーニングが効いているのかある程度組織体制ができた会社に出会える気がします。</strong>

もちろん、大企業レベルまで分業がされているわけではなくあくまでもスタートアップやベンチャーの企業さんが中心になるのですが、ベンチャー・スタートアップでもエンジニア・マーケ・営業などそれぞれのチームは小さいですが部署間の分業をしっかり図っており、組織としてのパフォーマンスが最大化されるような組織づくりをしようという意図が感じられる企業さんが多いです。（人手不足などの問題もやはりあり理想とはいえない部分も多くありますが）

こういったそれぞれの社員が集中しやすい環境の現場に入れるとエンジニアは安心して自分の技術力と向き合いながら開発できるので、こういう現場に出会えると幸せなのかなと思います。

&nbsp;
<h3>エージェントを利用するデメリット</h3>
&nbsp;
<h4>仲介手数料（マージン）の分収入が下がる</h4>
&nbsp;

これもよく言われることですが、エージェントさんを挟む場合と挟まない場合では単純に企業さんとフリーランスの間にエージェントさんが入る形になるので、企業から支払われる報酬の一部がエージェントの取り分になります。

そのため、<strong>直契約の場合とくらべ相対的にフリーランスへの報酬は少なくなります。</strong>

&nbsp;
<h4>働き方の柔軟性がさがる。</h4>
&nbsp;

エージェントさんを使った場合、会社員時代に比べれば圧倒的に働き方の柔軟性が出る可能性は高いですが、<strong>直契約に比べるとまだまだ働き方の柔軟性は低い</strong>です。

エージェントさんを利用すると基本は週5日の常駐案件が基本ですし、それなりのスキルがないとリモートワークの案件を獲得するのはなかなか難しいです。

一方直契約の場合はクライアントさんとの関係性でだいぶ柔軟な働き方ができるので（現実として、リモートの仕事や週3日程度の仕事していますし界隈でそういう話も聞きます。）

&nbsp;
<h3>フリーランスならエージェント使うべき？</h3>
&nbsp;

エージェントを使うか使わないかという所に関する私の意見では、

<strong>エージェント使う場合と使わない場合でメリデメあるのでそこ理解しながら使い分けましょうね。</strong>

というところが最終的なところです。

ある程度のフリーランス歴が長いと業界でのつながりができていたりして、知り合いに案件聞きながらという形でも回せるのですが駆け出しフリーランスや現在会社員の方はそういったつながり少ないので、エージェントを使ってさっと案件に参画して実績なり経験なりつながりなりを作ってしまった方が良いと思われます。

一方、エージェントしか案件獲得できない状態だと多くの人が希望するであろうリモートワークや週3日などの案件を実現するのが難しくなるので、個人レベルで案件獲得できるスキルを磨くことも大切です。

なので、エージェントを使うか？というところに対してはケースバイケースというあやふやな答えしかできないのですが、

<strong>これからフリーランスを始める方にはエージェントを利用して案件獲得するのがオ</strong><strong>ススメ</strong>

というのは行っておきたいと思います。「フリーランスになろうかな〜。どうしようかな〜」と悩んでいる方は多いと思いますが、どれか一つエージェントさんに登録してしまえば色々な話もきけるので、考える前にまず行動という形でぜひ一度エージェントさんの話を聞いてみるとよいでしょう。

&nbsp;
<h2>ぶっちゃけフリーランスって良いの？</h2>
&nbsp;

ここまで、これからフリーランスになるならエージェントさん使いましょうというところやエージェントと直契約のメリ・デメみたいなところをお話しましたが、こちらを読まれている方からすると<strong>「フリーランスって実際どう？」</strong>というところも気になるのではないでしょうか？

幸いなことにフリーランスになって今までのところ年収も増えて働き方も柔軟になってReact,Vueなどの割と新しい技術を使いながら仕事ができているので本当に<strong>フリーランスになってよかったと思っています。</strong>

なので、これからフリーランスになるか悩んでいる人は一回やってみればと思っています。

ただ、ここ一年くらいフリーランスとして働いてみるとやっぱり、<strong>「エンジニアとして何歳くらいまでコード書いて仕事できるかなぁ」</strong>という不安は常に付きまといます。

コードがかけることはそれだけで十分素晴らしい専門性で価値のあることだとは思っているのですが、40歳になって人並みにコードかけるだけとなるとちょっと厳しいかなという感じもありますし個人的に人生色々なことに挑戦してみたいという志向がある私にとっては少しものたりない部分も感じます。

なので、フリーランスエンジニアという部分をベースに今後もう少し自分の幅を広げられる活動ができると良いのかなというのも考えています。

フリーランスという働き方は本当になにするにも自由なので、何もしないでただ目の前の案件をこなすということもできるのですがそれだとフリーランスである意味をあまり感じないです。

なのでフリーランスエンジニアとしてやりつつも自分のサービスも作りたい！や空き時間を利用して飲食店やってみたいなどなどフリーランスという働き方を生かして複数の物事にチャレンジできる人はぜひやってみると良いと思います。

また、↑このようにエネルギッシュに振る舞えるかわからないけど、やってみたいという人は一度フリーランスになってみてから考えるということでも良いと思います。周りでもフリーランスになった後にやっぱちがうとなって会社員に戻る方もいるのでそういうキャリアも全然ありだなと思います。

フリーランスという状況を楽しめて行動できる方にはぜひともオススメですし、色々悩んでいるけどやっぱりフリーランスになりたい！という方には一度フリーランスになって考えることをオススメししておきます。

&nbsp;
<h2>まとめ</h2>
&nbsp;

先の項目にもかきましたがフリーランスという働き方を楽しめる人にはフリーランスおすすめです。「そんなのなってみないとわからないよ！」というのも確かにそうだなと思います。実際私も「やってみたいし、なってみないとわからないことも多いから」というのがフリーランスになった動機でした。

これからフリーランスになる方にはエージェントを利用して生活の基盤を固めた上でフリーランスをスタートさせるのがオススメですので上にかいたようなことを参考にしながらスタートを切って頂ければと思います。

では。"
"2343","2018-10-14 14:38:05","2018-10-14 14:38:05","フルリモートエンジニアになったので、これまでの経緯をまとめてみた。","full-remote-engineer","https://ver-1-0.net/wp-content/uploads/2018/10/fullremote.jpg","freelance","&nbsp;

この度10月からフルリモートエンジニアになったので、振り返りがてらフルリモートのエンジニアになるためにやったことをまとめました。

フルリモートというのは、フリーランスのエンジニア（業務委託のエンジニア）の仕事というと常駐型（お客様先のオフィスに行ってそこで仕事をする）とリモート型（家でお仕事）に別れるのですが、このリモート型の案件だけを持っている状態を個人的にフルリモートと呼ばせて頂いています。

[after_intro]
<h2>フルリモートになるためにやったこと</h2>
「フルリモート」という働き方が自分の中で現状そこまで優先順位が高くなかった（単価などの方が気になっていました。。）のですが、移動せずに仕事ができるのであればそれが理想の環境でもあるので少し嬉しくラッキーという感じです。

これやれば絶対リモート案件とれる！みたいなのではないですが僕が実際に行ったことでフルリモートになるに当たってプラスに働いことをあげてみます。

&nbsp;
<h3>ブログを書く</h3>
&nbsp;

これは予想外だったのですが、ブログ経由でお仕事の依頼を受けることがありました。単発の仕事もありますし、継続的なものもあります。このブログ自体そこまでPVも多くないので見ているひとは見ているのだなと感じました。ブログ経由でコンタクトをとってくるような会社さんだと柔軟な考え方をされる方が多いので比較的働き方も自由なのではないでしょうか？

以前、どこかの記事でブログにTipsの様なものを書くのも大事だけど、<strong>仕事への考え方とか大事にしているものが見える記事も載っけておく</strong>とオファーも出しやすいよというのを見たことがります。その人が考えていること、関心ごとがみえるブログだとそういう仕事のオファーもきやすいのかなと思いました。（ちなみに、僕の場合はオファーした会社が使っていた技術で検索上位に来ていたから連絡がきたらしいです。。）

&nbsp;
<h3>スタートアップなど比較的若い会社とお仕事をする</h3>
&nbsp;

スタートアップなど比較的若い会社ではリモート勤務のメリットを理解している場合が多く交渉によってリモートにできたり、そもそも常駐しているひとがあまりいないなんてことも多くあります。

僕自身小さいチームで仕事をする方が好きで、スタートアップの雰囲気なども好きなのでそういう案件の話が来ることが多いのですがフリーランス自体働き方みたいな部分は本当にクライアントさんに左右されるので、自分にあった働き方ができる会社というのがどういうものかというのはなるべく明確に持っていると良いです。

&nbsp;
<h3>フリーランスになったことを公言する</h3>
&nbsp;

FacebookでもTwitterでもInstagramでもなんでも良いのですが身近なつながりのある人たちに対してフリーランスになったことを伝えるのは意外と大事です。各種SNSだと前に一緒に仕事をしていた人と繋がっていることも多いのでそういった場で自分がフリーランスであることをしっかり書いて共有しておくと、エンジニア必要な知り合いが連絡してきて頂けたり、仕事を紹介してもらえたりします。

エンジニアは供給不足なんてのもよく言われますが、本当にちょっとした知り合いから連絡もらえることも多いので、フリーランスの方々はこう行ったところも意識して発信できるとよいかもしれません。

&nbsp;
<h2>フルリモートになって実際のところどう？</h2>
&nbsp;

フルリモートになって、やはり通勤がないぶん<strong>朝の隙間時間にブログ書けたり、コード書けたり、勉強ができる</strong>のでやっぱり快適だなという感じです。

ただ仕事ベースで考えるとずっーーーと家にいて仕事しているというのはやはり辛そうです。人と話さなくなるというのもそうかもしれませんが、<strong>現場にいないとプロジェクトの進み具合や温度感が雑談などを通して入ってこないのでやはりコミュニケーションの部分で限界を感じつつあります。</strong>

週に二、三回も出勤する必要はなさそうですが、二週に一二回は出勤してチームのメンバーと雑談したり打ち合わせしたりをするっていうのを意識的にやっていかないと仕事を進めるのに支障をきたしそうな気配を感じております。

ここらへん私自身もリモートの経験はまだまだなのでどうやるのが良いのかわからないのですが、仕事をしていきつつベストプラクティスを見つけていければなという感じです。

&nbsp;
<h2>まとめ</h2>
&nbsp;

今回はフルリモートエンジニアになったので、節目としてこういう形でまとめさせていただきましたが「フルリモート最高！！」みたいな感じではないです。リモートも常駐もやはりそれぞれ一長一短あるのでそれぞれを組み合わせつつうまくワークする仕組みを模索できればなとおもっています。

では。"
"1113","2017-11-04 22:26:09","2018-08-26 11:28:49","Google AnalyticsからPV順に記事を取得するその①","ga-fetch-order-by-pv-1","https://ver-1-0.net/wp-content/uploads/2017/11/carlos-muza-84523.jpg","engineering::::rails","&nbsp;

&nbsp;

唐突ですが、
だいたいどのブログにも人気記事やよく読まれている記事
ってウィジェットなどにしてまとめて載っけてありますよね。

ただ、人気の記事ってなんだ？っていう話があったりします。
( qiitaとかだといいねの順に並んでる。）
私のブログでも人気記事をwordpressプラグインを使っていくつか
サイドバーに表示していました。

が、
そのプラグインが出した記事のリストを見てみると
普段私がGoogle Analyticsで確認しているPVのランキングと
だいぶ違っています。

そこで、
ちょっとプラグインを調べてみるとプラグイン独自のデータを
データベースに保持して、
その結果から人気記事を取得してきているようでした。

え正直、
<h3>「これ、自分からのアクセスとかも含まれるのでは・・・」</h3>
という感想を持ちましたし、
そもそもいちいちDatabaseにアクセスしていて重そうとも
思いました。
ということで、
Google AnalyticsのPVを取得してきて人気記事を調べたいなと思ったので、
Google AnalyticsのAPIを使ってPV順に記事を取得できる
方法を調べて見ました。

&nbsp;

[after_intro]

&nbsp;
<h2 class=""chapter"">Google Analytics APIを使うための設定</h2>
&nbsp;

&nbsp;

では、早速APIからデータを取って来よう！！
という前にいくつか設定が必要なようです。

詳しくはこちらについて書いてありますが
<a href=""https://developers.google.com/analytics/devguides/reporting/core/v3/quickstart/service-php?hl=ja"">https://developers.google.com/analytics/devguides/reporting/core/v3/quickstart/service-php?hl=ja</a>

必要な手順を解説していきます。

&nbsp;

&nbsp;
<h3>サービスアカウントの作成</h3>
&nbsp;

&nbsp;

まず、
サービスアカウントを作成していきます。
リンク先にあるように<a href=""https://console.developers.google.com/start/api?id=analytics&amp;credential=client_key&amp;hl=ja"">セットアップツール</a>を利用してアカウントを作成していきます。

最初の画面はそのまま続行としておきましょう。
そのままプロジェクトを作成してしまいます。

&nbsp;

<a href=""https://ver-1-0.net/2017/11/04/google-analytics%e3%81%8b%e3%82%89pv%e9%a0%86%e3%81%ab%e8%a8%98%e4%ba%8b%e3%82%92%e5%8f%96%e5%be%97%e3%81%99%e3%82%8b%e3%81%9d%e3%81%ae%e2%91%a0/screen-shot-2017-11-04-at-21-32-52/"" rel=""attachment wp-att-1114""><img class=""alignnone size-full border"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/Screen-Shot-2017-11-04-at-21.32.52.png"" alt=""サービスアカウント作成 | プロジェクト作成"" width=""502"" height=""307"" /></a>

&nbsp;

&nbsp;

&nbsp;

次の画面でAPIを有効化します。
画面ではすでにAPIが有効になっていたようです。
そのまま認証情報に進みます。

<a href=""https://ver-1-0.net/2017/11/04/google-analytics%e3%81%8b%e3%82%89pv%e9%a0%86%e3%81%ab%e8%a8%98%e4%ba%8b%e3%82%92%e5%8f%96%e5%be%97%e3%81%99%e3%82%8b%e3%81%9d%e3%81%ae%e2%91%a0/screen-shot-2017-11-04-at-21-33-02/"" rel=""attachment wp-att-1115""><img class=""alignnone size-full border"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/Screen-Shot-2017-11-04-at-21.33.02.png"" alt=""サービスアカウント作成 | API 有効化"" width=""415"" height=""234"" /></a>

&nbsp;

&nbsp;

次の画面で認証情報を追加しますが、
画面の通りに設定して次に進みましょう。<a href=""https://ver-1-0.net/2017/11/04/google-analytics%e3%81%8b%e3%82%89pv%e9%a0%86%e3%81%ab%e8%a8%98%e4%ba%8b%e3%82%92%e5%8f%96%e5%be%97%e3%81%99%e3%82%8b%e3%81%9d%e3%81%ae%e2%91%a0/screen-shot-2017-11-04-at-21-33-27/"" rel=""attachment wp-att-1116""><img class=""alignnone size-full wp-image-1116 border"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/Screen-Shot-2017-11-04-at-21.33.27.png"" alt=""サービスアカウント作成 | 認証情報"" width=""994"" height=""712"" /></a>

&nbsp;

サービスアカウント名は任意なので、
好きな名前を使いましょう。

&nbsp;

<a href=""https://ver-1-0.net/2017/11/04/google-analytics%e3%81%8b%e3%82%89pv%e9%a0%86%e3%81%ab%e8%a8%98%e4%ba%8b%e3%82%92%e5%8f%96%e5%be%97%e3%81%99%e3%82%8b%e3%81%9d%e3%81%ae%e2%91%a0/screen-shot-2017-11-04-at-21-33-50/"" rel=""attachment""><img class=""alignnone size-large wp-image-1117 border"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/Screen-Shot-2017-11-04-at-21.33.50-1024x649.png"" alt=""サービスアカウント作成 | サービスアカウント名称設定"" width=""700"" height=""444"" /></a>

この画面で「サービスアカウントID」は後の手順で使用するので保管しておきます。
次へをクリックすると
サービスアカウントの鍵が生成されてダウンロードされます。
大事な鍵なので大切に保管しておきましょう。

&nbsp;

&nbsp;
<h3>Google Analyticsヘのユーザ追加</h3>
&nbsp;

&nbsp;

これを忘れるとAPIでアクセスした場合に、
権限がないですと怒られるので確実に行いましょう。

Google Analyticsにログインして、
「左下の歯車のアイコンをクリック」→「ユーザ管理」
で先の「サービスアカウントID」（メールアドレスのようなやつ）を使ってユーザを作成します。
権限は最低限表示と分析だけは付加してあげましょう。

<a href=""https://ver-1-0.net/2017/11/04/google-analytics%e3%81%8b%e3%82%89pv%e9%a0%86%e3%81%ab%e8%a8%98%e4%ba%8b%e3%82%92%e5%8f%96%e5%be%97%e3%81%99%e3%82%8b%e3%81%9d%e3%81%ae%e2%91%a0/google-analytics-add-user/"" rel=""attachment""><img class=""alignnone size-large wp-image-1125 border"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/google-analytics-add-user-1024x443.png"" alt=""Google Analyticsユーザ追加"" width=""700"" height=""303"" /></a>

&nbsp;

[mid_article]

&nbsp;
<h2 class=""chapter"">Analytics APIを使ってページごとのPVを取得</h2>
&nbsp;

&nbsp;

まずは、
composerを使ってGoogle Client APIライブラリを取得します。
<pre><code class=""language-bash"">composer require google/apiclient:^2.0</code></pre>
ライブラリがインストールできたら、
下記のreport.phpファイルを作成します。

まず気をつけるのは、
自分のブログのView IDで

&nbsp;
<pre><code class=""language-php"">$VIEW_ID = ""&lt; REPLACE YOUR VIEW ID&gt;"";</code></pre>
の部分を書き換えることです。

&nbsp;

自分のView IDは下記ツールで調べるか、
<a href=""https://ga-dev-tools.appspot.com/account-explorer/?hl=ja"">Account Exploer</a>
Google Analyticsから確認できます。

&nbsp;

&nbsp;

また、先の手順で取得した鍵ファイル（json)を下記のサンプルコード
report.phpと同じ階層のディレクトリにおき、
名前を「service-account-credentials.json」とします。

&nbsp;

report.php
<pre><code class=""language-php"">&lt;?php

require_once __DIR__ . '/vendor/autoload.php';

$analytics = initializeAnalytics();
$response = getReport($analytics);
printResults($response, $argv[1]);

function initializeAnalytics()
{
    $KEY_FILE_LOCATION = __DIR__ . '/service-account-credentials.json';

    $client = new Google_Client();
    $client-&gt;setApplicationName(""Hello Analytics Reporting"");
    $client-&gt;setAuthConfig($KEY_FILE_LOCATION);
    $client-&gt;setScopes(['https://www.googleapis.com/auth/analytics.readonly']);
    $analytics = new Google_Service_AnalyticsReporting($client);

    return $analytics;
}

function getReport($analytics) {

    // Replace with your view ID, for example XXXX.
    $VIEW_ID = ""&lt; REPLACE YOUR VIEW ID&gt;"";

    // Create the DateRange object.
    $dateRange = new Google_Service_AnalyticsReporting_DateRange();
    $dateRange-&gt;setStartDate(""90daysAgo"");
    $dateRange-&gt;setEndDate(""today"");


    // Create the Metrics object.
    $sessions = new Google_Service_AnalyticsReporting_Metric();
    $sessions-&gt;setExpression(""ga:pageviews"");
    $sessions-&gt;setAlias(""pv"");

    // Create the Dimension object.
    $dimention = new Google_Service_AnalyticsReporting_Dimension();
    $dimention-&gt;setName(""ga:pagePath"");

    // Filter
    $filter = new Google_Service_AnalyticsReporting_DimensionFilter();
    $filter-&gt;setDimensionName(""ga:pagePathLevel4"");
    $filter-&gt;setNot(true);
    $filter-&gt;setOperator(""IN_LIST"");
    $filter-&gt;setExpressions( [""/"", ""/profile/""] );


    $filters = new Google_Service_AnalyticsReporting_DimensionFilterClause();
    $filters-&gt;setFilters(array($filter));

    // OrderBy
    $orderby = new Google_Service_AnalyticsReporting_OrderBy();
    $orderby-&gt;setFieldName(""ga:pageviews"");
    $orderby-&gt;setOrderType(""VALUE"");
    $orderby-&gt;setSortOrder(""DESCENDING"");

    // Create the ReportRequest object.
    $request = new Google_Service_AnalyticsReporting_ReportRequest();
    $request-&gt;setViewId($VIEW_ID);
    $request-&gt;setDateRanges($dateRange);
    $request-&gt;setMetrics(array($sessions));
    $request-&gt;setDimensions(array($dimention));
    $request-&gt;setDimensionFilterClauses(array($filters));
    $request-&gt;setOrderBys($orderby);

    $body = new Google_Service_AnalyticsReporting_GetReportsRequest();
    $body-&gt;setReportRequests( array( $request) );

    return $analytics-&gt;reports-&gt;batchGet( $body );
}

function printResults($reports , $count) {
    for ( $reportIndex = 0; $reportIndex &lt; count($reports); $reportIndex++ ) { $report = $reports[ $reportIndex ]; $header = $report-&gt;getColumnHeader();
        $dimensionHeaders = $header-&gt;getDimensions();
        $metricHeaders = $header-&gt;getMetricHeader()-&gt;getMetricHeaderEntries();
        $rows = $report-&gt;getData()-&gt;getRows();

        for ( $rowIndex = 0; $rowIndex &lt; $count; $rowIndex++) { $row = $rows[ $rowIndex ]; $dimensions = $row-&gt;getDimensions();
            $metrics = $row-&gt;getMetrics();
            for ($i = 0; $i &lt; count($dimensionHeaders) &amp;&amp; $i &lt; count($dimensions); $i++) {
                print($dimensionHeaders[$i] . "": "" . $dimensions[$i] . ""\n"");
            }

            for ($j = 0; $j &lt; count( $metricHeaders ) &amp;&amp; $j &lt; count( $metrics ); $j++) { $entry = $metricHeaders[$j]; $values = $metrics[$j]; print(""Metric type: "" . $entry-&gt;getType() . ""\n"" );
                for ( $valueIndex = 0; $valueIndex &lt; count( $values-&gt;getValues() ); $valueIndex++ ) {
                    $value = $values-&gt;getValues()[ $valueIndex ];
                    print($entry-&gt;getName() . "": "" . $value . ""\n"");
                }
            }
        }
    }
}

</code></pre>
&nbsp;

&nbsp;

実行コマンドは下記になります。
<pre><code class=""language-bash"">php report.php 10</code></pre>
&nbsp;

&nbsp;

実行結果
<pre><code class=""language-bash"">$php report.php 10
ga:pagePath: /2017/02/13/kotlin-spring-boot/
Metric type: INTEGER
pv: 447
ga:pagePath: /2017/04/24/cakephp3-でapiを作成-jsonレスンポンス/
Metric type: INTEGER
pv: 401
ga:pagePath: /2017/04/28/node-jsビットコインの価格をリアルタイムにdbに保存す/
Metric type: INTEGER
pv: 293
ga:pagePath: /2017/06/05/kotlin-spring-boot-でログイン認証を実装/
Metric type: INTEGER
pv: 194
ga:pagePath: /2017/01/29/【cakephp3】cakephp3でsqlをログに吐き出す方法/
Metric type: INTEGER
pv: 157
ga:pagePath: /2017/02/08/kotlin-db-connect-by-exposed/
Metric type: INTEGER
pv: 134
ga:pagePath: /2017/02/05/kotlin-http-request-khttp/
Metric type: INTEGER
pv: 127
ga:pagePath: /2017/02/08/bootsnote/
Metric type: INTEGER
pv: 99
ga:pagePath: /2017/01/04/cakephpで部分テンプレート/
Metric type: INTEGER
pv: 96
ga:pagePath: /2017/08/09/laravelにvue-jsを導入してみる。-bladeの-とコンフリクトする/
Metric type: INTEGER
pv: 73
</code></pre>
&nbsp;

&nbsp;

PV上位10位以内の記事とそのPVが取得できています。
(今回の実行結果には引数で10を指定しているため10件取得が期待値)

&nbsp;
<h2 class=""chapter"">まとめ</h2>
&nbsp;

ここまでで、
無事PVランキングは取得できました。
引数の数を大きくすれば大きくするほど取得できるランキングの件数を
取得できるようにサンプルコードを作成しています。

&nbsp;

実際にやってみた感想としては、
コードを書くまでの最初の設定部分のところで
時間を取られました。。
私の場合は、サービスアカウントをGoogle Analyticsのアカウントとして
作成する部分に気づかず、
何度APIにリクエストを送っても権限がないと怒られてしまっていました。
意外と気づかないの注意されると良いと思います。

&nbsp;

プログラムの流れとしては、
Metrics（SQLでいうカラムのようなイメージ）
でページビューやセッション、ユーザ数などが指定でき
DimensionでMetricsをそれぞれ日付ごとにまとめるのか？ページごとにまとめるのか？
と行った具合で設定を行い、
それらをリクエストのパラメータとしてデータを取得してくる
という感じです。
（FilterやOrderはそのままの部分で今回の流れだと枝葉なのであまり説明はしません）

今回はPHPコードでデータを取得しただけですが、
これをもう少し発展させて実際にWordPressページなどでも使えるように
していきたいです！！

とりあえず今回はここまでで。

&nbsp;

[after_article]

&nbsp;"
"1131","2017-11-05 23:16:05","2018-08-26 11:27:17","Google AnalyticsからPV順に記事を取得するその② - サイドバーに表示-","ga-fetch-order-by-pv-2","https://ver-1-0.net/wp-content/uploads/2017/11/carlos-muza-84523.jpg","engineering::::rails","前回の記事では、
<a href=""https://ver-1-0.net/2017/11/04/ga-fetch-order-by-pv-1/"">Google AnalyticsからPV順に記事を取得するその①</a>
PV数で人気記事の取得までできました。

今回はそれを実際にサイドバーに表示できるようにするまで、
やっていきます。
&nbsp;

[after_intro]

&nbsp;
&nbsp;

<h2 class=""chapter"">記事のタイトルを取得する - 導入 -</h2>
前回は、
記事のURLしか取得できていなかったので、
URLを元に記事のタイトルを取得していきます。
(Google Analyticsから直接記事タイトルをとってくる方法もあるけど、
タイトルを変更したり、
サイトタイトルを変更すると別ページと認識されてしまうので、
URLで判断するようにしました。)

完成イメージはこのような感じです。

<a href=""https://ver-1-0.net/2017/11/05/google-analytics%e3%81%8b%e3%82%89pv%e9%a0%86%e3%81%ab%e8%a8%98%e4%ba%8b%e3%82%92%e5%8f%96%e5%be%97%e3%81%99%e3%82%8b%e3%81%9d%e3%81%ae%e2%91%a1-%e3%82%b5%e3%82%a4%e3%83%89%e3%83%90%e3%83%bc/screenshot-1/"" rel=""attachment wp-att-1133""><img class=""alignnone size-full wp-image-1133"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/ScreenShot-1.png"" alt=""PV順人気記事ランキングの完成図"" width=""856"" height=""528"" /></a>

この記事が終わるころには、
自分のブログで人気記事ランキングを表示できるようになっている
はずです。

&nbsp;

[mid_article]

&nbsp;
&nbsp;

<h2 class=""chapter"">記事のタイトルを取得する - 実装 -</h2>
Wordpressの投稿は、
<strong>wp_posts</strong>というテーブルに格納されていて、
そのテーブルのpost_nameという絡むにURLの情報が入っています。

<strong>この情報とGoogle Analyticsから取ってきたURLをぶつけて
記事情報を表示します。</strong>

&nbsp;

&nbsp;

&nbsp;

<a href=""https://ver-1-0.net/2017/11/05/google-analytics%e3%81%8b%e3%82%89pv%e9%a0%86%e3%81%ab%e8%a8%98%e4%ba%8b%e3%82%92%e5%8f%96%e5%be%97%e3%81%99%e3%82%8b%e3%81%9d%e3%81%ae%e2%91%a1-%e3%82%b5%e3%82%a4%e3%83%89%e3%83%90%e3%83%bc/screen-shot-2017-11-05-at-22-07-43/"" rel=""attachment wp-att-1134""><img class=""alignnone size-full wp-image-1134"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/Screen-Shot-2017-11-05-at-22.07.43.png"" alt=""ディレクトリ構造"" width=""301"" height=""287"" /></a>

前回の記事とはだいぶファイルの感じが変わりますが、
<ul>
 	<li>classes/GoogleAnalyticsService.php ・・・ 主にGoogleAnalyticsとの通信を行うクラス</li>
 	<li>classes/WPDatabaseService.php ・・・ WordpressのDBとのやりとりするクラス</li>
 	<li>ga-popular-rankings.php ・・・ ページの表示を行ったりするメインの部分</li>
</ul>
という感じになります。

&nbsp;

&nbsp;

GoogleAnalyticsService.phpは前回で、
GoogleAnalyticsからPageViewなどの情報を取得してきた部分になりますが、今回はクラスとして分割して配置しています。
<pre><code class=""language-php"">&lt;?php
Class GoogleAnalyticsService{

    private $analytics;
    private $view_id;
    private $result;
    private $display_count;
    private $reports;

    function __construct($keyfile,$view_id,$display_count)
    {
        $client = new Google_Client();
        $client-&gt;setApplicationName(""GoogleAnalyticsService"");
        $client-&gt;setAuthConfig($keyfile);
        $client-&gt;setScopes(['https://www.googleapis.com/auth/analytics.readonly']);
        $analytics = new Google_Service_AnalyticsReporting($client);

        $this-&gt;analytics = $analytics;
        $this-&gt;view_id = $view_id;
        $this-&gt;display_count = $display_count;
    }

    function report_request() {
        // Create the DateRange object.
        $dateRange = new Google_Service_AnalyticsReporting_DateRange();
        $dateRange-&gt;setStartDate(""90daysAgo"");
        $dateRange-&gt;setEndDate(""today"");

        // Create the Metrics object.
        $sessions = new Google_Service_AnalyticsReporting_Metric();
        $sessions-&gt;setExpression(""ga:pageviews"");
        $sessions-&gt;setAlias(""pv"");

        // Create the Dimension object.
        $dimention = new Google_Service_AnalyticsReporting_Dimension();
        $dimention-&gt;setName(""ga:pagePathLevel4"");

        // Filter
        $filter = new Google_Service_AnalyticsReporting_DimensionFilter();
        $filter-&gt;setDimensionName(""ga:pagePathLevel4"");
        $filter-&gt;setNot(true);
        $filter-&gt;setOperator(""IN_LIST"");
        $filter-&gt;setExpressions( [""/""] );

        $filters = new Google_Service_AnalyticsReporting_DimensionFilterClause();
        $filters-&gt;setFilters(array($filter));

        // OrderBy
        $orderby = new Google_Service_AnalyticsReporting_OrderBy();
        $orderby-&gt;setFieldName(""ga:pageviews"");
        $orderby-&gt;setOrderType(""VALUE"");
        $orderby-&gt;setSortOrder(""DESCENDING"");

        // Create the ReportRequest object.
        $request = new Google_Service_AnalyticsReporting_ReportRequest();
        $request-&gt;setViewId($this-&gt;view_id);
        $request-&gt;setDateRanges($dateRange);
        $request-&gt;setMetrics(array($sessions));
        $request-&gt;setDimensions(array($dimention));
        $request-&gt;setDimensionFilterClauses(array($filters));
        $request-&gt;setOrderBys($orderby);

        $body = new Google_Service_AnalyticsReporting_GetReportsRequest();
        $body-&gt;setReportRequests( array($request) );

        $this-&gt;reports = $this-&gt;analytics-&gt;reports-&gt;batchGet( $body );
    }

    function fetch_result_as_array() {
        $result = [];
        for ( $reportIndex = 0; $reportIndex &lt; count($this-&gt;reports); $reportIndex++ ) {
            $report = $this-&gt;reports[ $reportIndex ];
            $rows = $report-&gt;getData()-&gt;getRows();

            $display_count = $this-&gt;display_count &gt; count($rows) ? count($rows) : $this-&gt;display_count;
            for ( $rowIndex = 0; $rowIndex &lt; $display_count; $rowIndex++) { $row = $rows[ $rowIndex ]; $dimensions = $row-&gt;getDimensions();
                $metrics = $row-&gt;getMetrics();

                $result[] = [
                    'pageview' =&gt; $metrics[0]-&gt;getValues()[0],
                    'url'      =&gt; $dimensions[0]
                ];
            }
        }
        return $result;
    }
}
</code></pre>
&nbsp;

変更点はメソッド名が代わり、
printResultsメソッドがfetch_result_as_arrayのように
配列を返す関数に変わったという部分になります。

参考:<a href=""https://ver-1-0.net/2017/11/04/ga-fetch-order-by-pv-1/"">Google AnalyticsからPV順に記事を取得するその①</a>

&nbsp;

&nbsp;

また、
メインのファイルであるga-popular-rankings.php
はそれぞれのクラスを呼ぶ感じでスッキリしております 。
<pre><code class=""language-php"">&lt;?php

/*
* Plugin Name: Google Analytics Popular Rankings
*/


require_once __DIR__ . '/vendor/autoload.php';
require_once __DIR__ . '/classes/GoogleAnalyticsService.php';
require_once __DIR__ . '/classes/WPDatabaseService.php';

function ga_popular_rankings(){
    $KEY_FILE_LOCATION = __DIR__ . '/service-account-credentials.json';
    $VIEW_ID = '&lt;REPLACE YOUR VIEW ID&gt;';

    $analytics = new GoogleAnalyticsService($KEY_FILE_LOCATION,$VIEW_ID,5);
    $analytics-&gt;report_request();
    $response = $analytics-&gt;fetch_result_as_array();

    $db = new WPDatabaseService($response);
    $pop_posts =  $db-&gt;fetch_post_data();

    pop_posts_render($pop_posts);

}


function pop_posts_render($pop_posts){
    echo ""&lt;h2 class='widget-title'&gt;人気記事&lt;/h2&gt;"";
    echo ""&lt;ul style='list-style:none;padding-left:0px;'&gt;"";
    foreach($pop_posts as $post){
        echo ""&lt;li&gt;&lt;a href='"".$post['url'].""'&gt;"".$post['title'].""&lt;/a&gt;&lt;/li&gt;"";
    }
    echo ""&lt;/ul&gt;"";
}

add_filter('widget_text', 'do_shortcode');
add_shortcode( 'ga_popular_rankings', 'ga_popular_rankings' );
</code></pre>
&nbsp;

&nbsp;

&nbsp;

上のコードのこの部分で、
GoogleAnalayticsのPageView順を配列として取得していますので、
<pre><code class=""language-php"">$analytics = new GoogleAnalyticsService($KEY_FILE_LOCATION,$VIEW_ID,5);
    $analytics-&gt;report_request();
    $response = $analytics-&gt;fetch_result_as_array();
</code></pre>
&nbsp;

あとは、
WPDatabaseService.phpで取得した各要素のURLを
元に記事のタイトルを取得します。

&nbsp;

&nbsp;

&nbsp;

&nbsp;

WPDatabaseService.php
<pre><code class=""language-php"">&lt;?php
Class WPDatabaseService{
    private $posts;

    function __construct($posts){
        $this-&gt;posts = $posts;
    }

    private function get_tilte_by_path_name($post_name){
        global $wpdb;
        $query = $wpdb-&gt;prepare('select post_title from wp_posts where post_name = %s',$post_name);
        return $wpdb-&gt;get_var($query,0,0);
    }

    function fetch_post_data(){
        $result = [];
        foreach($this-&gt;posts as $post){
           $path_name = urlencode(mb_convert_encoding(str_replace('/','',$post['url']), 'UTF-8', 'auto'));
           $post['title'] = $this-&gt;get_tilte_by_path_name($path_name);
           $result[] = $post;
        }
        return $result;
    }
}

</code></pre>
ここでは、fetch_post_dataで配列の各要素を
get_tilte_by_path_nameメソッドに渡して、
URLごとの記事タイトルを取得しています。
先のga-popular-rankings.phpを見てもわかるように
ここで最終的にページビュー順人気記事ランキングの情報が出揃います。

&nbsp;

&nbsp;
<h2 class=""chapter"">ページビュー順人気記事ランキングを表示する</h2>
&nbsp;

&nbsp;

今回は、$wpdbというWordPress固有の変数も使っているので、
先ほど紹介したファイル群を[WordPress Root]/wp-content/plugins/の
下に配置します。

その時に重要なのがga-popular-rankings.phpの記述で
<pre><code class=""language-php"">/*
* Plugin Name: Google Analytics Popular Rankings
*/
</code></pre>
の部分になります。

&nbsp;
WordPressのインストール済みプラグインをみると、
このPlugin Nameの文字でインストール済みプラグインに表示されます。

ここでPluginの一覧に表示されてしまえば、
あとは簡単です。
Pluginを有効化したあとにウィジェットから「テキスト」を選択して
サイドバーの任意の場所に追加し、
<pre><code class=""language-php"">[ga_popular_rankings]</code></pre>
とwidgetの本体部分に書き込んでしまえば、
先に紹介した人気記事のランキングがサイドバーに表示されます。

ちなみに、
ウィジェットでショートコードを使用するには、
以下の記載が必要なので、ga-popular-rankings.php
に登録を行っています。
<pre><code class=""language-php"">add_filter('widget_text', 'do_shortcode');
add_shortcode( 'ga_popular_rankings', 'ga_popular_rankings' );
</code></pre>

&nbsp;
&nbsp;

<h2 class=""chapter"">まとめ</h2>
&nbsp;

&nbsp;

今回ここまでで、
一応自分のサイトに人気記事のランキンがまでは表示できます。

が、

もう少し興味のある方は、
「表示する件数を設定できるようにしたい！！」
「ショートコードとしてサービスを提供しているけどウィジェットとして
提供したい！！」
というようになるかと思います。

私もその一人で現在これに関連したプラグインを開発して
申請中です。

WordPressのプラグインには悩まされた苦い思い出が
多くあるのですが、
自分で作ってみると愛着が湧いてきてなかなか面白いです。

プラグインとして使ってみると、
自分で設定画面を作れたりWidgetとしてサービスを提供できたりして
面白いです。

興味を持った方には、
ネットにも情報が転がっているのぜひ自分で作ってみると
良いと思います。

今回のコードはここにありますので、
ご自由にご確認ください

<a href=""https://github.com/version-1/ga-popular-rankings"">https://github.com/version-1/ga-popular-rankings</a>

&nbsp;

長くなりましたが、
この記事はここまでにします。
では。

&nbsp;

[after_article]

&nbsp;"
"739","2017-10-02 19:44:09","2018-10-19 23:42:49","GitHub Pagesが便利。簡単にwebアプリのデモを公開するならオススメ","github-pages","http://ver-1-0.net/wp-content/uploads/2017/02/6njoebtarec-lee-campbell.jpg","engineering::::for-beginner","&nbsp;

&nbsp;

&nbsp;

どうも、
近所に中華屋さんしかなくて
栄養が偏りがちな
<a href=""https://twitter.com/version1_2017"">@version1</a>です。

&nbsp;


昔から
なんかあるな〜とは
思っていたのですが、
前回の記事
<a href=""https://ver-1-0.net/2017/10/01/japanese-action/"">日本地図を地方ごとにアクションを分ける〜クリッカブルマップ〜</a>

を書いている時に使ってみて、
<h2>GitHub Pages便利！！</h2>
となりました。
<a href=""https://pages.github.com/"">GitHub Pages | Websites for you and your projects, hosted directly ..</a>

ので、
紹介して行きます。

&nbsp;
<h2 class=""chapter"">GitにPushするだけでwebページを公開できる。</h2>
&nbsp;

&nbsp;

このGitHubを使うと、
<strong>Webアプリ</strong>の<strong>デモの公開</strong>が
GitPushするだけでできてしまいます。

&nbsp;

&nbsp;

前回の日本地図の記事でも
デモを公開していますが、

&nbsp;

GitPushしたあとにRepositoryで設定を行うと
このようにすぐwebページを公開できます。

&nbsp;
<blockquote>http://{your account name}.github.io/{repository name}</blockquote>
例）
<a href=""https://version-1.github.io/imagemap/"">https://version-1.github.io/imagemap/</a>

[after_intro]

&nbsp;

&nbsp;
<h2 class=""chapter"">Git Pagesの設定方法</h2>
&nbsp;

&nbsp;

1.適当なwebページ用のリポジトリを作成
(もちろんPush )

<img class=""alignnone size-large wp-image-746"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-02-at-19.46.02-1024x465.png"" alt=""任意のリポジトリを作成"" width=""700"" height=""318"" />

&nbsp;

2.リポジトリの「Settings」のページに
行き、Sourceのところでmaster branchを選択する。

<img class=""alignnone size-large wp-image-748"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-02-at-19.46.29-1024x567.png"" alt=""masterブランチを選択"" width=""700"" height=""388"" />

&nbsp;

3.master branch を選択しSAVEを押した所で、
「 Your site is published at {url}」
のように表示されたらOK。

<img class=""alignnone size-large wp-image-749"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-02-at-19.46.42-1024x711.png"" alt=""GitHubPagesのページ作成完了"" width=""700"" height=""486"" />

&nbsp;

ページが作成されるまで、
一定の時間がかかるので、
しばらく待ってからアクセスすると

リポジトリのindex.htmlが開かれて
自分のwebページが表示されます。

&nbsp;

&nbsp;
<h2 class=""chapter"">まとめ</h2>
&nbsp;

&nbsp;

以上、
GitHup Pagesだと
本当に設定いらずでページ公開できます。

&nbsp;

&nbsp;

さずがにPHPやRubyなどサーバ側でも
プログラムを動かす動的なページ
の作成は難しいですが、

&nbsp;

&nbsp;

html,css,javascriptあたりのデモであれば
簡単に公開することができます。

&nbsp;

&nbsp;

もっというと、
他のツールも併用するとブログなどもできてしまうようです。
<a href=""https://liginc.co.jp/web/programming/server/104594"">https://liginc.co.jp/web/programming/server/104594</a>

以上、です。

&nbsp;"
"1309","2017-11-17 19:08:16","2017-12-22 20:32:22","Google Analyticsの情報で人気記事を表示するWordpressプラグインを作ってみた。Google Analytics POP Posts","google-analytics-pop-posts","https://ver-1-0.net/wp-content/uploads/2017/11/edho-pratama-152392.png","engineering::::rails","<h2 class=""chapter"">他のWordPressプラグインだと自分のアクセスも含まれてしまう気がした</h2>
&nbsp;

これまではPopular Postsというプラグインを
使って当ブログの人気記事の一覧を表示していました。

そして、
ある日なんとなくどういうデータを基に
人気記事を表示しているのか
調べてみました。

その一貫でデーターベースをみてみると、
投稿のIDとなにやら表示数をカウントしているかの
ようなテーブルがあるのを
発見しました。

<strong>「これって、自分のアクセスも含まれるんじゃね？」</strong>

<strong>「GoogleAnalyticsのものとだいぶランキングが違う・・」</strong>

普段自分のPCからのアクセスは、
アクセス数にカウントしないように設定を行なっているのですが、
wordpressのプラグインで自動でカウントされてしまうと
なると困ったものです。

※細かい挙動は追っていないので、
実際どのようにカウントしているかなどの
本当のところは不明です。

少なくとも、
<strong>GoogleAnalyticsとプラグインのランキングがずれてしまっている</strong>ことは確かで、

<strong>「GoogleAnalyticsのランキングをそのまま表示したい・・・」</strong>
という欲望がふつふつと湧いてきました。

&nbsp;

[after_intro]

&nbsp;
<h2 class=""chapter"">他同じようなプラグインあるでしょ？</h2>
&nbsp;

ここで、
湧いてくる疑問が
<strong>「同じようなのあるでしょ？」</strong>
というものです。

なかなかシステム開発を妨げる
重要な問いですが、
確かに同じようなものもあるかと思います。

私もいくつか調べて、

こちらや
<a href=""https://www.tam-tam.co.jp/tipsnote/cms/post11104.html"">【WordPress】サーバ負荷が軽い「Simple GA Ranking」プラグインで人気記事ランキングを表示する方法</a>

こちらを
<a href=""https://ja.wordpress.org/plugins/ga-popular-posts/"">Google Analytics Popular Posts</a>
使ってみたりしました。

が何かが違う、
私がのやり方が悪いのかエラーが出たり、
私がみているGAのサマリーと結果が異なっていたりと

<strong>「俺がみているこのサマリーを自動で表示するようにしたいんだ！」</strong>

となったので、
自作してみました。

インストール方法はこちらに書いたいので、
よければ使ってみてください。
<a href=""https://ver-1-0.net/how-to-install-google-analytics-pop-posts/"">[ WordPress プラグイン ] Google Analytics POP Postsのインストール手順</a>

<strong>
※留意事項※
Wordpress.orgにプラグインとして申請中ではありますが、
まだ審査には通過しておりませんので、ご留意ください。
通過次第当ブログでお伝えすると思います。
※留意事項※
</strong>

&nbsp;

[mid_article]

&nbsp;
<h2 class=""chapter"">プラグインの特徴について</h2>
&nbsp;

プラグインはシンプルです。

最初だけ、<a href=""https://developers.google.com/analytics/devguides/reporting/core/v4/?hl=ja"">Google Analytics Report API v4</a>の設定が必要ですが、
あとは他のプラグインと同じように、
サイドバーの設定画面からGoogle Analytics POP Posts
を選択して、
直近何日をランキングの評価対象にするか
と
上位何記事を表示するか
を設定してウィジェットに追加するだけです。

当ブログでも利用しています。
<a href=""https://ver-1-0.net/2017/11/17/google-analytics-pop-posts/%e4%ba%ba%e6%b0%97%e8%a8%98%e4%ba%8b/"" rel=""attachment wp-att-1317""><img class=""alignnone size-full wp-image-1317"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/人気記事.jpg"" alt=""Google Analytics POP Posts の使用例"" width=""358"" height=""500"" /></a>

&nbsp;

また、
<strong>他のプラグインですとデータベースに表示回数などを</strong>
<strong> 保存したりする関係で重くなりがち</strong>なのですが、
こちらは直接Google Analyticsのデータを参照しているので、
軽い作りになっています。

今のところ表示の自由度みたいな部分は
少ないので、
そこらへんを追加できたりすると良いのかもしれないです。

&nbsp;

&nbsp;

ひとまずは、
早く審査を通過して欲しいのですが、
どれくらいかかるのか・・・。はたまた通るのか？
<h2 class=""chapter"">まとめ</h2>
&nbsp;

今回Wordpressのプラグインを自作しましたが、
<strong>プラグインにするだけならそこまで難しくない</strong>と思います。

作り方はここを参考にしました。
<a href=""https://wpdocs.osdn.jp/%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%AE%E4%BD%9C%E6%88%90"" target=""_blank"" rel=""noopener"">プラグインの作成 - WordPress Codex 日本語版</a>

今回のプラグインでいうとコアの
人気な記事を取得する部分を作って、
設定画面を作って、という感じの流れでしたね。

今のところあまりこの
プラグインに不満はないのですが、
今後気が向いたら拡張しても良いかなぁなど
考えております。

もし、こういう機能が欲しいなどあれば知りたいですね。

以上です！！

[after_intro]"
"421","2017-06-07 00:03:16","2018-11-26 22:01:28","ビットコインって何？これからビットコインを勉強したい人にオススメする「初めてのビットコイン」","hajimeteno-bitcoin","http://ver-1-0.net/wp-content/uploads/2017/09/230115b20d9f13bfadeb11de457bf62d_s.jpg","cryptocurrency-blockchain::::engineering","&nbsp;

&nbsp;

&nbsp;

現在話題沸騰中のビットコインですが、
<img class=""alignnone size-large wp-image-423"" src=""http://ver-1-0.net/wp-content/uploads/2017/06/スクリーンショット-2017-06-06-23.20.42-1024x553.png"" alt=""kabu-ka.net"" width=""700"" height=""378"" />
kabu-ka.net
現在32万円弱といったところでしょうか。

と言いつつも、
値段は刻一刻と変化しています。

私も時代に乗り遅れてはいかんと
本を購入して少し勉強を初めて見ました。

&nbsp;

&nbsp;

ばん。

<a href=""http://amzn.to/2szR7k7"">はじめてのビットコイン ビットコイン研究所 (著), 佐々木健二 (監修)</a>
<a href=""https://www.amazon.co.jp/%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6%E3%81%AE%E3%83%93%E3%83%83%E3%83%88%E3%82%B3%E3%82%A4%E3%83%B3-%E3%83%93%E3%83%83%E3%83%88%E3%82%B3%E3%82%A4%E3%83%B3%E7%A0%94%E7%A9%B6%E6%89%80/dp/4906784216/ref=as_li_ss_il?ie=UTF8&amp;qid=1496759005&amp;sr=8-1&amp;keywords=%E5%88%9D%E3%82%81%E3%81%A6%E3%81%AE%E3%83%93%E3%83%83%E3%83%88%E3%82%B3%E3%82%A4%E3%83%B3&amp;linkCode=li2&amp;tag=llg01-22&amp;linkId=48ec3b04c652151132f08fd355386afa"" target=""_blank"" rel=""noopener noreferrer""><img src=""//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=4906784216&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=llg01-22"" border=""0"" /></a><img style=""border: none !important; margin: 0px !important;"" src=""https://ir-jp.amazon-adsystem.com/e/ir?t=llg01-22&amp;l=li2&amp;o=9&amp;a=4906784216"" alt="""" width=""1"" height=""1"" border=""0"" />

一時ビットコイン市場に影を落とした
マウントゴックスの破綻について触れつつも、
ビットコインに対する誤解を取り除きつつ、
ビットコインが何であるか、どういったメリットがあるか
解説しています。

&nbsp;

&nbsp;

この本の特徴的な点は、
今日でも金融資産として高い信頼性を有している金との
対比で、
ビットコインについて説明しています。

&nbsp;

以下が共通点です。
<h2 class=""chapter"">1.総量が決まっている</h2>
&nbsp;

金は鉱物資源であるので、
一般的に考えて有限な資源です。

一方でビットコインも、
採掘量がプログラムにより定義され、
2100万BTCを上限としています。

これは、
2040年くらいまでに全てが採掘される予定で、
ビットコインが有限であるゆえの希少性を発揮し
価値が高まっていくとされています。
<h2 class=""chapter"">2.政府や銀行に支配されない</h2>
&nbsp;

金もビットコインも採掘して手に入るもので、
中央の発行体がありません。

政府や金融機関、企業から独立した存在で、
それたの破綻により価値がゼロになることがありません。
<h2 class=""chapter"">3.インフレを起こさない</h2>
&nbsp;

これは、先に上げた1.総量が決まっている
ともかぶる部分はありますが、
総量が決まっていて、
採掘される量もプログラムによりペース配分がなされ、
一般的な国家の発行す通貨のように供給量が
増え通貨の価値が減少するということもありません。
<h2 class=""chapter"">4.換金性が高い</h2>
&nbsp;

様々な国家の貨幣に換金できることも
魅力の一つです。
<h2 class=""chapter"">5.価値が上昇し続けている</h2>
&nbsp;

金自体も様々な危機に直面しつつも、
長期的には価値が上昇していると言えるそうです。

ビットコインも明らかな上昇トレンドの中にあり
チャートを見ても割るように右肩上がりのトレンドになっています。

&nbsp;

&nbsp;

本書では、
金との共通点も指摘しつつ、
違いについても言及しています。

&nbsp;
<h2 class=""chapter"">送金が早い・安い</h2>
&nbsp;

ビットコインは上でもいったように、
「発光体」がないので、
送金の際に銀行などの仲介が必要ありません。

ビットコインの交換は
個人to個人での取引がメインとなり、
海外送金でも瞬時にほとんど手数料をかけずに
ビットコインを移動することができます。

金自体は、
金属ですので輸送自体にも
時間がかかるので、
こことがビットコインとの大きな違いになります。

&nbsp;
<h2 class=""chapter"">まとめ</h2>
&nbsp;

上にも書きましたが、
金との対比で書かれていたり、
ページ数も200P程度と多くなく
最初の一冊としては抵抗なく読み進めれ切れると思います。

ビットコイン入門の最初の一冊としてオススメです。

次は本書でも紹介されていた
<iframe style=""width: 120px; height: 240px;"" src=""//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=llg01-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00IZSH6T2&amp;linkId=c741d89903c29c54b567b1356fd9cfcf"" width=""300"" height=""150"" frameborder=""0"" marginwidth=""0"" marginheight=""0"" scrolling=""no""></iframe>

でもよんでみましょうかね。

今後も価格の上昇が期待されるビットコイン
そのほか暗号通貨に興味のある方はこちらもどうぞ"
"870","2017-10-18 08:08:08","2018-01-30 23:18:13","ブロックチェーンの仕組みがわかる記事”How does blockchain really work? I built an app to show you.”を訳してみた","how-does-blockchain-really-work-i-built-an-app-to-show-you-translate-ja","http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-17-at-23.03.09.png","engineering","&nbsp;

どうも週末に、
パッと見つけた記事で面白かったものがあったので
シェアしたいと思いました。

チュートリアル用のようなunderstandableなアプリも
一緒に公開しており、
Awesome!と思ったので和訳します。
<a href=""http://ver-1-0.net/2017/10/18/how-does-blockchain-really-work-i-built-an-app-to-show-you-translate-ja/screen-shot-2017-10-18-at-7-49-58/"" rel=""attachment""><img class=""alignnone size-large wp-image-874"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-18-at-7.49.58-1024x887.png"" alt=""tweet-about-awesome-blockchain-article"" width=""700"" height=""606"" /></a>

原文はコチラ
<a href=""https://medium.freecodecamp.org/how-does-blockchain-really-work-i-built-an-app-to-show-you-6b70cd4caf7d"">How does blockchain really work? I built an app to show you.</a>

※プロフェッショナルな
訳ではないのでそこは大目にみてください。
雰囲気だけ伝わればと思っています。
誤訳等あればおしらせください。
※訳文掲載は著者の転載許可の承諾を得ております。

&nbsp;

全文を訳したましたが、
マイニング部分の流れがコード付きで
わかりやすく説明されていて本当に役立ちました！！
できれば本文中にあるweb版のデモを触ってみると
より深く理解できるはずです。

&nbsp;

[adsense_double_rect]

&nbsp;
<h2 class=""chapter"">海外の記事 - （訳）Sean HHow does blockchain really work? I built an app to show you.</h2>
&nbsp;
<h3 class=""section"">実際ブロックチェーンはどうやって動いているのか？説明用のアプリを作ってみた</h3>


&nbsp;

ウィキペディアによれば、ブロックチェーンは
<blockquote>ブロックと呼ばれる継続的に成長するレコードのリストを保持するために
使われる分散型データベースである</blockquote>
とある。
うん、いいね！でもそれはどうやって動くのか？

ブロックチェーンについて説明するには、オープンソースの<a href=""https://github.com/seanseany/blockchain-cli"">Blockchain CLI</a>コマンドラインインタフェースを使うと良いと思う。

私が作ったブラウザで使えるバージョンはここです。
<a href=""http://blockchaindemo.io/"">browser-based version of this here.</a>
<a href=""http://ver-1-0.net/2017/10/18/how-does-blockchain-really-work-i-built-an-app-to-show-you-translate-ja/screen-shot-2017-10-17-at-23-03-09/"" rel=""attachment""><img class=""alignnone size-full wp-image-872"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-17-at-23.03.09.png"" alt="""" width=""702"" height=""510"" /></a>


<h3 class=""section"">コマンドラインインターフェースバージョンをインストールする</h3>


&nbsp;

まだ、
自分の環境にNode.jsがインストールされてなかったら、
インスートールしてください、
それから、ターミナルで下のコマンドを実行します。
<pre><code>
npm install blockchain-cli -g
blockchain
</code></pre>
コマンドを実行すると
? Welcome to Blockchain CLI!　と bloackchain →
というプロンプトが現れるでしょう。

&nbsp;
<h3 class=""section"">ブロックがどのように見えるか？</h3>


&nbsp;

ターミナルの今のブロックチェーンを見るには、
<pre><code>blockchain</code></pre>
か
<pre><code>bc</code></pre>
をターミナルに
打ち込みます。
下のように見えるはずです。

<a href=""http://ver-1-0.net/2017/10/18/how-does-blockchain-really-work-i-built-an-app-to-show-you-translate-ja/screen-shot-2017-10-17-at-23-02-02/"" rel=""attachment""><img class=""alignnone size-full wp-image-871"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-17-at-23.02.02.png"" alt="""" width=""710"" height=""496"" /></a>
<ul>
 	<li>Index (Block#) : それがどのブロックか（ジェネシスブロックのindexは0)</li>
 	<li>Hash : そのブロックが妥当か？</li>
 	<li>　 Previous Hash : 前のブロックが妥当か？</li>
 	<li>Timestamp:いつブロックが追加されたか？</li>
 	<li>Data: どんな情報がブロックに保持されているか？</li>
 	<li>Nonce: 妥当なブロックを見つけるまでに何回イテレートしたか？</li>
</ul>
<b>Genesis Block (ジェネシスブロック）</b>
全てのブロックチェーンはGenesis Blockから始まります。
あとで見るように、各ブロックチェーンのブロックは前のブロックに依存している。
そのため、Genesis Blockは最初のブロックとして採掘される必要がある。

&nbsp;
<h3 class=""section"">新しいブロックが採掘される場合に何が起きるか？</h3>


&nbsp;

最初のブロックを採掘してみましょう。mine freeCodeCamp♥︎と打ち込んでみてください。

そのブロックはブロックチェーン場での最新のインデックスと前のブロックのハッシュを
みています。このジェネシスブロックのケースでは最新のブロックは、
<ul>
 	<li>Index (Block#) : 0 + 1 = 1</li>
 	<li>　 Previous Hash : 0000018035a828da0…</li>
 	<li>Timestamp:ブロックが追加されたタイムスタンプ</li>
 	<li>Data: freeCodeCamp♥︎</li>
 	<li>Hash : ??</li>
 	<li>Nonce: ??</li>
</ul>
<h3 class=""section"">ハッシュがどのように計算されているか？</h3>


&nbsp;

ハッシュ値は一意にデータを識別する固定長の数字の値です。

そのハッシュはインデックスと前ブロックのハッシュ値、タイムスタンプ、ブロックの値と
ナンスを足したものから計算される。
<pre><code>CryptoJS.SHA256(index + previousHash + timestamp + data + nonce)</code>
</pre>
SHA256アルゴリスムはこれらの与えられたものから一意なハッシュを計算します。
同じ入力値からは常に同じハッシュが返却されます。

&nbsp;
<h3 class=""section"">ブロックのハッシュの頭につく4つの0</h3>


&nbsp;

先頭の0は有効なハッシュに最低限必要なものです。
その必須の数字はdifficultyと呼ばれます。
<pre>function isValidHashDifficulty(hash, difficulty) {
  for (var i = 0, b = hash.length; i &lt; b; i ++) { if (hash[i] !== '0') { break; } } return i &gt;= difficulty;
}
</pre>
これは<a href=""https://en.wikipedia.org/wiki/Proof-of-work_system"">Proof-of-Work system</a>としても知られています。

&nbsp;
<h3 class=""section"">nonce（ナンス）とは？</h3>
&nbsp;

nonce（ナンス）は妥当なハッシュを見つけるたみに使われる数字です。
<pre><code>let nonce = 0;
let hash;
let input;
while(!isValidHashDifficulty(hash)) {     
  nonce = nonce + 1;
  input = index + previousHash + timestamp + data + nonce;
  hash = CryptoJS.SHA256(input)
}
</code></pre>
そのナンスはハッシュが有効になるまでイテレートされます。
このケースでは、有効なハッシュは最低限先頭に4つの0をもつ必要があります。

その有効なハッシュに一致するナンスを見つける過程がマイニングです。

difficultyが増加すると、有効なハッシュである可能性の数字が減ります。
有効となる可能性が低ければ低いほど、ハッシュを見つけるためにより多くの電力を必要とします。

&nbsp;
<h3 class=""section"">なぜこれが重要なのか？</h3>
&nbsp;

これらの作業はブロックチェーンが改ざんできなくするのに重要です。

もし、私たちがA-&gt;B-&gt;Cというブロックチェーンを持っていて、
誰かがブロックAを変更した場合に、以下のことが起こります。
<ol>
 	<li>ブロックAが変更される</li>
 	<li>そのデータはハッシュの計算に使われるのでブロックAのハッシュ値が変更される</li>
 	<li>そのハッシュはもはや先頭4つの0を持たないので、不正なハッシュとなる</li>
 	<li>ブロックAのハッシュはブロックBのハッシュを計算するのに使われているので、
ブロックBのハッシュも変更されます</li>
 	<li>ブロックBのハッシュも先頭4つの0を持たないので、ブロックBが不正になります</li>
 	<li>ブロックBのハッシュはブロックCのハッシュを計算するのに使われるので、
ブロックCのハッシュが変わります。</li>
 	<li>ブロックCのハッシュも先頭4つの0を持たないので、ブロックCが不正になります</li>
</ol>
<span style=""text-decoration: underline;""><em>ブロックを変更させるたった一つの方法は、再びブロックを採掘する方法です。
そして、そのあと全てのブロックを採掘する必要があります。
新しいブロックは常に追加され続けるので、ブロックチェーンを改ざんすることは
ほぼ不可能となります。</em></span>

このチュートリアルがあなたに役立ちますように！

もしWebバージョンのでもを確認したい場合はこちらのリンクにお進みください。
<a href=""http://blockchaindemo.io"">http://blockchaindemo.io</a>

&nbsp;

&nbsp;

<div class=""cstmreba""><div class=""booklink-box""><div class=""booklink-image""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4798151343/llg01-22/"" target=""_blank"" rel=""nofollow"" ><img src=""https://images-fe.ssl-images-amazon.com/images/I/51ZDMhsrXWL._SL320_.jpg"" style=""border: none;"" /></a></div><div class=""booklink-info""><div class=""booklink-name""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4798151343/llg01-22/"" target=""_blank"" rel=""nofollow"" >はじめてのブロックチェーン・アプリケーション Ethereumによるスマートコントラクト開発入門 (DEV Engineer's Books)</a><div class=""booklink-powered-date"">posted with <a href=""https://yomereba.com"" rel=""nofollow"" target=""_blank"">ヨメレバ</a></div></div><div class=""booklink-detail"">渡辺 篤,松本 雄太,西村 祥一,清水 俊也 翔泳社 2017-08-03    </div><div class=""booklink-link2""><div class=""shoplinkamazon""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4798151343/llg01-22/"" target=""_blank"" rel=""nofollow"" >Amazonで購入</a></div><div class=""shoplinkkindle""><a href=""http://www.amazon.co.jp/exec/obidos/ASIN/B07416W2PY/llg01-22/"" target=""_blank"" rel=""nofollow"" >Kindleで購入</a></div><div class=""shoplinkrakuten""><a href=""https://hb.afl.rakuten.co.jp/hgc/163854b7.d97e8d5b.163854b8.3c41ae34/?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F15008160%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F"" target=""_blank"" rel=""nofollow"" >楽天ブックスで購入</a></div><div class=""shoplinkseven""><a href=""https://px.a8.net/svt/ejp?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2&a8ejpredirect=http%3A%2F%2F7af-ent.omni7.jp%2Frelay%2Faffiliate%2FentranceProcess.do%3Furl%3Dhttp%253A%252F%252F7net.omni7.jp%252Fsearch%252F%253FsearchKeywordFlg%253D1%2526keyword%253D4-79-815134-2%252520%25257C%2525204-798-15134-2%252520%25257C%2525204-7981-5134-2%252520%25257C%2525204-79815-134-2%252520%25257C%2525204-798151-34-2%252520%25257C%2525204-7981513-4-2"" target=""_blank"" rel=""nofollow"" >7netで購入</a><img border=""0"" width=""1"" height=""1"" src=""https://www17.a8.net/0.gif?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2"" alt=""""></div>            	  	  	  	</div></div><div class=""booklink-footer""></div></div></div>

&nbsp;
<h3 class=""section"">CoinCheckで暗号通貨を買う</h3>
<a href=""https://coincheck.com/?c=afN9tU3-OPY"" target=""_blank"" rel=""noopener noreferrer""><img src=""https://coincheck.com/images/affiliates/03_cc_banner_300x250.png"" alt=""ビットコイン取引高日本一の仮想通貨取引所 coincheck bitcoin"" /></a>"
"520","2017-07-17 01:02:05","2017-12-22 22:51:08","せっかく買った本を読みきれない・途中飽きてしまう方にオススメ - つまみ読み","how-to-avoid-tsundoku","http://ver-1-0.net/wp-content/uploads/2017/07/6f154d9a74891eef9565aadd157b28e9_s.jpg","%e6%9c%ac%e6%a3%9a","どーも、
暑さに耐えきれず
早起きをしてしまった
<a href=""https://twitter.com/version1_2017"">@version1</a>です。

&nbsp;
[adsense]
&nbsp;
最近では、KindleでもiBookでも
電子書籍の購入がクレカさえ登録すればボタン一つで
簡単に購入できるようになってて、
1000円程度の購入のハードルがかなり下がって来ていますね。

が、

その気軽さに反して、
それを読むの自体は根気や集中力がかなり必要な本
を読むことも必要になって来ます。

その結果、
私の中では最近
&nbsp;
<h3>本を読みきれない・飽きる<br>→別の本を買う<br>→読みきれない・飽きる</h3>
という負のスパイラルがまわり始めてしまっています。。
&nbsp;

そこで、
今回はこれを解消すべく対策を考えてみました。

&nbsp;

<h2 class=""chapter"">本を読みきれない・飽きる原因の考察</h2>

考察というほどではないですが、
原因としては、
&nbsp;
<h4>①読むのに集中力が必要で理解せずに読み進めてしまい、
後から集中し直して読み返す必要が生じるので時間がかかる。</h4>
&nbsp;
<h4>②一番最初から読み進めていると自分の知りたい情報ではない
余計な情報も入ってくるので飽きる。</h4>
&nbsp;
というのがあるかと思っています。
&nbsp;
[adsense]
&nbsp;

はっきり行ってできる人はできるのかもしれませんが、
ある程度理解に集中力のある文章になると
集中力を持って読み進められるのは、
一章分（だいたい200P)くらいです。

個人差があるかとは思うのですが、
私の場合それ以上になると
<strong>「目では追っていても頭に入ってこないモード」</strong>
にだんだんと突入して行きます。

そこでその本を読むことへの意義を失って読むのに
苦痛を感じ始め読むのをやめてしまうというのが
私の失敗パターンです。
&nbsp;
&nbsp;

<h2 class=""chapter"">読みきれない・飽きない本の読み方　つまみ読み</h2>
&nbsp;
&nbsp;
上に書いた失敗パターンを
繰り返していてはダメなのでこれを解消する方法を探究したところ、

&nbsp;
<strong>「つまみ読み」</strong>という答えに辿りつきました。

<blockquote>困難は分割せよ -ルネ・デカルト</blockquote>

デカルトが言うように、
困難を分割してメリハリのついた読書を提案します。

方法としては、

<blockquote>
①冒頭・導入の章を読んでその本が言おうとしていることを何となく理解する。
&nbsp;
②目次に目を通して自分の興味のあるタイトルの章を見つける。
&nbsp;
③興味のある章を読む
&nbsp;
④②③を繰り返す。
&nbsp;
⑤興味のない章だけになったら他は読まず次の本に移る。
</blockquote>

となります。

①で冒頭を読むのは、
さすがに全体像を掴んでおかないとどこ読んでも話がわからないので
冒頭から数章くらいは
読み進めます。
&nbsp;
②興味のある章を見つけると書きましたが、
これは集中力の続く範囲の単位として章が良いかなということなので、
これより小さい単位でやっても特に問題は
ないと思います。
&nbsp;
⑤の興味のない章だけになったら他は読まずに次の本に移る。
としましたが、興味のない章、ひっかからない章については特に
読む必要がないと思っています。
自分のほしい情報を得るために本を読んでいるので、
それ以外を読むのは基本的に時間の無駄です。
&nbsp;
ただ、
自分の欲しい情報というのは時間と共に変化するので、
後日、日を置いて、再度章を眺めてみるというのも良いと思います。

&nbsp;
この方法を実践することで、

<strong>・冒頭から読み進めた結果、力つき終わりの方の筆者の言いたいことや、
読んでいれば自分に関心あることに辿り着けずに飽きてしまうということを回避できる</strong>

<strong>・自分の集中力の範囲で読み進めるので、メリハリがある読書ができ、
思考が進みやすい。</strong>

<strong>・全て読まなければならないという心理的ハードルを下げるので、読むのが億劫にならない</strong>

というメリットがあります。
&nbsp;

<h2 class=""chapter"">読みきれない・飽きない本の読み方　まとめ</h2>
&nbsp;
&nbsp;
以上、自分の悩みを元に解決策を練ってみました。
もし、良さそうであれば
ぜひ試して見てください。

少し話はずれますが、
人間には誰にも先入観があるので、
最初に本を読んだ時に入ってくる情報と2回目に読んだ時、3回目に読んだ時で
得られる情報が違い、
何回も読み返すほどより自分の先入観から離れた情報が
入ってきやすくなるそうです。

自分が読んでみて良いなと思った本は、
この記事で紹介したつまみ読みの方法と読み返すという
ことをして、
効率よく情報を吸収できるようになると
良いですね！

以上、
日々の読書の参考にしていただけたら幸いです。

&nbsp;
&nbsp;
&nbsp;

↓オススメの本です。
この本では成功にはやり抜く力が大切だと説いています。

ただの「気合い・根性」などの話ではなく、
「何をやり抜くべくか？」についても言及し、
やり抜く力の重要性を事象観察を元にロジカルに説明しています。

<a href=""http://amzn.to/2tubs9V"">やり抜く力 GRIT(グリット)――人生のあらゆる成功を決める「究極の能力」を身につける</a>
<a href=""https://www.amazon.co.jp/%E3%82%84%E3%82%8A%E6%8A%9C%E3%81%8F%E5%8A%9B-GRIT-%E3%82%B0%E3%83%AA%E3%83%83%E3%83%88-%E4%BA%BA%E7%94%9F%E3%81%AE%E3%81%82%E3%82%89%E3%82%86%E3%82%8B%E6%88%90%E5%8A%9F%E3%82%92%E6%B1%BA%E3%82%81%E3%82%8B-%E7%A9%B6%E6%A5%B5%E3%81%AE%E8%83%BD%E5%8A%9B-%E3%82%92%E8%BA%AB%E3%81%AB%E3%81%A4%E3%81%91%E3%82%8B-%E3%82%A2%E3%83%B3%E3%82%B8%E3%82%A7%E3%83%A9-%E3%83%80%E3%83%83%E3%82%AF%E3%83%AF%E3%83%BC%E3%82%B9/dp/4478064806/ref=as_li_ss_il?ie=UTF8&qid=1500220410&sr=8-1&keywords=%E3%82%84%E3%82%8A%E6%8A%9C%E3%81%8F&linkCode=li3&tag=llg01-22&linkId=393a04ef142d2926fbb8fe99d81c540e"" target=""_blank""><img border=""0"" src=""//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=4478064806&Format=_SL250_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=llg01-22"" ></a><img src=""https://ir-jp.amazon-adsystem.com/e/ir?t=llg01-22&l=li3&o=9&a=4478064806"" width=""1"" height=""1"" border=""0"" alt="""" style=""border:none !important; margin:0px !important;"" />
"
"2377","2018-11-26 10:25:07","2018-11-26 10:25:07","フリーランスエンジニアなるには？ソフトランディング戦略でいってみよう","how-to-be-enginner","https://ver-1-0.net/wp-content/uploads/2018/11/softlanding.jpg","freelance","&nbsp;

どうも、フリーランスのエンジニアをしております。<a href=""https://twitter.com/version1_2017"">version-1</a>です。

そろそろフリーランスになって一年が立とうとしているので、フリーランスのなり方みたいなところを書いてみたいと思います。

フリーランスのなり方みたいなところはネット上にたくさんの記事が乗っていますが、リアルな世界で割と「フリーランスってどうやってなるんですか？どうやって仕事とってるんですか？」のような質問されることが多いので改めてまとめておこうかなとおもいました。

一応簡単に経歴を説明するとSIer二年半ののちに、事業会社の社内エンジニアを経て昨年独立して、現在はRails, React/Vueなどの技術をメインに自社サービスを開発している会社様のお仕事を手伝わせていただいているような形になっています。

幸いなことに、フリーランス一年目から収入的には安定し、月ごとの売り上げが乱高下することなく徐々に上がってきていて、フリーランスのスタートととしてはまずまずの成果があげられたのかなと思っているので、自分がフリーランスとして安定的に仕事をとれるまでどういう意識で取り組んでいたかを書いていきたいと思います。

&nbsp;
<h2>ソフトランディング（やわらかな着地）戦略とは？</h2>
<img class=""alignnone size-full wp-image-2384"" src=""https://ver-1-0.net/wp-content/uploads/2018/11/luggage-1799224_640.jpg"" alt=""ソフトランディング"" width=""640"" height=""436"" />

&nbsp;

これはタイトルに書いて「？？？」となった人もいるかとおもうのですが、勝手にわかりやすいように名前をつけました。

これは特段特別なことはなく、

<strong>フリーランスの最初のうちは、エージェントなどを使って常駐型の案件を獲得して正社員の時とあ</strong><strong>まり変わらない状態ではじめよう</strong>

というとことです。

要は「フリーランスになる！」とかいって思いっきり覚悟決めて、今までリモートとか全然やったことがないのにリモートの案件しか探さない。エージェントに仲介手数料とられるのがいやだから最初から不慣れな直契約を獲得のために動く。などの<strong>フリーランスっぽい感じをいきなり目指さない</strong>ということです。

フリーランスになる方はやはり自由な働き方や高単価を求めていることが多いと思いますが、いきなりそこを目指すよりは徐々にそこに近づいていくというのが現実的で精神的に負担が少ない戦略なのかなと思っています。

実際私自身もフリーランスになる前に、知り合いのエージェントさんに相談してこれくらいの経歴であればフリーランスでもいけますよ。と言われたのでそこから常駐の案件に参画して、10ヶ月くらいかけてフルリモートにシフトしていきました。

正直なところ、常駐型のフリーランスのエンジニアになると正社員と変わるのは単価とかくらいなのでフリーランスになってからも正社員の時と同じような形ではたらけてあまり変化はないです。

ここに安住してしまうのはよくないですが、フリーランスになって最初はやはり不慣れなことも多いので劇的に環境を帰るのではなくこういった周りのサポートを受けやすいような形でソフトランディングしていけば良いのではないでしょうか？

&nbsp;
<h2>エージェントを使用するか？知り合いつたいか？</h2>
<img class=""alignnone size-full wp-image-2385"" src=""https://ver-1-0.net/wp-content/uploads/2018/11/figures-1372458_640.jpg"" alt=""エージェントか知り合いか"" width=""640"" height=""326"" />

フリーランスエンジニアになる文脈でエージェントに紹介してもらうのか、知り合いに紹介してもらうのかといった話はありますが、<strong>個人的にもともとベンチャー、スタートアップでバリバリ仕事していてい知り合いがたくさんいるとかでなければエージェントを利用してスタートをするのが得策です。</strong>

エージェントさんを利用すると企業側から支払われる一定の割合がエージェントさんの取り分となるわけで、相対的に直契約に比べて個人事業主側の取り分が少なくなりがちです。ここはデメリットに思われる方も多いの方思うのですが、やはりある程度しっかりしたエージェントさんに紹介してもらえる企業というのはビジネスなどトータルでみてしっかりしている企業さんをチョイスして紹介してもらえるので十分にエージェントさんを利用する価値はあります。

特にフリーランス始めたての頃というのは、<strong>フリーランス同士のつながりみたいなのも少ないことが多いので最初の案件でしっかりした企業さんのプロジェクトに参画して繋がりを作れると良いのではないでしょうか？</strong>私もフリーランスとして最初に受けた案件は常駐の仕事でしたが、現場には同じようなフリーランスの方もいてそこで知り合いになれたり、企業の中のエンジニアと知り合えたりというのができて大変よかったです。

知り合いつてでフリーランスを始めるのも良いのですが、自分の知り合いで成長段階の企業である程度社員もいて体制が整っている、最新の技術をキャッチアップしているという人と知り合いであることは少ないので、そういった会社とのコネクションを持っているエージェントに頼るというのは全くおかしいことではありません。

<a href=""https://px.a8.net/svt/ejp?a8mat=2ZAXFD+FJ244Q+2JK4+1TIR4H"" target=""_blank"" rel=""nofollow noopener"">
<img src=""https://www24.a8.net/svt/bgt?aid=180228793939&amp;wid=004&amp;eno=01&amp;mid=s00000011866011005000&amp;mc=1"" alt="""" width=""350"" height=""240"" border=""0"" /></a>
<img src=""https://www18.a8.net/0.gif?a8mat=2ZAXFD+FJ244Q+2JK4+1TIR4H"" alt="""" width=""1"" height=""1"" border=""0"" />
<h2>参画案件の成長性って関係あるの？</h2>
<img class=""alignnone size-full wp-image-2386"" src=""https://ver-1-0.net/wp-content/uploads/2018/11/question-mark-2123967_640.jpg"" alt=""Question"" width=""640"" height=""387"" />

こういう話をしていると

「業務委託でちゃんと支払いだけもらえれば、企業の成長とかはスコープ外だ」

ということを言われる方もいるかとは思うのですが（個人的にはあまり同意できない意見です）、やはり組織としてある程度成熟しているか成長している会社でないとエンジニアとしての普段の業務にも支障がでてきます。

やはりエンジニアですと自分の作った機能は使ってもらいたいですし、使われるかどうかわからない機能は実装したくないと思うのですが、マーケティング体制などが弱く感覚で機能を実装するやりがいを感じられないような所にいると徐々に開発へのモチベーションが下がってきたりすることも往々にあります。

また、ある程度小さな会社だと多めにみる部分はありますが、社員の出入りの激しい現場では開発へのノイズも多いです。

個人的な肌感ではあるのですが、エージェントさんから紹介される企業はやはり売り上げや成長性などもしっかりあり組織としても強い印象があるのでフリーランスの始めのほうにそういった会社さんで働かれるのをオススメします。

正社員の転職でもある程度名の知れた企業につとめていた人が転職の時に有利になるのと同様にフリーランスでも前の現場の実績が評価されるのである程度しっかりした会社の案件に参画するというのは後のフリーランス人生を考えても有利に働きます。

&nbsp;
<h2>常駐型案件に入ったあとは？</h2>
<img class=""alignnone size-full wp-image-2387"" src=""https://ver-1-0.net/wp-content/uploads/2018/11/binoculars-1209011_640.jpg"" alt=""feature"" width=""640"" height=""426"" />

ここまでの戦略を実践して、常駐型案件に入った後の話ですが最初の案件で徐々にリズムが掴めてきたらだんだんと<strong>自分のやりたい方に近づけるためのアクションをとれると良いのでしょうか？</strong>

私の場合は、働く際の場所への依存を一回取り払いたかったのと単価をあげたかったので常駐案件は週4日程度に抑えて並行で案件を探して、見つけた週二の案件を同時に並行して行いました。この週二の案件はリモートだったのですが、エージェントさんの案件ではまだまだリモートができるかつ週二、三日でOKな案件はまだまだ少ないのでフルリモートを目指される方は常駐の案件をベースに個人で（エージェントを使わずに）リモートの案件を探されると良いです。

リモートの案件の獲得のために使える手段としてはは、twitter、ブログ、各種勉強会やミートアップ、同じ現場の人の知り合い、前の職場の同僚などではないでしょうか？

私の場合はこのブログでの案件を獲得した実績もあり、そこまで多くに読まれるブログでもないのですが一定数スカウトのメールみたいなものは届くのでブログの更新というのは割とオススメの方法です。

ここでは、リモート案件獲得についてしかいていないですが他にもエンジニア以外の仕事をやりたい！などなど色々な方向性はあるのである程度フリーランスに慣れてきた所でつぎのアクションをとり徐々に目標に近づけていくという戦略をとってみるのをオススメします。

&nbsp;

&nbsp;
<h2>まとめ</h2>
&nbsp;

ここまでソフトランディング戦略という勝手に名付けた方法について説明しましたが、いかがだったでしょうか？

簡単にまとめると
<ol>
 	<li><strong>エージェントを利用して常駐型案件獲得</strong></li>
 	<li><strong>並行して別案件を探す</strong></li>
 	<li><strong>自分の目指したい方向性をめざしてアクションをとる。(リモート案件や高単価案件など）</strong></li>
</ol>
となります。難しいことはないです。ただたソフトランディングしていきましょうということです。

また、書いてみて気づいたのですが、これはここまでに僕がとった戦略を説明しただけで必勝法でもなんでもなくある意味ポジショントークです笑。

とはいえ、一年という短い期間ですがここまで大きなストレスやブラック化することなく続けられている一定の成果が期待される方法ですので一つのモデルケースとして記憶にとどめておいて頂ければと思います。

&nbsp;

&nbsp;"
"633","2017-09-03 13:53:42","2018-08-25 22:20:02","自分の名前を晒すのやめましょう。。 iPhoneのSSIDの変更のしかた","how-to-change-ssid","http://ver-1-0.net/wp-content/uploads/2017/09/b947d5d5e70c0ece0f904cc0e05b6995_s.jpg","for-beginner","&nbsp;

どうも、
平日の寝不足が休日に繰り越されている
<a href=""https://twitter.com/version1_2017"">@version1</a>です。
眠い。。
そんなどうでも良いことは
置いておいて
最近こんなツイートをしてみました。

<img class=""alignnone size-full wp-image-636"" src=""http://ver-1-0.net/wp-content/uploads/2017/09/スクリーンショット-2017-09-03-12.11.09.png"" alt=""tweet-about-ssid"" width=""610"" height=""194"" />

&nbsp;
<h2 class=""chapter"">iPhoneのSSIDに名前が含まれる人は変更しましょう</h2>
&nbsp;

<a href=""https://twitter.com/version1_2017"">@version1</a>
は、
普通に電車で通勤しているのですが、
電車の中で携帯をいじっていると
勝手に携帯がアクセスポイントを探し始める時が
あります。

&nbsp;

そこで最近気づくのですが、
<h3>「〇〇（人の名前）のiPhone」</h3>
みたいな
SSIDの人がちょこちょこいます。

おそらく、
iPhoneを買った後の
初期設定のままなのでしょう。。。

&nbsp;

それだけでは、
個人は特定は難しいのですが、
例えば、
車内に女性が一人で「〇〇（人の名前）のiPhone」というのが
女性の名前だったら簡単に
その人の個人名がバレてしまいます。

&nbsp;

そこまで警戒しなくても。。。
というのは
あるかとも思うのですが、
知っていて個人の名前を公開しているのと
知らないのとでは大きな違いがあるので、
一応このブログで<strong>注意喚起</strong>しておきます。

&nbsp;
<h2 class=""chapter"">そもそもSSIDって何？？？</h2>
&nbsp;

知らない方の為に書いておきますと、
SSIDとは、
WI-FIのアクセスポイントを識別するためのID
になります。

街中でWiFiをオンにすると、
接続できるアクセスポイントの名前がずらっとリスト
で表示されると思いますが、
それのことです。

&nbsp;
<h2 class=""chapter"">SSIDの変更の仕方</h2>
&nbsp;

本当に簡単なので
これを見たらすぐに変更しましょう
<h3>①iPhoneホーム画面より「設定」（灰色の歯車のアイコン）をタップ</h3>
&nbsp;

&nbsp;
<h3>②リストより「一般」を選択
<img class=""alignnone size-large wp-image-639"" src=""http://ver-1-0.net/wp-content/uploads/2017/09/IMG_3109-577x1024.png"" alt="""" width=""577"" height=""1024"" /></h3>
<h3></h3>
<h3>③「情報」をタップ
<img class=""alignnone size-large wp-image-642"" src=""http://ver-1-0.net/wp-content/uploads/2017/09/IMG_3110-577x1024.png"" alt="""" width=""577"" height=""1024"" /></h3>
&nbsp;
<h3>④「名前」をタップ
<img class=""alignnone size-large wp-image-641"" src=""http://ver-1-0.net/wp-content/uploads/2017/09/IMG_3111-577x1024.png"" alt="""" width=""577"" height=""1024"" /></h3>
&nbsp;
<h3>⑤端末の名前が表示されるのでここで自分の好きな名前に変更
<img class=""alignnone size-large wp-image-640"" src=""http://ver-1-0.net/wp-content/uploads/2017/09/IMG_3112-577x1024.png"" alt="""" width=""577"" height=""1024"" /></h3>
以上、
1分かからずにできる手順です。

&nbsp;

&nbsp;

繰り返しになりますが、
本当に簡単に変えられるので
これを機に設定を変更しておきましょう。"
"356","2017-05-11 00:34:36","2018-08-26 12:04:44","Rails で Ajaxかどうかを見分ける方法 ( Ajaxで .html.erbが読み込まれるのを防ぐ）","how-to-check-if-ajax","http://ver-1-0.net/wp-content/uploads/2017/01/5ntkpxqt54y-sai-kiran-anagani.jpg","engineering::::rails","&nbsp;

Railsでajax送信でポップアップを表示する場合、

&nbsp;

通常は、*.js.erb などが読み込まれるのですが、
ページ内のリンクやボタンではなく、
URLを直打ちなどした場合に

&nbsp;

Controllerが通常のリクエスト通り、
*.html.rbファイルを読み込んでしまい
MissingTemplateになってしまうといった場合があると思います。

&nbsp;
[after_intro]
&nbsp;

これを避けるには
Ajaxのリクエスト　→ 通常通り
それ以外 → 元のページにリダイレクト
のようにするのが有効です。
<pre><code class=""language-ruby"">class ExamplesController &lt; ApplicationController

  def index 
      unless request.xhr?
         redirect_to [ 元のページ　]
      end 
  end
end

</code></pre>
&nbsp;

コードでは、
以下でAjaxリクエストかどうか判定しています。

&nbsp;
<pre><code class=""language-markup"">request.xhr?
</code></pre>
&nbsp;

&nbsp;
ちなみにPOST/GETの判定は
<pre><code class=""language-markup"">request.get?
request.post?
</code></pre>

でできます。
"
"1152","2017-11-06 10:46:11","2018-08-26 10:55:00","WordPressプラグイン作り方。プラグイン開発の始め方","how-to-develop-wp-plugin","https://ver-1-0.net/wp-content/uploads/2017/11/223395ae7cd150697858d397130d03f0_s.jpg","engineering","&nbsp;

&nbsp;

WordPressプラグインは簡単に作れます。

人気のプラグインのように高機能なものは
もちろん開発は大変かと思いますが、
自分しか利用しないものや機能の少ないものは
それこそ、<strong>1,2時間などで開発できてしまいます。</strong>

最近の記事で

&nbsp;

これらのような記事も書いていますが、
自分でPHPコードのかける方は、
プラグインを自作してみるのはオススメです。

以下では、
自作プラグインの入り口の部分だけ紹介していきます。

[after_intro]

&nbsp;

&nbsp;

&nbsp;
<h2 class=""chapter"">自作プラグインを設置してみる。</h2>
&nbsp;

&nbsp;

通常WordPressのプラグインは
wp-content/plugins配下にプラグイン単位で配置します。

そして、
WordPressにそのプラグインが存在することを
知らせるためには、
プラグインのメインなファイルにプラグインヘッダを付加して、
そのプラグインの情報を書き出します。

プラグインヘッダというのは、
このような形でメインの<strong>PHPファイルの先頭に</strong>
<strong> コメント形式で情報を記述</strong>することになります。
<pre><code class=""language-php"">&lt;?php
/*
Plugin Name: (プラグインの名前)
Plugin URI: (プラグインの説明と更新を示すページの URI)
Description: (プラグインの短い説明)
Version: (プラグインのバージョン番号。例: 1.0)
Author: (プラグイン作者の名前)
Author URI: (プラグイン作者の URI)
License: (ライセンス名の「スラッグ」 例: GPL2)
*/
</code></pre>
&nbsp;

&nbsp;

プラグインを公開（WordPress.orgの審査が必要）したりすることがなければ、
最低限<strong>PluginNameだけ記載すればインストール済みプラグインの一覧に表示されます。</strong>
<pre><code class=""language-php"">&lt;?php
/*
Plugin Name: My Plugin
 */
</code></pre>
<a href=""https://ver-1-0.net/2017/11/06/wordpress%e3%83%97%e3%83%a9%e3%82%b0%e3%82%a4%e3%83%b3%e4%bd%9c%e3%82%8a%e6%96%b9%e3%80%82%e3%83%97%e3%83%a9%e3%82%b0%e3%82%a4%e3%83%b3%e9%96%8b%e7%99%ba%e3%81%ae%e5%a7%8b%e3%82%81%e6%96%b9/screen-shot-2017-11-06-at-10-04-11/"" rel=""attachment wp-att-1156""><img class=""alignnone size-full wp-image-1156"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/Screen-Shot-2017-11-06-at-10.04.11.png"" alt=""自作プラグイン例"" width=""899"" height=""266"" /></a>

↑My Pluginというプラグインが表示されているのがわかります。

&nbsp;

&nbsp;

他の作者の情報や、プラグインの説明を記載すると
一覧にもヘッダに書いた情報が表示されます。
<pre><code class=""language-php"">&lt;?php
/*
Plugin Name: My Plugin 
Plugin URI: https://ver-1-0.net/2017/11/06/wordpressプラグイン作り方。プラグイン開発の始め方/  
Description: tutorial plugin to learn how we develop plugins. 
Version: 0.1
Author: version1
Author URI: https://ver-1-0.net
License: GPL2
*/
</code></pre>
<a href=""https://ver-1-0.net/2017/11/06/wordpress%e3%83%97%e3%83%a9%e3%82%b0%e3%82%a4%e3%83%b3%e4%bd%9c%e3%82%8a%e6%96%b9%e3%80%82%e3%83%97%e3%83%a9%e3%82%b0%e3%82%a4%e3%83%b3%e9%96%8b%e7%99%ba%e3%81%ae%e5%a7%8b%e3%82%81%e6%96%b9/screen-shot-2017-11-06-at-10-12-29/"" rel=""attachment wp-att-1157""><img class=""alignnone size-full wp-image-1157"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/Screen-Shot-2017-11-06-at-10.12.29.png"" alt=""プラグインヘッダーの例"" width=""895"" height=""275"" /></a>

[mid_article]

&nbsp;

&nbsp;
<h2 class=""chapter"">プラグインの有効化</h2>
&nbsp;

&nbsp;

上の画像ではプラグインの有効化のボタンが
見えますが、自作のプラグインは<strong>wp-contetnt/plugins配下に</strong>
<strong> プラグインを配置したらそのまま有効化して使えます。</strong>

そのため、
先ほどのファイルを
<pre><code class=""language-php"">&lt;?php
/*
Plugin Name: My Plugin 
Plugin URI: https://ver-1-0.net/2017/11/06/wordpressプラグイン作り方。プラグイン開発の始め方/  
Description: tutorial plugin to learn how we develop plugins. 
Version: 0.1
Author: version1
Author URI: https://ver-1-0.net
License: GPL2
*/

function HelloWorld(){
  echo ""Hello World"";
} 
</code></pre>
&nbsp;

&nbsp;

のように変えてあげて、
任意のファイルで
<pre><code class=""language-php"">if( function_exists('HelloWorld'){ HelloWorld();}</code></pre>
の行を追加してしまえば、
そのままファイルに書いた関数を使用できます。
<strong>（プラグインが無効の場合にfunction_existsをつけて置かないとメソッドが見つからないエラーになります）</strong>

&nbsp;

&nbsp;
<h2 class=""chapter"">まとめ</h2>
&nbsp;

&nbsp;

この記事では実際に<strong>""Hello World""を表示させるだけの関数を導入した</strong>だけでした。

実際に人気のプラグインなどを見てみると、
<strong>設定用の管理画面があったり、ウィジェットがあったりと</strong>
<strong> より高機能</strong>ですが、
プラグイン開発の導入としてはそこまで難しくないということが
わかります。

<strong>ディレクトリ配置してプラグインの情報を書くだけ</strong>ですからね。
個人利用のプラグインであれば、
<strong>最低源自分の必要な機能だけ関数として実装して、</strong>
<strong> 設定画面とかは作らない</strong>とかもありです。

またまた、
これがわかれば<strong>自作の関数を、function.phpに書くのでなく</strong>
<strong> プラグインとして定義するとかも可能ですね。</strong>

とりあえずのところは、
この導入部分だけわかっていても十分役に立つと思ったので、
紹介しました。

今後<strong>設定画面の作り方</strong>なども解説できれば良いなと思っています。

では、以上です。

[after_article]"
"1902","2018-01-31 08:00:38","2018-09-02 13:09:21","AssetPipelineなしでRailsのモデルのデータをReactで取得する方法","how-to-get-rails-mode-on-react","https://ver-1-0.net/wp-content/uploads/2018/01/react.png","engineering::::rails","&nbsp;

サーバ側はRailsでフロント側はReactみたいな構成でシステム開発していることってまあまああると思うのですが、

RailsとReactは全く別の機構なのでその間でどういう形でデータのやりとりをしていますでしょうか？

SPAなどでは問答無用でAPIで初期状態も含めてデータを取得してくるようなことをやってくるとは思うのですが、そこまでかっちりReactを使っている訳ではなく、初期状態はRailsでレンダリングして、残りのユーザからの入力などによるViewの変更はReactでみたいなことありますよね。

ただ、AssetPipelineなどを使って入ればrails-reactというgemを使って自動（あまり意識せずに）データを受け渡しできるのですが、そうではない場合にどのようにデータをやりとりするか以下にまとめます。

&nbsp;

[after_intro]
<h2>JavaScriptでDOMをパース</h2>
&nbsp;

上に書いた内容でRails-Reactでデータの受け渡しをする場合は、基本的な考え方としてモデルの内容を一旦json形式に変換して、DOMにレンダリングします。

その処理自体を自分で書いても良いのですがさすがに辛いので、楽して上にも書いた<a href=""https://github.com/reactjs/react-rails""><strong>rails-react</strong></a>のReactComponentヘルパーを使います。このヘルパーの引数にKeyとモデルなどのデータを私てあげるとそれをjson形式に変換してレンダリングしてくれます。

&nbsp;

(例)
<pre><code class=""language-markup"">&lt;div data-react-class=""Settings"" 
data-react-props='{""settings"":[{""id"":72,""user_id"":1,
""space_id"":""space-a"",
""api_key"":""hogehoge""},' &gt;</code></pre>
&nbsp;

実際のモデルだともっと行数が多いのですが、例では簡略化しています。

DOMへのモデルのレンダリングができたらあとはそれをページが描画されたタイミングなどでパースするだけです。

&nbsp;
<pre><code class=""language-javascript"">
function getSettings(selector: string){
  const node = document.querySelector(`div[data-react-class=${selector}]`)
  const json = JSON.parse(node.getAttribute('data-react-props'))
  return json
}</code></pre>
&nbsp;

こんな感じのメソッドを定義してあげて使い回せばjavascript側でも無事Railsのモデルのデータを取得ができます。

RailsとJavaScriptを確実に分けて開発したい！asset pipelineは使わないという主義の人はこうやって見ると良いかもしれません。

[after_article]"
"694","2017-09-23 13:26:40","2018-08-25 22:20:20","日本の残業代は安い？残業時間を減らす方法を考えてみた。","how-to-reduce-overwork","http://ver-1-0.net/wp-content/uploads/2017/09/828af34190a7b8a58fffa69126733e6b_s.jpg","colum::::freelance","&nbsp;

&nbsp;

昨今働き方改革で、

残業時間削減というのが
色々言われていますが、


&nbsp;

個人的には、
やはり労働時間を伸ばして成果を
出すということは、

職場に人を拘束して
本業以外に興味のあることに関する知識を
身につけたり、
他の生産的な活動に割ける時間
を奪うという点ではあまり賛成できません。
（だって会社で使っているプログラミング言語とか
技術しか使えないってあまり面白くないですよね。。）

&nbsp;

なので、
残業時間を減らす方法を
考えてみました。


&nbsp;

私はエンジニア歴4年ほどに
なるのですが、
残業の多い現場、少ない現場両方
を経験してきました。

&nbsp;

残業の多い現場は
タスクの量が多くマネージャーが
仕事量の調整をせず、
(顧客からの要望を断れない、最初に依頼を受けた段階で作業量を調整しない)
メンバー全員がその負担を負うということが多かったです。

&nbsp;

一方残業が少ない現場は
かなり、
マネージャーが意識を持ってやっていました。

そこの現場は
週に二回定時退社の日が決まっていて、
あらかじめ残業申請をしないと
残業させてもらえない。
サイレント残業は怒られるという感じで。。

（ただ決して日中の仕事が楽ということではなく、
後ろが決まっている分日中は
かなり集中力高く持って
やらないといけませんでしたが・・）

&nbsp;

まぁこれは
私の体験談で現場レベルの
話なのですが、
私は
<h2>「残業代の割増率をあげる」</h2>
という方法を考えてみました。

&nbsp;

[adsense_double_rect]

&nbsp;
<h2 class=""chapter"">残業を減らすためにはトップ層の意識改革が大事</h2>
&nbsp;

先ほどの経験を基に

考えると
やはりトップ層の人が
<strong>「どれだけ残業時間の削減に本気になるのか」</strong>
というところがポイントになると考えています。
（労働時間だけ減らして丸投げみたいなのもあるのでw )

&nbsp;

多くの企業が
トップ層が会社の方向性を決めて
プロジェクトを割り出すと思うのですが、
そこで作り出した作業がそもそも、
社員の所定労働時間内で終わるものになっていない
あるいは、
作業がブレイクダウンされるうちに作業が増え結果的に
労働時間が長くなると言えます。

では、
なぜこのタスクの総量を社員全体の
定時内でこなせるようにしたり、
収まっているか気を配らないのかというと

トップ層の頭の中で
<h3>残業代を払って働いてもらう &gt; 残業代はコストがかかるので残業させない</h3>
&nbsp;

となっているからではないでしょうか。
そこで私は
この<strong>残業代を引き上げて残業させるコスト</strong>を
高めればトップ層が本気で
<strong>労働時間削減・効率向上</strong>を考え始めると
思っています。

&nbsp;
<h2 class=""chapter"">日本の残業代は安い？</h2>
&nbsp;

日本の残業の割り増し率は
<strong>25%</strong>ですが、
海外と比べると、
割り増し率が低いようです。

&nbsp;

同じアジア、
ベトナムでは、
残業の割り増し率は<strong>50パーセント</strong>
休日だと<strong>100パーセントの2倍。</strong>
休日深夜<strong>2.7倍</strong>
となっているそうです。

↑勉強会で聞いた話ですが、
一応参考情報も載せておきます。
<a href=""https://iconic-intl.com/employers/pages/working-holiday"">
https://iconic-intl.com/employers/pages/working-holiday</a>

&nbsp;

インドネシアでは、
最初の一時間が1.5倍、
二時間目以降が<strong>なんと2.0倍</strong>

↑こちらは実際に仕事でインドネシア行った時に聞いた話ですが
こちらも参考情報も載せておきます。
<a href=""https://www.jetro.go.jp/ext_images/jfile/country/idn/invest_05/pdfs/idn10C010_genchijinnokoyou.pdf"">https://www.jetro.go.jp/ext_images/jfile/country/idn/invest_05/pdfs/idn10C010_genchijinnokoyou.pdf</a>

インドネシアで
働いた経験があるので、
なんとなくわかるのですが、
現地の同僚は、
定時になったらさっさと帰ってしまいます。

文化や習慣の違いも
あるのかとは思うのですが、
ここまで残業代にコストがかかると
あえて残業させる気にもならない気がします・・・

&nbsp;

&nbsp;
<h2 class=""chapter"">まとめ</h2>
以上見てきてたように
残業代をあげると

トップ層の気持ちが以下のように
変わってくれるのではないでしょうか
<h3>残業代を払って働いてもらう &lt; 残業代はコストがかかるので残業させない</h3>
&nbsp;

経営層の意識が変われば
それまでが嘘みたいに
会社の雰囲気が代わります。

&nbsp;

ただ、
「残業代を払わない」
「残業代の割増率を考慮して基本給を下げる」
などの会社に
対してはあまり効果はないかもしれないですね。。。

&nbsp;

「残業代を払わない」
これは、
ちょっと・・・
別の対策を考えないとダメですね。
完全にブラックとして

&nbsp;

「残業代の割増率を考慮して基本給を下げる」
これは、
実際やってみないとという話ではあるのですが、
基本給を下げるというのは
募集が集まりづらくなるという
のがあるので、
あまりやらないのではと考えています。

&nbsp;

労働時間削減の話は
終わりの時間を決めて
「20時には消灯させる」
「週に一度は定時退社日を作る」
など
の時間的アプローチが多い気がするのでは、

「こういうアプローチの仕方もあるのでは？」
ということを書かせてもらいました。

以上です！！


&nbsp;

<a href=""http://amzn.to/2xzLOpL"">自分の時間を取り戻そう―――ゆとりも成功も手に入れられるたった1つの考え方</a>

<a href=""https://www.amazon.co.jp/%E8%87%AA%E5%88%86%E3%81%AE%E6%99%82%E9%96%93%E3%82%92%E5%8F%96%E3%82%8A%E6%88%BB%E3%81%9D%E3%81%86%E2%80%95%E2%80%95%E2%80%95%E3%82%86%E3%81%A8%E3%82%8A%E3%82%82%E6%88%90%E5%8A%9F%E3%82%82%E6%89%8B%E3%81%AB%E5%85%A5%E3%82%8C%E3%82%89%E3%82%8C%E3%82%8B%E3%81%9F%E3%81%A3%E3%81%9F1%E3%81%A4%E3%81%AE%E8%80%83%E3%81%88%E6%96%B9-%E3%81%A1%E3%81%8D%E3%82%8A%E3%82%93/dp/4478101558/ref=as_li_ss_il?s=books&ie=UTF8&qid=1506140488&sr=1-1&keywords=%E8%87%AA%E5%88%86%E3%81%AE%E6%99%82%E9%96%93%E3%82%92%E5%8F%96%E3%82%8A%E6%88%BB%E3%81%9D%E3%81%86&linkCode=li3&tag=llg01-22&linkId=a9b16585758f5bb03e7ab9b25b2f5cd7"" target=""_blank""><img border=""0"" src=""//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=4478101558&Format=_SL250_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=llg01-22"" ></a><img src=""https://ir-jp.amazon-adsystem.com/e/ir?t=llg01-22&l=li3&o=9&a=4478101558"" width=""1"" height=""1"" border=""0"" alt="""" style=""border:none !important; margin:0px !important;"" />

&nbsp;

[adsense_double_rect]
&nbsp;"
"920","2017-10-26 23:13:38","2018-08-28 08:07:09","一人利用でもおすすめSlackの始め方。新規登録","how-to-regist-slack","http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-25-at-21.48.36.png","freelance","&nbsp;

どうも前回の記事で
<a href=""https://ver-1-0.net/2017/10/23/self-slack/"">フリーランスの方や在宅作業の方におすすめ。一人Slack</a>

のように
一人Slackを紹介しましたが、
今回は
そんなSlackの登録の仕方を説明します。

サイトが英語だったりして、
一人でやるにはちょっと億劫になりますよね。
そんな方に向けて画像付きで解説します。

&nbsp;
[adsense_double_rect]
&nbsp;
<h2 class=""chapter"">Slackの始め方は簡単</h2>
&nbsp;

&nbsp;

最初に言っておくと難しくないです！！
やってみると案外できたという感じで、
すんなりと利用開始できます。
メールアドレスを入力して、メールアドレスを認証して、
ワークスペースの名前を決めるだけで完了です！！

それでは、
こちらのサイトから初めて行きましょう。
<a href=""https://slack.com/"" target=""_blank"">Where work happens | Slack</a>

<a href=""https://slack.com/"" rel=""attachment wp-att-921""><img class=""alignnone size-large wp-image-921"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-25-at-21.35.28-1024x599.png"" alt=""slackトップページ"" width=""700"" height=""409"" /></a>

最初に、「GET STARTED」をクリック

&nbsp;

&nbsp;

<a href=""http://ver-1-0.net/2017/10/26/%e4%b8%80%e4%ba%ba%e5%88%a9%e7%94%a8%e3%81%a7%e3%82%82%e3%81%8a%e3%81%99%e3%81%99%e3%82%81slack%e3%81%ae%e5%a7%8b%e3%82%81%e6%96%b9%e3%80%82%e6%96%b0%e8%a6%8f%e7%99%bb%e9%8c%b2/screen-shot-2017-10-25-at-21-35-53/"" rel=""attachment wp-att-922""><img class=""alignnone size-full wp-image-922"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-25-at-21.35.53.png"" alt=""新しいワークスペースを作る"" width=""554"" height=""326"" /></a>

次ページ画面上部のStart with a workspaceから
「create a new workspace」を選択。
ワークスペースとは、
チームで利用するスペースと考えて頂いて構いません。
（一人で利用する場合は、一人用ワークスペースですが・・・）

&nbsp;

&nbsp;

&nbsp;

<a href=""http://ver-1-0.net/2017/10/26/%e4%b8%80%e4%ba%ba%e5%88%a9%e7%94%a8%e3%81%a7%e3%82%82%e3%81%8a%e3%81%99%e3%81%99%e3%82%81slack%e3%81%ae%e5%a7%8b%e3%82%81%e6%96%b9%e3%80%82%e6%96%b0%e8%a6%8f%e7%99%bb%e9%8c%b2/screen-shot-2017-10-26-at-22-37-17/"" rel=""attachment wp-att-923""><img class=""alignnone size-large wp-image-923"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-26-at-22.37.17-1024x619.png"" alt=""slack メールアドレスを入力"" width=""700"" height=""423"" /></a>

次の画面で任意のメールアドレスを入力します。

&nbsp;

&nbsp;

&nbsp;

<a href=""http://ver-1-0.net/2017/10/26/%e4%b8%80%e4%ba%ba%e5%88%a9%e7%94%a8%e3%81%a7%e3%82%82%e3%81%8a%e3%81%99%e3%81%99%e3%82%81slack%e3%81%ae%e5%a7%8b%e3%82%81%e6%96%b9%e3%80%82%e6%96%b0%e8%a6%8f%e7%99%bb%e9%8c%b2/screen-shot-2017-10-25-at-21-36-45/"" rel=""attachment wp-att-924""><img class=""alignnone size-full wp-image-924"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-25-at-21.36.45.png"" alt=""Slackメールアドレス認証"" width=""812"" height=""516"" /></a>

少し待つと先の画面で入力したアドレス宛に
認証コードが送られてくるのでそちらを入力します。

&nbsp;

&nbsp;

<a href=""http://ver-1-0.net/2017/10/26/%e4%b8%80%e4%ba%ba%e5%88%a9%e7%94%a8%e3%81%a7%e3%82%82%e3%81%8a%e3%81%99%e3%81%99%e3%82%81slack%e3%81%ae%e5%a7%8b%e3%82%81%e6%96%b9%e3%80%82%e6%96%b0%e8%a6%8f%e7%99%bb%e9%8c%b2/screen-shot-2017-10-25-at-21-46-10/"" rel=""attachment wp-att-926""><img class=""alignnone size-large wp-image-926"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-25-at-21.46.10-1024x686.png"" alt=""Slack 名前入力"" width=""700"" height=""469"" /></a>

認証コードが正常に入力できたら、名前の入力が求められます。
別に本名を入れろとかそういうことでないので
好きな名前を入れてしまって大丈夫です。

&nbsp;

&nbsp;

&nbsp;

<a href=""http://ver-1-0.net/2017/10/26/%e4%b8%80%e4%ba%ba%e5%88%a9%e7%94%a8%e3%81%a7%e3%82%82%e3%81%8a%e3%81%99%e3%81%99%e3%82%81slack%e3%81%ae%e5%a7%8b%e3%82%81%e6%96%b9%e3%80%82%e6%96%b0%e8%a6%8f%e7%99%bb%e9%8c%b2/screen-shot-2017-10-25-at-21-46-46/"" rel=""attachment wp-att-927""><img class=""alignnone size-large wp-image-927"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-25-at-21.46.46-1024x644.png"" alt=""Slack チーム情報入力"" width=""700"" height=""440"" /></a>

次にチームの情報について入力を求められますが、
こちら特に必須じゃないのでそのままボタンを押して次に進んで大丈夫です。
（一人で使ってすみませんみたいな気持ちになる必要もありません。）

&nbsp;

&nbsp;

&nbsp;

<a href=""http://ver-1-0.net/2017/10/26/%e4%b8%80%e4%ba%ba%e5%88%a9%e7%94%a8%e3%81%a7%e3%82%82%e3%81%8a%e3%81%99%e3%81%99%e3%82%81slack%e3%81%ae%e5%a7%8b%e3%82%81%e6%96%b9%e3%80%82%e6%96%b0%e8%a6%8f%e7%99%bb%e9%8c%b2/screen-shot-2017-10-25-at-21-47-14/"" rel=""attachment wp-att-928""><img class=""alignnone size-large wp-image-928"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-25-at-21.47.14-1024x486.png"" alt=""Slack グループ名入力"" width=""700"" height=""332"" /></a>

グループ名を聞かれます。
自分の好きなグループ名を入力してください。
（混雑時にレストランの四人席を一人締めしているかのような
罪悪感を感じる必要はありません。）

&nbsp;

&nbsp;

<a href=""http://ver-1-0.net/2017/10/26/%e4%b8%80%e4%ba%ba%e5%88%a9%e7%94%a8%e3%81%a7%e3%82%82%e3%81%8a%e3%81%99%e3%81%99%e3%82%81slack%e3%81%ae%e5%a7%8b%e3%82%81%e6%96%b9%e3%80%82%e6%96%b0%e8%a6%8f%e7%99%bb%e9%8c%b2/screen-shot-2017-10-25-at-21-47-24/"" rel=""attachment wp-att-929""><img class=""alignnone size-large wp-image-929"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-25-at-21.47.24-1024x644.png"" alt=""Slack ワークスペース名入力"" width=""700"" height=""440"" /></a>

ワークスペース名を聞かれます。
ワークスペース自体のURLに使われるので、すでに使われてしまっている
ワークスペース名は使うことができません。独創的な名前をつけましょう。
（グループ名がデフォルトで入るのでそのまま使えれば大丈夫です。）

&nbsp;

&nbsp;

<a href=""http://ver-1-0.net/2017/10/26/%e4%b8%80%e4%ba%ba%e5%88%a9%e7%94%a8%e3%81%a7%e3%82%82%e3%81%8a%e3%81%99%e3%81%99%e3%82%81slack%e3%81%ae%e5%a7%8b%e3%82%81%e6%96%b9%e3%80%82%e6%96%b0%e8%a6%8f%e7%99%bb%e9%8c%b2/screen-shot-2017-10-25-at-21-47-40/"" rel=""attachment wp-att-930""><img class=""alignnone size-large wp-image-930"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-25-at-21.47.40-1024x680.png"" alt=""Slack インビテーションを送る"" width=""700"" height=""465"" /></a>

最後、
インビテーションを送るか聞かれますが、
一人用の場合は「Skip For Now」をクリックしましょう。
（孤独に耐える強さを身につけるためにも、
誰かを招待したいという誘惑に打ち勝ってください）

&nbsp;

&nbsp;

<a href=""http://ver-1-0.net/2017/10/26/%e4%b8%80%e4%ba%ba%e5%88%a9%e7%94%a8%e3%81%a7%e3%82%82%e3%81%8a%e3%81%99%e3%81%99%e3%82%81slack%e3%81%ae%e5%a7%8b%e3%82%81%e6%96%b9%e3%80%82%e6%96%b0%e8%a6%8f%e7%99%bb%e9%8c%b2/screen-shot-2017-10-25-at-21-48-36/"" rel=""attachment wp-att-931""><img class=""alignnone size-large wp-image-931"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-25-at-21.48.36-1024x859.png"" alt=""Slack チャット画面"" width=""700"" height=""587"" /></a>

これで見事登録完了です。
自分専用のスペースとして、好きなだけメッセージを送ってください。

&nbsp;

&nbsp;
<h2 class=""chapter"">まとめ</h2>
&nbsp;

&nbsp;

登録して気になるところですが、
料金はどうなっているのか見てみましょう。
<a href=""https://slack.com/pricing"" target=""_blank"">Pricing | Slack</a>
<a href=""https://slack.com/pricing"" rel=""attachment wp-att-933""><img class=""alignnone size-large wp-image-933"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-26-at-23.01.35-1024x668.png"" alt=""Slack | 料金"" width=""700"" height=""457"" /></a>

最初に登録した時点ではフリープランなので無料で利用できます。
Standard Planでは、ユーザ一人に対して月850円程度ですね。

フリープランだと検索できる件数などに制限が
あるようですが、一人で使う分にはあまり困らず利用できています。

&nbsp;

&nbsp;

先の記事で紹介した内容などと含めて
非常に便利なツールですので、
一度試してみて頂けると良いと思います。

前回の記事で紹介したもの以外にも
自分で工夫して自分にあった使い方もできるかと思います。

私は、「あ、これやらなきゃ」みたいなものを
テキストベースで連投するチャンネルを作ったりするなど色々工夫して
利用しています。

みなさんもぜひ一度お使い下さい。

&nbsp;

[adsense_double_rect]"
"370","2017-05-21 11:04:01","2018-11-26 22:02:05","ビットコイン急騰中!! ビットコインのメリットまとめてみた","illustration-merit-bitcoin","http://ver-1-0.net/wp-content/uploads/2017/02/6njoebtarec-lee-campbell.jpg","cryptocurrency-blockchain","&nbsp;

&nbsp;

ビットコイン上がってますね(^_^)

&nbsp;

&nbsp;

昨日まで1BTCあたり24万円ほどでしたが、
一時期30万円近くまで上昇し現在、
27万円ほどです。
http://kabu-ka.net/bit-coin-price
<a href=""http://ver-1-0.net/wp-content/uploads/2017/05/スクリーンショット-2017-05-21-9.29.03.png""><img class=""alignnone size-large wp-image-371"" src=""http://ver-1-0.net/wp-content/uploads/2017/05/スクリーンショット-2017-05-21-9.29.03-1024x576.png"" alt="""" width=""700"" height=""394"" /></a>

&nbsp;

&nbsp;

私自体実際に取引を始めたのは、
3月頃からなのですが、
ビットコインを買っていると
いうと
「ビットコインって便利なの？」「ビットコインって安全なの」

「スイカとかと何が違うの？」

&nbsp;

ということを言われ懐疑的な声が多いので
ビットコインの良い点をまとめみます。

&nbsp;

その前にビットコインの使い方から

ビットコインには大きく分けて4つの利用方法が
あります。
その４つとは
<ol>
 	<li><span style=""text-decoration: underline;"">投資 -&gt; ビットコインの売買で投資収益を得る（キャピタルゲイン）</span></li>
 	<li><span style=""text-decoration: underline;"">送金 -&gt; 海外にいる家族などにビットコインを送金する</span></li>
 	<li><span style=""text-decoration: underline;"">決済 -&gt; オンラインショップやビットコイン使用可能なショップで決済通貨として使用する</span></li>
</ol>
です。
この4つをあげた上で

それぞれの利用法でのメリットをあげると

&nbsp;

&nbsp;

&nbsp;
<h2 class=""chapter"">1.投資でのメリット</h2>
&nbsp;

現在上にも書いたように上昇トレンドになっており、
いつ終わるかはわからないものの数年のチャートをみると
価格が右肩上がりで上昇し、魅力のある投資先となっていることは
間違いないでしょう。

&nbsp;

その中でビットコインは、
1BTC単位で取引するのではなく、
0.0001BTC程度（現在の相場で20~30円程度）から
取引可能なので、
資金の少ない人も参入可能というメリットがあります。

&nbsp;

また、
ビットコインの発行料は上限があり、
ビットコインのプログラムで２１４０年頃までに、
2100万BTCが発行されるように
実装されています。

そのため、
金や石油のような限りのある資産であり、
今後ビットコインの利便性が認められ
需要が増加すれば一気に価格が上がることも考えられます。
<h2></h2>
&nbsp;

&nbsp;
<h2 class=""chapter"">2.送金でのメリット</h2>
&nbsp;

仮想通貨を使わないで
海外への送金を行おうとすると
どこかの銀行の口座からある銀行への口座への送金となります。

&nbsp;

こちらの三井住友銀行だと
手数料が4000円ほどになるそうですが
<a href=""http://www.smbc.co.jp/kojin/otetsuduki/sonota/kaigai/"">http://www.smbc.co.jp/kojin/otetsuduki/sonota/kaigai/</a>

&nbsp;

ビットコインである場合
①送り元Aさん( 例えば円 )の現地通貨と送り先Bさん( 例えばドル )の
現地通貨に換金できる取引所を開設。
②Aさんの口座からBさんの口座にビットコインを送金
③Bさんは自分の口座のビットコインをドルに変えて現地で使用。

とすれば取引所により違いはあるものの数十円〜数百円の手数料で
海外送金が行えてしまうようです。

&nbsp;

さらに銀行の海外送金だと数日かかるものが
瞬時に移動可能です。
<h2 class=""chapter"">3.決済でのメリット</h2>
&nbsp;

日本で決済できる例が少ないので、
あまり実感がわかないのですが、
ビットコインももちろんお金の一種なので、
支払いに使えます。

&nbsp;

日本だとまだ使用できるお店は少ないのかもしれませんが、
ビックカメラなどでの決済で利用できるようです。

ビックカメラはインバウンドでの需要を期待しているのでしょうかね。

ビットコインで決済できる店舗が増えると
デビットカードのような使い方が可能になります。

&nbsp;

利用者は日常的に
ビットコインを自分のウォレットに入れておき
決済の際はそこから支払われるようにするということです。

&nbsp;

また、
これですと
店舗でお金が足りないと気づいた場合でも
支払い前にビットコインを購入して、
支払いに当てるということも可能です。
<h2 class=""chapter"">まとめ</h2>
&nbsp;

以上、
ビットコインの有用性についてまとめてみました。
まだまだ不勉強な部分も多いですが、

ビットコインを持っている以上、
「それの何がいいの？」と言われた時に
しっかり説明できるようになっておきたいですね！！"
"1966","2018-03-25 10:00:13","2018-09-02 13:09:21","ReactNativeで電話番号フォームを実装する","implement-telephone-input","https://ver-1-0.net/wp-content/uploads/2018/01/react.png","engineering::::react","<h2>電話番号形式で入力する際のフォームを実装</h2>
<a href=""https://ver-1-0.net/2018/03/25/implement-telephone-input/reactnativetelephoneinput/"" rel=""attachment wp-att-1974""><img class=""alignnone size-full wp-image-1974"" src=""https://ver-1-0.net/wp-content/uploads/2018/03/ReactNativeTelephoneInput.gif"" alt="""" width=""167"" height=""300"" /></a>

&nbsp;

ReactNativeで入力フォームを使う時って、TextInputを使いますよね。ただこのTextInputさんは、汎用的につくられているので<strong>電話番号の入力フォームとしては少し使いづらい印象があります。</strong>

そこで割と簡単に電話番号形式入力フォームがコンポーネントとしてあらかじめ定義されていると嬉しいなと思い、実際につくってみました。

機能としては、まだまだで入力に対して<strong>電話番号をハイフン区切りにして表示してくれる</strong>だけですが、なんとなくそれっぽくなるように作りました。

ぜひ、コピペして使ってみてください。

[after_intro]
<h2>TelephoneInputを実装</h2>
ポイントは、insertDelimiterメソッドですね。<strong>入力に対してつねに所定の位置にハイフンが挿入される</strong>ように作っています。

あとはそれぞれ電話番号の桁数やスタイル、キーボードの種類などをpropsに定義しています。
<h5>TelephoneInput.js</h5>
<pre><code class=""language-jsx"">import React, { Component } from 'react';
import { Platform, StyleSheet, Text, View, TextInput } from 'react-native';

TELEPOHNE_LENGTH = 13; // 番号の桁数
DELIMITER_INDEX = [3, 7]; // ハイフンを入れる位置

export class TelephoneInput extends Component {
  constructor(props) {
    super(props);
  }

  insertDelimiter(text) {
    let text_without_delimiter = text.replace(/-/g, '');
    let index = 0;
    let result = text_without_delimiter;
    DELIMITER_INDEX.forEach(function(value, index) {
      if (text_without_delimiter.length &gt;= value) {
        const insertIndex = value + index;
        result = `${result.slice(0, insertIndex)}-${result.slice(
          insertIndex,
          insertIndex + result.length
        )}`;
        index++;
      }
    });
    return result;
  }
  render() {
    return (
      &lt;TextInput
        autoFocus={true}
        keyboardType={'phone-pad'}
        value={this.props.value}
        placeholder=""000-0000-0000""
        maxLength={TELEPOHNE_LENGTH}
        style={this.props.style}
        onChangeText={text =&gt; {
          this.props.updateAction(this.insertDelimiter(text));
        }}
      /&gt;
    );
  }
}</code></pre>
<h2>実際に使って見る</h2>
&nbsp;

上での説明は最小限度にとどめましたが、コンポーネントを定義するところで得られるメリットは上の実装を意識せずにつかえることです。

実際に使ってみて、それを確かめてみましょう。
<h5>App.js</h5>
<pre><code class=""language-jsx"">import React, { Component } from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';

import { TelephoneInput } from './../components/TelephoneInput';

type Props = {};
export default class App extends React.Component&lt;Props&gt; {
  constructor(props) {
    super(props);
    this.state = { telephoneNumber: null };
  }
  render() {
    return (
      &lt;View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}&gt;
        &lt;Text&gt;Input Your Telephone Number&lt;/Text&gt;
        &lt;TelephoneInput
          value={this.state.telephoneNumber}
          style={{
            fontSize: 35,
            fontWeight: 'bold',
            padding: 30
          }}
          updateAction={number =&gt; {this.setState({ telephoneNumber: number });}}
        /&gt;
        &lt;Button
          raised
          title=""Submit""
          onPress={() =&gt; {
            const number = this.state.telephoneNumber;
            if (number) {
              alert(`下記の番号が入力されています。\n${number}`);
            } else {
              alert('番号を入力してください。');
            }
          }}
        /&gt;
      &lt;/View&gt;
    );
  }
}
</code></pre>
&nbsp;

TelephoneInputコンポーネントを定義したことで、ハイフンを挿入するといったロジックがかかれなくなったので、
コンポーネントを利用する側からはコードがスッキリ見えるようになりました。他の画面で電話番号を入力するフォームを作る必要ができたときもこのコンポーネントをつかえますね。

&nbsp;
<pre><code class=""language-jsx"">&lt;TelephoneInput
  value={this.state.telephoneNumber}
  style={{
    fontSize: 35,
    fontWeight: 'bold',
    padding: 30
  }}
  updateAction={number =&gt; {this.setState({ telephoneNumber: number });}}
/&gt;
</code></pre>
&nbsp;

また、updateActionで（名前があまりよくないかもしれない）ステートも更新できるようにしているので、コンポーネントの呼び出し側でも入力された値がわかるようになっています。

&nbsp;

<a href=""https://ver-1-0.net/2018/03/25/implement-telephone-input/screen-shot-2018-03-24-at-23-00-48/"" rel=""attachment wp-att-1971""><img class=""alignnone size-full wp-image-1971"" src=""https://ver-1-0.net/wp-content/uploads/2018/03/Screen-Shot-2018-03-24-at-23.00.48.png"" alt=""ReactNative電話番号フォーム"" width=""374"" height=""661"" /></a>

&nbsp;

親コンポーネントでボタンを押すと電話番号の値を表示するように今回はコードを書いていますが、見事に親コンポーネントで値がとれています。

これができるば入力された電話番号をサーバーに送信して保存ということもできてフォームとしても使えますね。

&nbsp;

&nbsp;
<h2>まとめ</h2>
<ul>
 	<li>defaultPropsでデフォルトの値を決める。</li>
 	<li>TextInputの各propsに対応する。</li>
 	<li>電話番号の桁数やデリミタを入れる位置を外側から設定できるようにする。</li>
 	<li>バリデーションをかけられるようにする。</li>
</ul>
などなど課題はありますが、ひとまず動くようなコンポーネントが作成できましたので、記録しておきます。以上のような課題が解消できたら追記するかもしれません。

では"
"88","2017-01-28 11:26:21","2017-12-22 22:33:48","新卒から2年半でインドネシアへの海外赴任を実現させそうになった話","indonesia-for-two-years","http://ver-1-0.net/wp-content/uploads/2017/01/IMG_2005.jpg","colum","&nbsp;

&nbsp;

前の会社の話をさせていただくのですが、
私は新卒から<strong>2年半でインドネシア転勤</strong>を実現させました。

※実際のところは実現はせず直前で条件面で
不満が残り希望を取り下げたのですが
赴任1ヶ月前からプロジェクトに属さず、
海外赴任の準備や出張ベースでインドネシアに出向きサポートをし、
就労ビザ発行の承認も得ていました。

この記事は
<strong>社内で実現したいことがあるのに実現の方法がわからない方</strong>、
<strong>新卒入社まもなく、未だ目標の定まらない方</strong>
にぜひ読んで頂けたらと思っています。

私は新卒で150人程度の中小SIerに入社しました。
そこは中小には珍しく、
入社当初アジア3拠点に支社があり、
そのうちの<strong>インドネシアで働くことがその会社でできる一番面白いこと</strong>
だと思ったのでそこで働くことを目標としました。

&nbsp;

そこで、「インドネシアへの海外赴任を実現させる」
という目標のために私は
<ul>
 	<li>
<h3>海外赴任より先に現地に行く</h3>
</li>
 	<li>
<h3>継続的努力をアピールするために資格取得!</h3>
</li>
</ul>
ということをしました。

&nbsp;

&nbsp;

&nbsp;
<h3>海外赴任より先に現地に行く</h3>

<hr />

<img class=""alignnone size-medium wp-image-91"" src=""http://ver-1-0.net/wp-content/uploads/2017/01/IMG_2562-300x225.jpg"" alt=""ジャカルタ市街"" width=""300"" height=""225"" />

海外赴任より前に、先に現地に行きました。そう自費で

自費でもインドネシアの場合は往復で
飛行機 + ホテルで 7万円程度なので
夏休みの海外旅行も兼ねて行ってきました。

&nbsp;

もちろん、観光でモスクを見学したりしたのですが、
観光だけでは終わらずに現地の支社の方と
連絡を取ってご飯を食べて現地の仕事の様子を聞くなどしてきました。

&nbsp;

これは自分でもなかなか効果的だったと思っていて、
夏休みから帰ってきた時に役員の方に
「インドネシア行ってきたんだってな!!」
など声をかけて頂き
そこで効果的な動きができたと実感できました。

会社の方としても、
一度も現地を見たことない人をいきなり赴任させるというのは、
現地に順応できないなどの不安があるので
先に現地を見に行ってみるというのは、
やる気 + 会社の海外派遣させる不安の解消に
ダブルで役に立つと思います。

&nbsp;

別に海外赴任するのにこれがマストである
ということではないですが、
何か社内で実現しようと思うことがあるのであれば「あいつは本気だ」
と思われるというのは重要なことですね。

&nbsp;

やっぱり本気の人は周りにもそこを認めて接してくれるものだと思います。

&nbsp;

&nbsp;
<h3>継続的努力をアピールするために資格取得!!</h3>

<hr />

<img class=""alignnone size-medium wp-image-108"" src=""http://ver-1-0.net/wp-content/uploads/2017/01/IMG_2087-300x300.jpg"" alt="""" width=""300"" height=""300"" />

資格は知識習得のためではなく、
継続的な努力の証として取得のための勉強をしました。

幸い会社には資格試験に合格するごとに
全社的にアナウンスされるシステムがあったためアピールに最適の方法でした。

資格取得の目的は様々なものがあるのですが、
私の場合は、
「彼はインドネシアに行きたいみたいだけど、継続して努力しているな」
というのをアピールするために絞りました。

もちろん勉強した資格はTOEICやLPICなど
現地で必要なスキルをリサーチし、勉強する項目を選定しましたが、
知識習得は二次目的でした。

&nbsp;
<h3>まとめ</h3>

<hr />

以上二つのことを実践した結果入社から三年で、
社員として初めてインドネシアへの海外赴任を達成しそうに？なりました。

ここに書いたことは、
あくまでも経験に基づいた目標に対するアプローチの例ですが、
基本的には周りの人をワクワクさせるような目標を掲げて
努力していけば必ずや時間がかかっても実現できるものだと信じています。

最後まで読んで頂きありがとうございました。
Sampai jumpa,lagi!!"
"533","2017-07-27 19:30:38","2018-08-26 11:49:15","Laravel5.1をMacにインストール。導入方法の解説。","install-laravel51","http://ver-1-0.net/wp-content/uploads/2017/07/スクリーンショット-2017-07-27-0.16.06.png","engineering::::for-beginner","&nbsp;

&nbsp;

どうも
個人では、
CakePHPを使っていますが、
会社でちょっと使うかもしれなくなったのでちょっと調べて見ました。

&nbsp;

&nbsp;
<h2 class=""chapter"">インストール</h2>
本当は、
5.2を使いたかったが、
phpのバージョンの関係で5.1を
インストール。
<pre><code class=""language-bash""> composer create-project ""laravel/laravel=5.1.*"" sample</code></pre>
終わった。
だいぶあっさり

[after_article]

&nbsp;
<h2 class=""chapter"">Databaseの設定</h2>
インストールして終わっては
つまらないので、
データベース設定まではやりましょうか

.envを編集
<pre><code class=""language-bash"">
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_DATABASE=your_database
DB_USERNAME=password
DB_PASSWORD=
</code></pre>
&nbsp;
<h2 class=""chapter"">とりあえず起動してみる</h2>
データベースの設定も終わったので
とりあえず下記のコマンドでビルトインサーバを
起動できるよう。
<pre><code class=""language-bash"">cd sample
php artisan serve
</code></pre>
<img class=""alignnone size-large wp-image-536"" src=""http://ver-1-0.net/wp-content/uploads/2017/07/スクリーンショット-2017-07-27-0.16.06-1024x574.png"" alt=""Laravel"" width=""700"" height=""392"" />
そして、
http://localhost:8000に繋いで見ると
ものすごくシンプルな画面が出てきました。

以上です！

[after_article]

&nbsp;

次チュートリアルでもやってみますかね。"
"565","2017-08-13 20:49:40","2018-08-26 11:47:17","Laravel5.4の多言語化","international-laravel","http://ver-1-0.net/wp-content/uploads/2017/07/スクリーンショット-2017-07-27-0.16.06.png","engineering","&nbsp;
&nbsp;


どうも
多言語化というと
たいそうな話に聞きこえますが、
Laravelでのロケールの話です。

つまり、
webアプリケーションを作る時に
htmlに文字をベタ書きしてしまうと、
あとあと
「このサイト英語にするのどれくらいかかる？」
とかの
無邪気な質問に対応しづらくなります。

ベタ書きしてしまうと、
後から、置き換える必要のある場所を洗い出して
全部htmlなりテンプレートファイルを
書き換えないといけません。


最近
Laravelでアプリを作りはじめていて
使い方を調べたので、
ここにまとめておきます。

ちなみにLaravelのバージョンは5.4です。
この記事はここを参考にしました。
<a href=""https://laravel.com/docs/5.4/localization"">https://laravel.com/docs/5.4/localization</a>


[after_intro]


<h2 class=""chapter"">ロケールファイルの置き場所</h2>

ロケールファイルこのように、
resources/lang/の下に
言語に分けてそれぞれの言語ファイルを置いて起きます。

<pre><code class=""language-php"">/resources
    /lang
        /en
            messages.php
        /ja
            messages.php
</code></pre>

それぞれの中身は
(英語版) lang/en/message.php

<pre><code class=""language-php"">　&lt;?php
  return [
    'description' => 'welcome to our site. this is shopping site on the web !!'
]

</code></pre>

(日本語版) lang/ja/message.php
<pre><code class=""language-php"">&lt;?php
  return [
    'description' => 'ようこそ私たちのオンラインショッピングサイトへ'
]

</code></pre>

になります。
このようにしておくと
message.descriptionなどを
キーにviewファイルから文字を呼びだすようになります。

<h2>ロケールファイルに書いたメッセージの呼び出し</h2>


上の設定が住んで入れば、
view ファイルで
<pre><code class=""language-php"">__('message.description')'</code></pre>
のように、
呼び出せます。

&nbsp;


<h2  class=""chapter"">ロケールの設定</h2>

&nbsp;
&nbsp;


ここまでで、
・言語ごとのロケールファイルの設定
・viewファイルでの呼び出し

はできます。
が、
日本語が呼ばれるか、英語が呼ばれるかどこで判断するの？
という疑問が生まれると思います。

それがどこかというと、
それは、

&nbsp;
&nbsp;

config/app.phpのlocaleになります。

<pre><code class=""language-php"">    
/*
|--------------------------------------------------------------------------
| Application Locale Configuration
|--------------------------------------------------------------------------
|
| The application locale determines the default locale that will be used
| by the translation service provider. You are free to set this value
| to any of the locales which will be supported by the application.
|
*/

'locale' => 'ja',

</code></pre>


また、config/app.phpはアプリの起動時に
読まれるはずですが、
アプリの起動中でも

<pre><code class=""language-php"">
Route::get('welcome/{locale}', function ($locale) {
    App::setLocale($locale);

    //
});</code></pre>

のような形でロケールを変更できるよう。

これはやってみてはないですが、
これを使って、
言語をユーザに選ばせるとかはできそう。

&nbsp;
&nbsp;

<h2 class=""chapter"">おまけ - メッセージを動的にする</h2>

&nbsp;
&nbsp;

以下は少し補足的な内容になりますが、
メッセージを動的に変化させたい時ありますよね。

例えば、
ログイン後の画面でよくある「ようこそ〇〇さん」みたいな表示です。

&nbsp;
&nbsp;

これをロケールでやろうとすると
(英語版)
<pre><code class=""language-php"">　&lt;?php
  return [
    'welcom' => ':name　, welcome to our site!!'
]

</code></pre>

(日本語版)
<pre><code class=""language-php"">&lt;?php
  return [
    'welcom' => 'ようこそ :name さん'
]

</code></pre>

のようにファイルに定義して、
呼び出す際に
<pre><code class=""language-php"">__('messages.welcome', ['name' => 'John']);</code></pre>

のようにすれば、
変数の文字を埋め込んだ形でメッセージを表示することができます。

&nbsp;
&nbsp;

<h2 class=""chapter"">まとめ</h2>

&nbsp;
&nbsp;

ここまでで、
ロケールとか国際化とか多言語化とかに
役立つ情報をまとめました。

これはアプリを多言語で作ると決めてから
コツコツ両方のロケールを更新していくという作業
が必要なので、
早めに知っておくと良いと思います。
（後から文字を全部置き換えるという単純作業は地獄なので・・・）

以上です!!


"
"687","2017-09-22 11:08:53","2017-12-22 22:47:48","勝手に大胆予想。次に流行る横文字は「イテレート」","iterate-is-next-word","http://ver-1-0.net/wp-content/uploads/2017/09/78456f795b3d1f38d8bb2c2d2b69124f_s.jpg","colum","&nbsp;

&nbsp;

どうも
今日は勝手に次にはやる横文字
を予想したいと思います！！

ズバリ
次はやる横文字は
<strong>「イテレート」</strong>です。

使い方は、
ポジティブな感じだと
<strong>「大枠はこれくらいで決めておいて、
あとはイテレートしながらブラッシュアップしてこう」</strong>

ネガティヴなダメ出しする感じだと
<strong>「それ、イテレートしてなくない？」</strong>

と言った感じです。

[adsense]

&nbsp;

&nbsp;
<h2 class=""chapter"">現状流行ってる横文字</h2>
&nbsp;

&nbsp;

私の身の回りをで使われていそうな横文字をあげてみると、
<ul>
 	<li>イノベーション</li>
 	<li>ブラッシュアップ</li>
 	<li>ASAP</li>
 	<li>コミット</li>
 	<li>アジェンダ</li>
 	<li>トライアンドエラー</li>
 	<li>スキーム</li>
</ul>
などなど様々な横文字が飛び交っていますが

&nbsp;

&nbsp;

これらについて
よくよく考えてみると
言葉の流行り廃りがあることが
わかります。

&nbsp;

&nbsp;

その結果として
「次に来るのは何か」と考えた結果が
今回の<strong>イテレート</strong>という言葉でした。

&nbsp;

&nbsp;
<h2 class=""chapter"">イテレートとは</h2>
&nbsp;

&nbsp;

イテレートとは、
プログラミング界隈ではしばしば使われるのですが、
再帰的に処理する。繰り返し処理する。反復するなど
の意味合いを持って使われます。

&nbsp;

個人的な予想では、
今「サイクルを回す」という表現の
競合になり、
うまくいくとリプレイスされるのでは
なんか考えています。

&nbsp;

&nbsp;

言っていることは
同じだけど「なんか新しい方が頭良い風でカッコイイ」
みたいな理由で
取って代わららるのではないでしょうかw

&nbsp;

&nbsp;
<h2 class=""chapter"">イテレートが流行る理由</h2>
&nbsp;

なんか流行りそう

と思ったのは
海外のブログ記事を読んでいる時です。

<a href=""https://www.garyvaynerchuk.com/my-2017-manifesto/"">https://www.garyvaynerchuk.com/my-2017-manifesto/</a>

&nbsp;

繰り返し、繰り返しなんどもなんども
という意味合いで使っていましたが、

&nbsp;

古くから、
日本は繰り返し繰り返し作業を
行い少しずつ改善を重ねていくという
文化が染み付いており、
日本人が好みそうな単語だなとピンと来ました。
（PDCAとかみんな好きですもんね）

&nbsp;

&nbsp;

プログラミング界隈では
割と知られているワードだと
思うので、
これが他の業界でも使われるようになれば
次に「くる」横文字として浸透するのでは
ないでしょうか。

&nbsp;

&nbsp;

以上、
勝手に大胆予想でした。

&nbsp;

&nbsp;

最後は

&nbsp;

パーソナルコンピュータの父アラン・ケイの
名言を記して起きます。
<blockquote>未来を予測する最善の方法は、それを発明することだ</blockquote>
&nbsp;

&nbsp;

[adsense]"
"727","2017-10-01 21:37:31","2018-08-26 01:14:37","日本地図を地方にアクションを分ける~クリッカブルマップ~","japanese-action","http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-01-at-21.33.03.png","engineering::::design","&nbsp;

どうも、

運転が苦手な@version1です。



&nbsp;

今回は
仕事で地図の中でクリックされた座標を元にアクションを分けるという機能を実装する必要が
あったので、それの方法を調べてみました。

&nbsp;

[after_intro]

&nbsp;
<h2 class=""chapter"">〜クリッカブルマップ〜座標でアクションを分ける、難しそう・・・</h2>
&nbsp;

&nbsp;

どうやらクリッカブルマップというのを使うと地図の中でアクションを分けることが実現できるようです。

&nbsp;

&nbsp;

が、、、
&nbsp;
<strong>「え、難しそう」</strong>
これが第一印象でした。
でも、意外とそうでもないみたいです。

&nbsp;
[mid_article]
&nbsp;

文章でいうと
<ol>
 	<li>
いつものようにimgタグを貼り付けて画像を表示する。
</li>
 	<li>
その下にmapタグを貼り付ける。（そこで座標を指定する。）
</li>
 	<li>
imgタグにusemap属性とmapタグのname属性に対応する名前をつける。
</li>
</ol>
&nbsp;

で
2で指定した座標の画像ごとにアクションを分けることができます。

あれ、でも

ちょっと待って座標を指定するとかヒョロっと言っているけどそこが一番大変なんじゃないの？

というツッコミが入ると思うので
コードを貼り付けます。

&nbsp;

&nbsp;
<pre><code  class=""language-markup"">&lt;div class=""map_japan""&gt;
  &lt;img src=""img/color_ken_nashi.gif"" usemap=""#ImageMap"" alt="""" /&gt;
  &lt;map name=""ImageMap""&gt;
    &lt;area shape=""poly"" coords=""695,20,779,96,816,82,806,104,811,117,831,118,783,140,741,143,716,168,661,132,633,142,611,127,625,144,638,161,620,159,593,171,590,162,598,145,589,133,592,119,614,114,623,111,619,100,626,96,636,104,656,106,663,85,676,82,673,83"" alt=""hokkaido"" /&gt;
    &lt;area shape=""poly"" coords=""632,169,652,177,647,178,641,191,662,235,629,296,611,295,601,315,606,337,532,337,531,325,553,309,562,290,553,279,579,248,583,229,576,229,573,223,589,215,582,197,632,169,632,169"" alt=""tohoku"" /&gt;
    &lt;area shape=""poly"" coords=""594,350,532,339,504,341,489,357,499,363,500,377,515,394,504,401,509,411,524,410,539,421,560,417,574,401,587,399,577,381,577,381"" alt=""kanto"" /&gt;
    &lt;area shape=""poly"" coords=""494,430,510,417,504,402,514,393,500,378,497,365,489,358,503,342,528,336,528,324,552,310,562,290,552,282,502,321,455,330,447,338,434,331,453,309,450,307,429,312,419,340,378,365,378,370,369,378,355,372,358,382,369,389,397,376,397,395,407,399,414,417,421,422,421,422"" alt=""cyubu"" /&gt;
    &lt;area shape=""poly"" coords=""409,405,406,397,396,394,393,374,366,387,354,372,354,364,314,362,318,372,303,388,306,399,321,399,335,409,327,437,355,455,393,432,403,433,410,426,410,426"" alt=""kansai"" /&gt;
    &lt;area shape=""poly"" coords=""315,367,246,360,187,384,182,392,156,390,152,405,176,413,213,420,222,403,230,409,260,409,266,403,286,407,306,400,301,401"" alt=""cyugoku"" /&gt;
    &lt;area shape=""poly"" coords=""264,420,282,410,307,420,312,436,291,446,280,454,265,443,245,445,239,453,228,458,223,469,209,463,205,456,208,443,194,433,217,429,235,414,244,422,242,422"" alt=""shikoku"" /&gt;
    &lt;area shape=""poly"" coords=""81,419,154,406,152,415,169,423,177,420,182,425,169,432,174,438,183,438,184,445,180,451,190,455,139,510,106,517,86,501,98,469,94,443,82,437,82,437"" alt=""kyushu"" /&gt;
  &lt;/map&gt;
&lt;/div&gt;
</code></pre>
&nbsp;

&nbsp;
<strong>「え。。。正気？なんか数字が一杯並んでいるけど」</strong>
&nbsp;

と心配される方もいるかも

しれませんが、

実は下のツールを使うと、

&nbsp;

自分で、切り取る図形を選択しながらクリッカブルマップの座標を
取得できます。


<a href=""https://labs.d-s-b.jp/ImagemapGenerator/"">HTML Imagemap Generator - dreamseeker</a>

&nbsp;

使い方としては、
<strong>①画像アップロード</strong>
<strong>②モード選択（日本地図の場合は多角形モードでやりました）</strong>
<strong>③各地方の境界線をツールを使ってなぞっていく</strong>

と言った感じです。
割と地味な作業ですが難しくはないです。

&nbsp;

&nbsp;
<h2 class=""chapter"">レスポンシブにも対応するクリッカブルマップ</h2>
&nbsp;

&nbsp;

上の手順で頑張って、
座標を立てたにも関わらず、
Webページのものについては、
必ずレスポンシブという障害があります。
（画面の大きさも変われば、座標の位置も変わるよね。。）

&nbsp;

が、
これも、
<a href=""https://github.com/stowball/jQuery-rwdImageMaps"">jQuery-rwdImageMaps</a>
というライブラリを使えば解決できます。

&nbsp;

使い方としては、
<pre><code class=""language-javascript"">$(document).ready(function(e) {
        $('img[usemap]').rwdImageMaps();
    });
</code></pre>
&nbsp;

のような感じで、
簡単に画像要素を指定するだけです。

これで、
画面の大きさを変えても
このライブラリが座標を良い感じに変更してくれます。

&nbsp;

&nbsp;

&nbsp;
<h2 class=""chapter"">成果物</h2>
&nbsp;

&nbsp;

という事で、
今回この技術を使って、
簡単なデモを作りました。

&nbsp;

&nbsp;

日本地図をクリックするとクリックされた
地方の県名の一覧が表示されるという
簡単なものです。

&nbsp;

&nbsp;

gitで公開しているので、
よかったら見てみてください。
<a href=""https://version-1.github.io/imagemap/"">https://version-1.github.io/imagemap/</a>
(今は簡単なものであればgit上で簡単なページで作れるんですね。）

&nbsp;

&nbsp;

<img class=""alignnone size-large wp-image-730"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-01-at-21.33.03-1024x562.png"" alt=""日本地図から地域を選択する"" width=""700"" height=""384"" />

&nbsp;

&nbsp;

以上です！！

&nbsp;

&nbsp;

[after_article]

&nbsp;

&nbsp;"
"194","2017-02-08 00:22:56","2018-11-08 18:33:11","kotlin SQL Framework Exposed を使ってDB接続してみた","kotlin-db-connect-by-exposed","http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-05-22.49.48.png","engineering","&nbsp;

前回のkotlinシリーズに引き続き
今回は、DB接続です。

&nbsp;

本題に入る前にちょっと宣伝。
よかったらどうぞ

<ul>
<li>Kotlinでhttpリクエストを投げてみる。<a href=""http://ver-1-0.net/2017/02/05/kotlin-http-request-khttp/"" target=""_blank"" rel=""noopener noreferrer"">http://ver-1-0.net/2017/02/05/kotlin-http-request-khttp/</a></li>
<li>KotolinでHelloworld <a href=""http://ver-1-0.net/2017/01/02/kotlin-hello-world/"" target=""_blank"" rel=""noopener noreferrer"">http://ver-1-0.net/2017/01/02/kotlin-hello-world/</a></li>
</ul>

&nbsp;

[after_intro]

&nbsp;

ということで、早速build.gradleを公開

&nbsp;

<strong>build.gradle</strong>

&nbsp;
<pre><code class=""language-groovy"">version '1.0-SNAPSHOT'
 
buildscript {
    ext {
        kotlinVersion = '1.0.2'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath(""org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"")
    }
}
 
apply plugin: 'kotlin'
apply plugin: 'application'

mainClassName = ""samples.HelloWorldKt""

 
repositories {
    mavenCentral()
    maven {
        url('https://dl.bintray.com/kotlin/exposed/')
    }
}
 
dependencies {
    compile ""org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}""
    compile 'org.jetbrains.exposed:exposed:0.7.6'
    compile 'mysql:mysql-connector-java:5.1.6'
}
</code></pre>
特に難しいことはないですが、
exposedとmysqlの依存性を記載しています。

&nbsp;

&nbsp;

メインクラスはこういった感じで記載。

src/main/kotlin/samples/HelloWorld.kt


<pre><code class=""language-kotlin"">package samples

import org.jetbrains.exposed.sql.*
import org.jetbrains.exposed.sql.transactions.transaction
import org.jetbrains.exposed.sql.SchemaUtils.create

object Student : Table(""student"") {
    val id = integer(""student_id"").autoIncrement().primaryKey()
    val name = varchar(""name"", 50)
    val grade = integer(""grade"")
}

fun main(args: Array) {
    Database.connect(""jdbc:mysql://localhost/sample"", ""com.mysql.jdbc.Driver"",""user"",""password"")
    transaction {
       create(Student)
    }
}
</code></pre>
今回はデータベースに接続して、Student テーブルを作るまで。
CRUDとかはもう少し時間のあるときに勉強します。

&nbsp;

では ./gradlew run で実行してみましょう.
<pre><code class=""language-bash"">$ ./gradlew run
:compileKotlin UP-TO-DATE
:compileJava UP-TO-DATE
:processResources UP-TO-DATE
:classes UP-TO-DATE
:run

BUILD SUCCESSFUL

Total time: 5.092 secs

This build could be faster, please consider using the Gradle Daemon: https://docs.gradle.org/2.10/userguide/gradle_daemon.html

$ mysql -u user -ppassword sample -e ""show tables; show columns from student""
mysql: [Warning] Using a password on the command line interface can be insecure.
+------------------+
| Tables_in_sample |
+------------------+
| student          |
+------------------+
+------------+-------------+------+-----+---------+----------------+
| Field      | Type        | Null | Key | Default | Extra          |
+------------+-------------+------+-----+---------+----------------+
| student_id | int(11)     | NO   | PRI | NULL    | auto_increment |
| name       | varchar(50) | NO   |     | NULL    |                |
| grade      | int(11)     | NO   |     | NULL    |                |
+------------+-------------+------+-----+---------+----------------+

</code></pre>
はい!!
確かにstudentテーブルが作成されています。

CRUDとかDAOとかもっともっとできることはあるんだろうけど、
今回はとりあえずここまで。

参考URL

<ul>
 	<li>Javaビーム研究所 Exposedの使い方 http://blog.orekyuu.net/?p=484</li>
 	<li>算譜王におれはなる!!!! KotlinでDBアクセスしてみた(原始的な方法、標準ライブラリ、3rdパーティライブラリ)</li>
 	<li><a href=""http://taro.hatenablog.jp/entry/2013/08/06/214702"">http://taro.hatenablog.jp/entry/2013/08/06/214702</a></li>
 	<li>https://github.com/JetBrains/Exposed/blob/master/src/main/kotlin/org/jetbrains/exposed/sql/Database.kt</li>
</ul>

&nbsp;
"
"1","2017-01-02 11:01:49","2018-08-26 12:59:34","KotlinでHello world!!","kotlin-hello-world","http://ver-1-0.net/wp-content/uploads/2017/01/PPW_umaretabakarinotori_TP_V.jpg","engineering::::for-beginner","KotlinでHello Worldしてみる。
OSは Mac OS 上に立てたゲストOS のLubuntu バージョンは16.10

①とりあえずJavaをインストール
Oracle's PPAを追加してからapt-get
<pre><code class=""language-bash"">sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update
sudo apt-get install oracle-java8-installer
</code></pre>
参考URL
<a href=""http://kiy271.hatenablog.com/entry/2014/09/05/230624"">http://kiy271.hatenablog.com/entry/2014/09/05/230624</a>

[after_intro]

&nbsp;

&nbsp;

②コンパイラをインストール
<a href=""https://kotlinlang.org/docs/tutorials/command-line.html"">https://kotlinlang.org/docs/tutorials/command-line.html</a>
<pre><code class=""language-bash"">curl -s https://get.sdkman.io | bash
ログアウトしてから
sdk install kotlin
</code></pre>
③Hello World!!

まずは、Hello.ktを作って
<strong>hello.kt</strong>
<pre><code class=""language-kotlin"">fun main(args: Array) {
    println(""Hello, World!"")
}
</code></pre>
コンパイルして実行。
jarファイルができるので、
いつものjavaコマンドで実行。
<pre><code class=""language-bash"">kotlinc hello.kt -include-runtime -d hello.jar
java -jar hello.jar
</code></pre>
&nbsp;

できた。
<pre><code class=""language-bash"">java -jar hello.jar
Hello, World!
</code></pre>
sdkmanを使うとHelloWorldまでは、10分くらいでできてしまいますね。
この後はここのチュートリアルなどをして慣れる感じですかね。

&nbsp;
<h2>kotelin HelloWorld 補足1</h2>
できたjarの中を見てみると
kotlin/~ というKotelinランタイムのクラスファイルが格納されている。
<pre><code class=""language-bash"">
jar -tvf hello.jar 
    76 Tue Jan 03 11:06:36 JST 2017 META-INF/MANIFEST.MF
   953 Tue Jan 03 11:06:36 JST 2017 HelloKt.class
    29 Tue Jan 03 11:06:36 JST 2017 META-INF/main.kotlin_module
   767 Mon Dec 26 15:28:40 JST 2016 kotlin/ArrayIntrinsicsKt.class
  1296 Mon Dec 26 15:28:40 JST 2016 kotlin/Deprecated.class
  1249 Mon Dec 26 15:28:40 JST 2016 kotlin/DeprecationLevel.class
   730 Mon Dec 26 15:28:40 JST 2016 kotlin/ExtensionFunctionType.class
   405 Mon Dec 26 15:28:40 JST 2016 kotlin/Function.class
   476 Mon Dec 26 15:28:44 JST 2016 kotlin/KotlinNullPointerException.class
</code></pre>
これをjarに含めたくない場合は-include-runtimeのオプションを外してコンパイルする。
<pre><code class=""language-bash"">kotlinc hello.kt -d hello.jar
jar tvf hello.jar 
    76 Tue Jan 03 11:21:24 JST 2017 META-INF/MANIFEST.MF
   953 Tue Jan 03 11:21:24 JST 2017 HelloKt.class
    29 Tue Jan 03 11:21:24 JST 2017 META-INF/main.kotlin_module
</code></pre>
<h2>kotelin HelloWorld 補足2 Vimでkotlin</h2>
vimのkotlin用プラグインをインストール
<a href=""https://github.com/udalov/kotlin-vim"">https://github.com/udalov/kotlin-vim</a>

&nbsp;
"
"209","2017-02-12 09:26:57","2018-01-30 23:22:37","KotlinでHelloWorld　パート2 ( InteliJ IDEA編)","kotlin-helloworld-intelij-idea","http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-12-9.18.14.png","engineering::::for-beginner","&nbsp;

以前に

<strong><a href=""http://ver-1-0.net/2017/01/02/kotlin-hello-world/"">KotlinでHello world!!!</a></strong>

として
記事を書きましたが、
今後本格的に開発をしたりする際にvimで全部やる
のは辛いなと思ったので、
JetBrains社製の<strong>InteliJ IDEA</strong>というIDE(統合開発環境)を
使ってみることにしました。

&nbsp;

ダウンロード先
<a href=""https://www.jetbrains.com/idea/"">https://www.jetbrains.com/idea/</a>
Community Editionであれば無料でお試しできます。

&nbsp;

IDEAでKotlinプロジェクト作ってから
HelloWorldするまでを動画に録りました。

[video width=""960"" height=""540"" mp4=""http://ver-1-0.net/wp-content/uploads/2017/02/Kotlin_HelloWorld_IDEA.mp4""][/video]
<strong>※無音ですので、安心してご利用ください。</strong>

&nbsp;

動画を撮った後で気付いたのですが、
プロジェクトを作るときに
<strong>"" Create directories for empty content roots automatically. ""</strong>
というのを選択すれば、
動画のようにわざわざディレクトリ作る必要ないんですね。。。
<a href=""http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-12-9.11.32.png""><img class=""alignnone size-large wp-image-211"" src=""http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-12-9.11.32-1024x512.png"" alt=""create empty directories"" width=""700"" height=""350"" /></a>

&nbsp;

&nbsp;

&nbsp;

動画自体は本当に短いし、
難しいことはしていないです。
IDEAを使うと本当に簡単にkotlin導入できますね。
便利です。

元々はvagrant上に環境作ってとかやろうとしましたが、
IDEAを使ってリモートの
ソースをいじるとなるとIDEAの威力が
弱まる気がしたので、
普通にMac上に環境作ってやっていきたいですね。

以上。

IDEAでHelloWorldでした。"
"188","2017-02-05 22:48:17","2018-08-26 12:35:52","Kotlinでhttpリクエストを投げてみる。 (khttp)","kotlin-http-request-khttp","http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-05-22.49.48.png","engineering","&nbsp;

&nbsp;

さて、前回のHelloWorldに引き続き今回は
<strong>kotlinでHTTPリクエスト</strong>を送ってみます。
[after_intro]

&nbsp;

<h2 class=""chapter"">khttpを使ってみる</h2>

今回使用するライブラリは、
<strong>khttp です</strong>
<a href=""https://github.com/jkcclemens/khttp"">https://github.com/jkcclemens/khttp</a>

ライブラリは
<a href=""https://kotlinlang.org/docs/resources.html"">ここ</a>
から見つけてきました。

使い方は<strong>khttp</strong>の上記リンク先に書いています。

ひとまず build.gradle.ktsは
<pre><code class=""language-groovy"">buildscript {

    repositories {
        gradleScriptKotlin()
    }

    dependencies {
        classpath(kotlinModule(""gradle-plugin""))
    }
}

plugins {
    application
}

apply {
    plugin(""kotlin"")
}

configure {
    mainClassName = ""samples.HelloWorldKt""
}

repositories {
    gradleScriptKotlin()
    jcenter()
}

dependencies {
    compile(kotlinModule(""stdlib""))
    ""compile""(""khttp:khttp:0.1.0"")
}
</pre></code>
こんな感じで
メインの処理は以下です。
<pre><code class=""language-kotlin"">package samples

import khttp.get

fun main(args: Array) {
    var url : String = ""https://lightning.bitflyer.jp/v1/getboard"" // bitFlyerのAPI URL
    // Get our IP
    println(get(url).jsonObject.getInt(""mid_price""))
}
</code></pre>
リクエストの送信先はなんでもいいのですが
今回は私の最近気になる、
<strong>bitFlyer</strong>さんの<strong>API</strong>を利用して、
<strong>ビットコイン</strong>の現在価格を取得してきます。
<a href=""https://px.a8.net/svt/ejp?a8mat=2TAGV9+1IRYQY+3JJ4+631SX"" target=""_blank"">
<img src=""https://www21.a8.net/svt/bgt?aid=170129637092&amp;wid=004&amp;eno=01&amp;mid=s00000016528001022000&amp;mc=1"" alt="""" width=""468"" height=""60"" border=""0"" /></a>
<img src=""https://www15.a8.net/0.gif?a8mat=2TAGV9+1IRYQY+3JJ4+631SX"" alt="""" width=""1"" height=""1"" border=""0"" />

ちなみにjson はこんな形でレスポンスを返します。
<pre><code class=""language-json"">{""mid_price"":116884.0,
""bids"":[{""price"":116867.0,""size"":2.346},
        {""price"":116853.0,""size"":2.0},
        {""price"":116850.0,""size"":10.18},
        {""price"":116845.0,""size"":0.04046836},
        ・
        ・
        ・
        （略)
</code></pre>

&nbsp;


では、実際に動かしてみます。
<pre><code class=""language-bash"">$ ./gradlew run
:compileKotlin
w: The '-d' option with a directory destination is ignored because '-module' is specified
:compileJava NO-SOURCE
:copyMainKotlinClasses
:processResources NO-SOURCE
:classes UP-TO-DATE
:run
116840
BUILD SUCCESSFUL
</code></pre>
ちなみに余計な出力を消すときは
<strong>-q オプション</strong>
をつけてあげてください。

見事 1BTCあたりの日本円価格の取得に成功しています。
以上です!!

&nbsp;

&nbsp;

[after_article]"
"664","2017-09-18 23:57:53","2018-08-26 11:42:05","Kotlin + Spring Boot で Web APIを作成してみる。 ~その①~","kotlin-spring-api-1","http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-05-22.49.48.png","engineering","&nbsp;

こんばんは、
3連休でどこも出かけなかった
<a href=""https://twitter.com/?lang=ja"">@version1</a>
です。

&nbsp;

もう少し有意義に過ごせたのでは、
という思いは募る一方ですが、
それは置いておいて久しぶりに<strong>Kotlin</strong>に関する記事です。

(3連休でこれしか更新していない・・・
+CRUD全てをAPIからできるようにしたかったけど
終わらなかった。。)

[after_intro]

タイトルもその①としたように、
今回はAPIで本のリストと、ID指定した本一件を
jsonで返却するAPIまでです。

&nbsp;

そのほかの、<strong>作成・削除・更新</strong>は
いつの日か更新します！！
（8割くらいはできているんだけど、詰めの部分でまだあげられないとして
今回の記事からは外しました。）

ではでは早速行きましょう。

&nbsp;

&nbsp;
<h2 class=""chapter"">前提条件</h2>
使用する構成はいつもの通りです。
<table>
<tbody>
<tr>
<th>Framework:</th>
<td>Spring Boot</td>
</tr>
<tr>
<th>Language:</th>
<td>Kotlin</td>
</tr>
<tr>
<th>Database:</th>
<td>Mysql</td>
</tr>
<tr>
<th>Build:</th>
<td>Gradle</td>
</tr>
</tbody>
</table>
&nbsp;

データベースは
booksテーブルだけで、
これを<strong>Kotlin+SpringBoot</strong>でこねこねして
jsonで返却するの今回のミッションになります。

&nbsp;

&nbsp;

ちなみに今回使用するテーブルは
SQLだと以下のようになります。

&nbsp;
<pre><code class=""language-kotlin"">create table if not exists books (
  id int primary key,
  name varchar(255),
  author varchar(255),
  isbn varchar(255),
  category_id int,
  created_at datetime,
  updated_at datetime
);

delete from books;
insert into books
VALUES( 1 , '多動力' ,'堀江貴文', '9784344031159', 1 , NOW() , NOW()),
( 2 , 'キングダム47巻' ,'原泰久', '9784088907017', 2 , NOW() , NOW()),
( 3 , '深夜特急〈1〉香港・マカオ (新潮文庫)' ,'沢木耕太郎', '9784101235059', 3 , NOW() , NOW());
</code></pre>
&nbsp;

&nbsp;

イメージが湧きづらい人用に
一覧ページも作成しました。

<img class=""alignnone size-full wp-image-667"" src=""http://ver-1-0.net/wp-content/uploads/2017/09/スクリーンショット-2017-09-18-23.29.36.png"" alt=""kotlin api を説明する上でイメージを沸かせるための画面。本一覧。"" width=""608"" height=""264"" />

↑この一覧がJSON形式で取得できれば成功です。

&nbsp;

&nbsp;

ちなみにgitレポジトリも用意したので
どうぞ。
<a href=""https://github.com/version-1/kotlin-api-sample-"">https://github.com/version-1/kotlin-api-sample-</a>

&nbsp;

&nbsp;
<h2 class=""chapter"">早速Kotlin+SpringBoot APIの説明</h2>
&nbsp;

&nbsp;

はじめに、
ファイル構成を
<img class=""alignnone size-full wp-image-669"" src=""http://ver-1-0.net/wp-content/uploads/2017/09/スクリーンショット-2017-09-18-23.37.23.png"" alt=""kotlin+SpringBoot APIのファイル構成"" width=""343"" height=""363"" />

このように
以前のKotlinシリーズでもおなじみの
構成となっております。

わからない方はこちらが参考になるかと思います。
<a href=""http://ver-1-0.net/2017/02/13/kotlin-spring-boot/"">Kotlin + Spring boot で DBからデータ取得して画面に表示</a>

&nbsp;

&nbsp;

はい、
では下が実際のコードです。

BookController
<pre><code class=""language-kotlin"">@Controller
class BookController @Autowired constructor(private val bookService: BookService) {

    @RequestMapping(""/books"")
    fun index(): ModelAndView = ModelAndView(""/book/index"").apply { addObject(""books"", bookService.findAllBook()) }

    @RequestMapping(""/api/books"")
    fun api_index(): ResponseEntity&lt;MutableList&gt; {
        return ResponseEntity.ok(bookService.findAllBook())
    }
    @RequestMapping(""/api/books/{id}"")
    fun api_show(@PathVariable(""id"") id : Int): ResponseEntity {
        return ResponseEntity.ok(bookService.findById(id))
    }

}
</code></pre>
&nbsp;

それぞれなんてことはないコードですね。

&nbsp;

個人的な今回の学びは、
URLから値をとってくるのに
<pre><code class=""language-kotlin"">@RequestMapping(""/api/books/{id}"")
    fun api_show(@PathVariable(""id"") id : Int): ResponseEntity {
</code></pre>
のようにかけることと

ResponseEntityクラスを使うとクラスをそのまま
jsonにして返却できることですかね。

&nbsp;

&nbsp;

ちなみに
springを起動して
http://localhost:8080/api/booksにアクセスすると
<img class=""alignnone size-full wp-image-670"" src=""http://ver-1-0.net/wp-content/uploads/2017/09/スクリーンショット-2017-09-18-23.41.56.png"" alt=""本のリストのJSONレスポンス"" width=""718"" height=""349"" />

&nbsp;

&nbsp;

本の一覧が

http://localhost:8080/api/books/1にアクセスすると

<img class=""alignnone size-full wp-image-671"" src=""http://ver-1-0.net/wp-content/uploads/2017/09/スクリーンショット-2017-09-18-23.42.05.png"" alt=""本のID指定のJSONレスポンス"" width=""719"" height=""302"" />

&nbsp;

指定したIDの本一件を
取得することができます。

以上、
参照だけだと結構さっくり終わりますね。
次回は作成・更新・削除の部分を公開します。

[adsense]"
"220","2017-02-13 07:35:24","2018-08-26 12:20:03","Kotlin + Spring boot で DBからデータ取得して画面に表示","kotlin-spring-boot","http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-05-22.49.48.png","engineering","&nbsp;

はい、
kotlinシリーズ
今回はいよいよSpring Bootと合わせてみて
DBのデータをViewに表示するまでを
やってみました。

&nbsp;

&nbsp;

この記事を書くにあたり以下のリンクを
大変参考にさせて頂きました。

&nbsp;

a fledgling
駆け出しが駆け出してみる
Kotlin+SpringBootでWebアプリを作ってみる その1
<a href=""http://kissybnts.hatenablog.com/entry/2016/03/29/002331"">http://kissybnts.hatenablog.com/entry/2016/03/29/002331</a>
[after_intro]

&nbsp;
<h2 class=""chapter"">構成</h2>
&nbsp;

構成は以下のような形です。

<hr />

言語 : Kotlin
フレームワーク : Spring Boot
テンプレートエンジン : Thymeleaf
DB : MySQL
ビルドツール: Gradle

<hr />

&nbsp;

では、まずは build.gradle から
<h2>build.gradle</h2>
<pre><code class=""language-groovy"">buildscript {
    ext {
        springBootVersion = '1.5.1.RELEASE'
        ext.kotlin_version = '1.0.5'
        ext.kotlinx_html_version = '0.5.12'
    }
    repositories {
        jcenter()
        mavenCentral()
        maven { setUrl(""http://dl.bintray.com/kotlin/kotlin-eap-1.1"") }
    }
    dependencies {
        classpath(""org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"")
        classpath(""org.springframework:springloaded:1.2.4.RELEASE"")
        classpath ""org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version""
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

jar {
    baseName = 'kotlin-web-app-sample'

    version = '0.0.1-SNAPSHOT'
}

repositories {
    jcenter()
    mavenCentral()
}


dependencies {
    compile ""org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version""
    compile(""org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"")
    compile('org.springframework.boot:spring-boot-starter')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile ""org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}""
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile 'mysql:mysql-connector-java:5.1.6'
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile 'io.kotlintest:kotlintest:1.3.6'
}
</code></pre>
&nbsp;

当初は、
kotlinx.htmlやexposedあたりを使おうかと
画策していたのですが、
習得などWebアプリケーションとして体をなすのに
時間がかかりそうでしたので
上記のような構成になっています。

&nbsp;

ディレクトリ構成は以下のようにしてみました。
<a href=""http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-12-23.20.04.png""><img class=""alignnone size-full wp-image-221"" src=""http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-12-23.20.04.png"" alt=""kotlin webアプリ ディレクトリ構成"" width=""834"" height=""680"" /></a>

各ソースはgitHubにあげたのでよかったらどうぞ
<a href=""https://github.com/version-1/kotlin-web-app-sample"">https://github.com/version-1/kotlin-web-app-sample</a>

&nbsp;

起動時に実行される
schema.sqlは以下のようにして
<pre><code class=""language-sql"">create table if  not exists users (
  id int primary key,
  name varchar(255),
  age int,
  sex tinyint
);

delete from users;
insert into users
VALUES( 1 , 'John' , 26 , 1),
( 2 , 'Bob' , 40 , 1),
( 3 , 'Michael' , 20 , 1),
( 4 , 'Mary' , 30 , 0);
</code></pre>
&nbsp;

&nbsp;

ターミナルから、gradle bootRun としてから
http://localhost
に接続すると以下のような画面が見れます。

<a href=""http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-12-23.58.30.png""><img class=""alignnone size-full wp-image-223"" src=""http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-12-23.58.30.png"" alt=""ユーザ一覧"" width=""707"" height=""472"" /></a>


&nbsp;

MVCあたりのソースも載せておきます。

&nbsp;
<h2>UserController.kt</h2>

<hr />

<pre><code class=""language-kotlin"">package samples.controller

/**
 * Created by version1 on 2017/02/11.
 */

import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Controller
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.servlet.ModelAndView
import samples.service.UserService


@Controller
class UserController @Autowired constructor(private val userService: UserService) {
    @RequestMapping(""/"")
    fun root(): ModelAndView{
        return users()
    }

    @RequestMapping(""/users"")
    fun users(): ModelAndView = ModelAndView(""/user"").apply { addObject(""users"", userService.findAllUser()) }
}

</code></pre>
<h2>User.kt</h2>

<hr />

<pre><code class=""language-kotlin"">package samples.model

/**
 * Created by version1 on 2017/02/11.
 */

import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.GeneratedValue
import javax.persistence.Id
import javax.persistence.Table

/**
 * userテーブルのEntity.
 * @param id 主キー
 * @param name 名前
 * @param age 年齢
 * @param sex 性別 ( 0・・・ 女  1・・・男)
 */
@Entity
@Table(name = ""users"")
data class User(@Id @GeneratedValue var id: Int? = 0,
                @Column(nullable = false) var name: String = """",
                @Column var age: Int? = 0,
                @Column(nullable = false) var sex: Int = 0) {
}
</code></pre>
<h2>UserRepository</h2>

<hr />

<pre><code class=""language-kotlin"">package samples.repository

/**
 * Created by version1 on 2017/02/11.
 */


import samples.model.User
import org.springframework.data.jpa.repository.JpaRepository
import org.springframework.stereotype.Repository

/**
 * usersテーブルのRepository.
 */
@Repository
interface UserRepository : JpaRepository&lt;User, Long&gt; {
}
</code></pre>
<h2>UserService</h2>

<hr />

<pre><code class=""language-kotlin"">package samples.service

/**
 * Created by version1 on 2017/02/11.
 */

import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service
import samples.model.User
import samples.repository.UserRepository

/**
 * DBからのデータ取得と加工を行う.
 */
@Service
open class UserService @Autowired constructor(private val userRepository: UserRepository) {

    /**
     * 全ユーザリストの取得
     * @return ユーザリスト
     */
    fun findAllUser(): MutableList = userRepository.findAll()
}
</code></pre>
&nbsp;
<h2 class=""chapter"">今回学んだこと</h2>
Springの経験がある方はなんてことのない
ことかもしれませんが
<ul>
 	<li>Springは起動時にクラスパス内の<strong>schema.sql</strong>を実行する。</li>
 	<li>データベースなどの接続情報はクラスパス内に<strong>application.yml</strong>を配置して、それに書く</li>
 	<li>Thymeleafは標準で、<strong>""classpath:/templates/返却された文字列（あるいはメソッド名).html""</strong> をレンダリングする。</li>
</ul>
ということを知りました。
Springには他にも色々と機能があるそなので
Kotlinと合わせて知識を深めていく必要がありそうですね。

これで無事Webアプリの骨組みみたいなものは
できたと思うので、
これを自分が作りたいものに合わせて
変えていければいいですね^^
次回は、Kotlinでテストコードを書いてみたいです!!
以上です。

テストコードの記事はまだ書いていませんが。。。
他にもKoltinの記事追加しました。
ご興味あればどうぞ^^

・<a href=""https://ver-1-0.net/2017/09/18/kotlin-spring-api-1/"">Kotlin + Spring Boot で Web APIを作成してみる。 ~その①~</a>
・<a href=""https://ver-1-0.net/2017/06/05/kotlin-spring-boot-authentication/"">Kotlin + Spring Boot でログイン認証を実装</a>

"
"401","2017-06-05 09:51:21","2018-08-26 12:02:45","Kotlin + Spring Boot でログイン認証を実装","kotlin-spring-boot-authentication","http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-05-22.49.48.png","engineering","&nbsp;

&nbsp;

webアプリには、
だいたいログイン機能を
実装する必要がありますよね。

なので、
今回はKotlin + Spring Boot での
ログイン機能を
実装します。

ソースはgithubにあげているので、
cloneしていただければ試運転できます。

[video width=""1920"" height=""1080"" mp4=""http://ver-1-0.net/wp-content/uploads/2017/06/kotlin-auth.mp4""][/video]

Springには、
SpringSecurityという認証管理を行う
フレームワークがあるので、
そういう便利なものを
使って実装していきます。
[after_intro]

&nbsp;
<h2 class=""chapter"">構成</h2>
構成はざっくり書くと、
フレームワーク: Spring
言語: Kotlin
DB: Mysql
ビルド: Gradle

です。

&nbsp;
<h2 class=""chapter"">Gradleへの依存性追加</h2>
&nbsp;

<a href=""https://gradle.org/"">Gradle</a>はjavaのビルドツールで、
アプリケーションのライブラリの依存性管理を行うツールです。

まずは、spring-securityの依存性を追加します。

<a href=""https://github.com/version-1/kotlin-auth-sample/blob/master/build.gradle"">build.gradle</a>
<pre><code class=""language-groovy"" >
dependencies {
    compile ""org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version""
    compile(""org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"")
    compile('org.springframework.boot:spring-boot-starter')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile ""org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}""
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile 'mysql:mysql-connector-java:5.1.6'
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile 'io.kotlintest:kotlintest:1.3.6'
}
</code></pre>

&nbsp;

<pre><code class=""language-groovy"">compile('org.springframework.boot:spring-boot-starter-security')
</code></pre>
これがspring-securityの部分です。
これを追加して、gradle buildすれば準備は完了です。

&nbsp;

&nbsp;
<h2 class=""chapter"">DBの準備</h2>
DBは以下のように、schema.sqlに書いて用意します。
今回はpasswordを平文で保存してますが、
実運用する際は、変換して保存するなどが必要です。
<pre><code class=""language-sql"">drop table users;
create table if not exists users (
  id int primary key,
  name varchar(255),
  email varchar(255),
  encrypted_password varchar(255),
  age int,
  sex tinyint,
  created_at datetime,
  updated_at datetime
);

delete from users;
insert into users
VALUES( 1 , 'John' ,'john@example.com', 'password', 26 , 1 , NOW() , NOW()),
( 2 , 'Bob' ,'bob@example.com','password', 40 , 1, NOW() , NOW()),
( 3 , 'Michael' ,'michael@example.com','password', 20 , 1, NOW() , NOW()),
( 4 , 'Mary' ,'mary@example.com','password', 30 , 0, NOW() , NOW());

</code></pre>
&nbsp;
&nbsp;
&nbsp;
<h2 class=""chapter"">設定クラスの実装</h2>
&nbsp;

&nbsp;

<a href=""https://github.com/version-1/kotlin-auth-sample/blob/master/src/main/kotlin/auth/SecurityConfig.kt"">SecurityConfig.kt</a>
<pre><code class=""language-kotlin"">
package kintai

/**
 * Created by admin on 2017/05/26.
 */
import kintai.AuthenticationFailureHandler
import kintai.service.UserDetailsServiceImpl

import org.springframework.beans.factory.annotation.Autowired
import org.springframework.context.annotation.Configuration
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder
import org.springframework.security.config.annotation.authentication.configurers.GlobalAuthenticationConfigurerAdapter
import org.springframework.security.config.annotation.web.builders.HttpSecurity
import org.springframework.security.config.annotation.web.builders.WebSecurity
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder
import org.springframework.security.web.util.matcher.AntPathRequestMatcher
/**
 * Spring Security設定クラス.
 */
@Configuration
@EnableWebSecurity   // Spring Securityの基本設定
open class SecurityConfig : WebSecurityConfigurerAdapter() {

    override fun configure(web : WebSecurity ) {
        // ここに設定したものはセキュリティ設定を無視
        web.ignoring().antMatchers(
                            ""/**/favicon.ico"",
                            ""/images/**"",
                            ""/css/**"",
                            ""/javascript/**"",
                            ""/webjars/**"")
    }

    override fun configure(http : HttpSecurity )  {
        // 認可の設定
        http.authorizeRequests()
            .antMatchers(""/"", ""/index"").permitAll() // indexは全ユーザーアクセス許可
            .anyRequest().authenticated()  // それ以外は全て認証無しの場合アクセス不許可

        // ログイン設定
        http.formLogin()
            .loginProcessingUrl(""/users/login"")   // 認証処理のパス
            .loginPage(""/index"")            // ログインフォームのパス
            .failureHandler(AuthenticationFailureHandler())       // 認証失敗時に呼ばれるハンドラクラス
            .defaultSuccessUrl(""/login/success"")     // 認証成功時の遷移先
            .usernameParameter(""email"").passwordParameter(""encrypted_password"")  // ユーザー名、パスワードのパラメータ名
            .and()

        // ログアウト
        http.logout()
            .logoutRequestMatcher(AntPathRequestMatcher(""/logout**""))
            .logoutSuccessUrl(""/index"")

    }

    @Configuration
    open class AuthenticationConfiguration : GlobalAuthenticationConfigurerAdapter() {
        @Autowired var userDetailsService : UserDetailsServiceImpl = UserDetailsServiceImpl() ;

        override fun init( auth : AuthenticationManagerBuilder) {
            // 認証するユーザーの設定
            auth.userDetailsService(userDetailsService)


        }
    }
}
</code></pre>
コメントに書いているようにこのクラスで
ログインなしでアクセスできるURLや認証後の遷移先などを設定できます。

ちなみにログイン失敗したときに定義している
AuthenticationFailureHandler
は以下のような感じ。

<a href=""https://github.com/version-1/kotlin-auth-sample/blob/master/src/main/kotlin/auth/AuthenticationFailureHandler.kt"">AuthenticationFailureHandler</a>
<pre><code class=""language-kotlin"">package kintai

/**
 * Created by admin on 2017/05/26.
 */
import java.io.IOException

import javax.servlet.ServletException
import javax.servlet.http.HttpServletRequest
import javax.servlet.http.HttpServletResponse


import org.springframework.security.authentication.BadCredentialsException
import org.springframework.security.core.AuthenticationException
import org.springframework.security.web.authentication.AuthenticationFailureHandler

/**
 * Spring Securityの認証失敗時に呼ばれるハンドラクラス
 */
class AuthenticationFailureHandler : AuthenticationFailureHandler {

    @Throws(IOException::class, ServletException::class)
    override fun onAuthenticationFailure(
            httpServletRequest: HttpServletRequest,
            httpServletResponse: HttpServletResponse,
            authenticationException: AuthenticationException) {

        var errorId = """"
        // ExceptionからエラーIDをセットする
        if (authenticationException is BadCredentialsException) {
            errorId = ""ERR-0001""
        }

        // ログイン画面にリダイレクト
        httpServletResponse.sendRedirect(httpServletRequest.contextPath + ""/index?error="" + errorId)
    }
}
</code></pre>
&nbsp;

[mid_article]

&nbsp;
<h2 class=""chapter"">画面テンプレートの作成</h2>
&nbsp;

&nbsp;

ページは二つだけで、
ログインフォームのあるページとログイン成功ページだけです。

index.html
<pre><code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html lang=""ja"" xmlns:th=""http://www.thymeleaf.org""&gt;
&lt;head&gt;
    &lt;meta charset=""UTF-8""/&gt;
    &lt;title&gt;トップページ&lt;/title&gt;
    &lt;style&gt;
        table,tr,td{
          border: 1px solid lightgray;
        }

    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;トップページ&lt;/h1&gt;
&lt;form id=""loginForm"" method=""post"" th:action=""@{/users/login}""&gt;
    &lt;input type=""text"" name=""email"" /&gt;
    &lt;input type=""password"" name=""encrypted_password""/&gt;
    &lt;input type=""submit"" value=""ログイン""/&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
&nbsp;

login/success.html
<pre><code class=""language-markup"">
&lt;!DOCTYPE html&gt;
&lt;html lang=""en""&gt;
&lt;head&gt;
    &lt;meta charset=""UTF-8""/&gt;
    &lt;title&gt;Login Sucess&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt; Successfully Login !!!!!!&lt;/h1&gt;
  &lt;a href=""/logout"" &gt;ログアウト&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
&nbsp;
&nbsp;
<h2 class=""chapter"">コントローラの作成</h2>
<pre><code class=""language-markup"">package kintai.controller

/**
 * Created by version1 on 2017/02/11.
 */

import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Controller
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.servlet.ModelAndView
import kintai.service.UserService


@Controller
class LoginController @Autowired constructor(private val userService: UserService) {

    @RequestMapping(""/"")
    fun root(): ModelAndView{
        return ModelAndView(""/index"")
    }

    @RequestMapping(""/index"")
    fun index(): ModelAndView{
        return ModelAndView(""/index"")
    }

    @RequestMapping(""/login/success"")
    fun users(): ModelAndView = ModelAndView(""/login/success"")
}
</code></pre>
コントローラでルーティングを定義しています。
<h2 class=""chapter"">Serviceの定義</h2>
認証するユーザの取得する部分を書いています。

<a href=""https://github.com/version-1/kotlin-auth-sample/blob/master/src/main/kotlin/auth/service/UserDetailsServiceImpl.kt"">UserDetailsServiceImpl</a>
<pre><code class=""language-markup"">package kintai.service

/**
 * Created by version1 on 2017/05/26.
 */

import kintai.model.LoginUser
import kintai.model.User
import org.springframework.beans.factory.annotation.Autowired

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Component;

/**
 * UserDetailsServiceの実装クラス
 * Spring Securityでのユーザー認証に使用する
 */
@Component
open class UserDetailsServiceImpl :UserDetailsService {

    @Autowired
    lateinit var userService: UserService

    override fun loadUserByUsername(username : String ) : UserDetails{
    // 認証を行うユーザー情報を格納する
        var user : User?  = null
        try {
            // 入力したユーザーIDから認証を行うユーザー情報を取得する
            user = userService.findByEmail(username)
        } catch (e:Exception ) {
            // 取得時にExceptionが発生した場合
            throw UsernameNotFoundException(""It can not be acquired User"");
        }

        // ユーザー情報を取得できなかった場合
        if(user == null){
            throw UsernameNotFoundException(""User not found for login id: "" + username);
        }

        // ユーザー情報が取得できたらSpring Securityで認証できる形で戻す
        return LoginUser(user);
    }

}


</code></pre>
返却するLoginUserクラスはこれ
&nbsp;
&nbsp;
<pre><code class=""language-markup"">package auth.model

/**
 * Created by admin on 2017/05/26.
 */

import auth.model.User
import org.springframework.security.core.authority.AuthorityUtils;

/**
 * 認証ユーザーの情報を格納するクラス
 */
class LoginUser (user: User): org.springframework.security.core.userdetails.User( user.email, user.encrypted_password,
        AuthorityUtils.createAuthorityList(""ROLE_USER"")) {
    /**
     * ログインユーザー
     */
    var loginUser: User? = null

    init{
        // スーパークラスのユーザーID、パスワードに値をセットする
        // 実際の認証はスーパークラスのユーザーID、パスワードで行われる
        this.loginUser = user
    }

}
</code></pre>
ユーザをemailで引っ張ってくるのはこれ

<a href=""https://github.com/version-1/kotlin-auth-sample/blob/master/src/main/kotlin/auth/service/UserService.kt"">UserService</a>
<pre><code class=""language-markup"">package auth.service

/**
 * Created by version1 on 2017/02/11.
 */

import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service
import kintai.model.User
import kintai.repository.UserRepository

/**
 * DBからのデータ取得と加工を行う.
 */
@Service
open class UserService @Autowired constructor(private val userRepository: UserRepository) {

    /**
     * 全ユーザリストの取得
     * @return ユーザリスト
     */
    fun findAllUser(): MutableList = userRepository.findAll()
    fun findByEmail(email:String): User = userRepository.findByEmail(email)
}
</code></pre>
&nbsp;
&nbsp;
こんな感じです。
解説少ないですが、
コードが語ってくれるかと思います。（丸投げ笑）

<a href=""https://github.com/version-1/kotlin-auth-sample"">https://github.com/version-1/kotlin-auth-sample</a>
&nbsp;
&nbsp;"
"461","2017-06-24 11:32:23","2018-08-26 11:54:53","Kotlin文法-For,Ifなど制御構文編-","kotlin-syntax","http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-05-22.49.48.png","engineering::::for-beginner","今回は制御構文について紹介します。

制御構文とはは、
For文などループ文をさします。

それではまず、For文から

[after_intro]
<h2 class=""chapter"">繰り返し繰り返し - For文</h2>
&nbsp;

for each文のようなものも、
for文で書きます。

&nbsp;
<pre><code class=""language-kotlin"">fun main(args: Array) {
    var ints = arrayOf(1,2,3,4,5)

    for (item: Int in ints) {
        println(item)
    }
}

</code></pre>
&nbsp;

範囲を指定して書けば、
javaのfor文のようなものも書けます。

&nbsp;
<pre><code class=""language-kotlin"">for (item: Int in 1..10) {
        println(item)
    }
</code></pre>
&nbsp;
<h2 class=""chapter"">While文</h2>
最後while文です。
前置のwhileと後置のwhileがあるので、
両方紹介しておきます。

&nbsp;
<pre><code class=""language-kotlin"">
while (x &gt; 0) {
    x--
}

do {
    val y = retrieveData()
} while (y != null) // y is visible here!
</code></pre>
&nbsp;

&nbsp;
<h2 class=""chapter"">プログラムの必須構文 - IF文</h2>
<pre><code class=""language-kotlin"">if (a &gt; b) {
    max = a
} else {
    max = b
}
</code></pre>
はい、特に構文に変更はないです。
が、
以下のように、
三項演算子のように
書くこともできます。
<pre><code class=""language-kotlin"">val max = if (a &gt; b) a else b</code></pre>
&nbsp;
<pre><code class=""language-kotlin"">
fun main(args: Array) {
    var a : Int = 2
    var b: Int = 1

    val c = if (a &gt; b) {
        a
    } else {

        b
    }
    println(c)
}

</code></pre>
&nbsp;
<h2 class=""chapter"">Kotlinで特徴的な - When文</h2>
when文って何？？という方もいるかと思いますが、
case文とかswitch文の代わりになるものですね。
構文は以下の通り

&nbsp;
<pre><code class=""language-kotlin"">when (x) {
    1 -&gt; print(""x == 1"")
    2 -&gt; print(""x == 2"")
    else -&gt; { // Note the block
        print(""x is neither 1 nor 2"")
    }
}
</code></pre>
上記の場合,
1だったら""x == 1""を出力、
2だったら""x == 2""を出力、
他の場合は・・・
という感じです。

&nbsp;

""1 -&gt;""の比較部分は様々な書き方ができるようで
以下のようにOR条件で書けたり、

&nbsp;
<pre><code class=""language-kotlin"">when (x) {
    0, 1 -&gt; print(""x == 0 or x == 1"")
    else -&gt; print(""otherwise"")
}
</code></pre>
&nbsp;

関数を使ったり

&nbsp;
<pre><code class=""language-kotlin"">
when (x) {
    parseInt(s) -&gt; print(""s encodes x"")
    else -&gt; print(""s does not encode x"")
}
</code></pre>
範囲を指定したり、
<pre><code class=""language-kotlin"">
when (x) {
    in 1..10 -&gt; print(""x is in the range"")
    in validNumbers -&gt; print(""x is valid"")
    !in 10..20 -&gt; print(""x is outside the range"")
    else -&gt; print(""none of the above"")
}
</code></pre>
型を比較したり
<pre><code class=""language-kotlin"">
fun hasPrefix(x: Any) = when(x) {
    is String -&gt; x.startsWith(""prefix"")
    else -&gt; false
}
</code></pre>
できます。
<h2 class=""chapter"">最後に</h2>
今回は制御構文について書きましたが、
他にもわからないことがあれば、
ここのドキュメントを参加にすると良いと思います。
<a href=""http://kotlinlang.org/docs/reference/"">http://kotlinlang.org/docs/reference/</a>
また、
以下のページでは、
Kotlinをwebで試せるので是非。

<a href=""https://try.kotlinlang.org"">https://try.kotlinlang.org</a>

"
"435","2017-06-12 22:09:19","2018-08-26 11:57:42","Kotlinの基本文法について少しだけ（パッケージ・関数・変数の定義）","kotlin-syntax-alittle","http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-05-22.49.48.png","engineering","&nbsp;

これまでkotlinについていくつか
記事をあげてきましたが、
文法について触れていなかったので、
今回は文法について

&nbsp;
&nbsp;

<h2 class=""chapter"">パッケージの定義</h2>
まずはパッケージの定義について
ここはあまりjavaと変わりないですね。
「;」がなくなったことくらい
<pre><code class=""language-kotlin"">package my.demo

import java.util.*

// ...</code></pre>

&nbsp;
&nbsp;
&nbsp;
<h2 class=""chapter"">functionの定義</h2>
<pre><code class=""language-kotlin"">fun sum(a: Int, b: Int): Int {
    return a + b
}</code></pre>
kotlinのメソッドはfun　・・・と書くだけです。
functionと全部書きそうになりますが,
funだけです。

&nbsp;
&nbsp;

戻り値も
<pre><code class=""language-kotlin"">fun [関数名]( a: Int , b:Int): [返り値の型]{}
</code></pre>
のように書くのも特徴的です。
java で言う所のvoidのように返り値を返さない場合は、
ここを省略します。

&nbsp;

&nbsp;
<h2 class=""chapter"">変数の定義</h2>
<pre><code class=""language-kotlin"">val a: Int = 1 // 読み取り専用の変数。定数。

var a: Int = 1 // ローカル変数の宣言
</code></pre>

&nbsp;
&nbsp;

全部の文法を紹介するには、
少々根気がいるので、
今回はこれくらいで（少なすぎ笑）

Javaに慣れていると
少し読みづらいかもしれませんが、
慣れればシンプルにプログラムをかけるので
慣れていきましょう。"
"772","2017-10-05 23:53:16","2018-08-26 11:39:29","Kotlin + Spring Boot で Web APIを作成してみる。 ~その②~","kotlin-web-api","http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-05-22.49.48.png","engineering","&nbsp;

どうも前回こちらの

<a href=""https://ver-1-0.net/2017/09/18/kotlin-spring-api-1/"" target=""_blank"" rel=""noopener noreferrer"">Kotlin + Spring Boot で Web APIを作成してみる。 ~その①~</a>
記事でWeb APIをKotlin+Spring Bootで
作ってみるということをしてみました。

&nbsp;

が、

前回は、
CRUDでいう所のRの部分しかAPIとして
提供できていなかったので、
今回はCRUDの全てのメソッドを備えたRESTfulなAPI
を目指して前回のリポジトリをブラッシュアップしました。

[after_intro]

&nbsp;

&nbsp;
<h2 class=""chapter"">RESTFulなAPIにブラッシュアップ</h2>
<pre><code class=""language-kotlin"">
@Controller
class BookController @Autowired constructor(private val bookService: BookService) {

    @RequestMapping(""/books"")
    fun index(): ModelAndView = ModelAndView(""/book/index"").apply { addObject(""books"", bookService.findAllBook()) }

    @RequestMapping(""/api/books"")
    fun api_index(): ResponseEntity&lt;MutableList&gt; {
        return ResponseEntity.ok(bookService.findAllBook())
    }
    @RequestMapping(""/api/books/{id}"")
    fun api_show(@PathVariable(""id"") id : Int): ResponseEntity {
        return ResponseEntity.ok(bookService.findById(id))
    }

}
</code></pre>
&nbsp;
<pre><code class=""language-kotlin"">@Controller
class BookController @Autowired constructor(private val bookService: BookService) {

    @RequestMapping(""/books"")
    fun index(): ModelAndView = ModelAndView(""/book/index"").apply { addObject(""books"", bookService.findAllBook()) }

    @RequestMapping(""/api/books"")
    fun api_index(): ResponseEntity&lt;MutableList&gt; {
        return ResponseEntity.ok(bookService.findAllBook())
    }

    @RequestMapping(""/api/books/{id}"")
    fun api_show(@PathVariable(""id"") id : Int): ResponseEntity {
        return ResponseEntity.ok(bookService.findById(id))
    }

    @RequestMapping(""/api/books"", method = arrayOf(RequestMethod.PUT))
    fun api_update(@RequestBody book: Book): ResponseEntity{
        return ResponseEntity.ok(bookService.save(book))
    }

    @RequestMapping(""/api/books"", method = arrayOf(RequestMethod.POST))
    fun api_create(@RequestBody book: Book): ResponseEntity {
        return ResponseEntity.ok(bookService.save(Book( book.id, book.name,book.author,book.isbn)))
    }

    @RequestMapping(""/api/books/{id}"",method = arrayOf(RequestMethod.DELETE))
    fun api_delete(@PathVariable(""id"") id : Int):ResponseEntity{
        var book:Book = bookService.findById(id)
        if(book != null){
            bookService.delete(book)
        }
        return ResponseEntity.ok(book)
    }
}
</code></pre>

みての通り
api_delete,api_create,api_updateがメソッド
として追加され、
HTTPをもとにして、データの更新・削除・作成・参照ができるように
なりました。

&nbsp;

&nbsp;
<h2 class=""chapter"">そのほかの変更について</h2>
&nbsp;

&nbsp;

今回は新たに<strong>更新・削除・作成</strong>
のメソッドを追加したので、
serviceについても変更を加えています。

変更点は、
以下のようで
<pre><code class=""language-kotlin"">/**
 * DBからのデータ取得と加工を行う.
 */
@Service
open class BookService @Autowired constructor(private val bookRepository: BookRepository) {

    /**
     * 全ユーザリストの取得
     * @return ユーザリスト
     */
    fun findAllBook(): MutableList = bookRepository.findAll()
    fun findById(id:Int): Book{
        var book: Book = bookRepository.findById(id)
        return book
    }

    fun exists(id: Long) : Boolean{
        return bookRepository.exists(id)
    }

    fun save(book:Book){
        bookRepository.save(book)
    }

    fun delete(book:Book){
        bookRepository.delete(book)
    }
}
</code></pre>
今回追加したメソッドは、
save,exixts,deleteなどになりますが、
そのほとんどがBookRepositoryクラスに宣言されている
メソッドを利用しました。

前回の記事をアップした際にここまではほぼ80%完成している
と思っていたのですが、
createの部分がいかんせんうまくいきませんでした。

今でもなんでこんなことでスタックしてたんだろう・・・
と思うくらい簡単なことだったのですが、
前回公開した記事のsqlだとcreateができないので再掲します
<pre><code class=""language-kotlin"">create table if not exists books (
  id int primary key auto_increment,
  name varchar(255),
  author varchar(255),
  isbn varchar(255),
  category_id int,
  created_at datetime,
  updated_at datetime
);

delete from books;
insert into books
VALUES( 1 , '多動力' ,'堀江貴文', '9784344031159', 1 , NOW() , NOW()),
( 2 , 'キングダム47巻' ,'原泰久', '9784088907017', 2 , NOW() , NOW()),
( 3 , '深夜特急〈1〉香港・マカオ (新潮文庫)' ,'沢木耕太郎', '9784101235059', 3 , NOW() , NOW());
</code></pre>
はい、
驚くことにエラーの出ていた原因はテーブルの主キーに
オートインクリメントをつけていなかった為でした。。

とにもかくにも
RESTfulなAPIは作成できましたので、
ここにレポジトリを晒しておきます。
<a href=""https://github.com/version-1/kotlin-api-sample-"">https://github.com/version-1/kotlin-api-sample-</a>

クローンして、GET,PUT,POST,DELETEすれば
確認できるはずです。

以上です！！
"
"794","2017-10-11 00:05:25","2018-08-26 11:25:34","Laravel5.4とVue.jsでSPAを作ってみる。① -環境構築-","laravel-vue-spa-1","http://ver-1-0.net/wp-content/uploads/2017/10/0f71ba28509b81ba05c2dc6a54eb60d9_s.jpg","engineering","&nbsp;

LaravelはVue.jsを標準でサポートしており、
お手軽にSPAのアプリを作成することができます。

だいたい二回くらいで簡単なSPAのサンプルアプリを作る計画で、
今回はまず環境構築をしてきます。

&nbsp;

[adsense_double_rect]

&nbsp;

<h2 class=""chapter"">そもそもSPAって何？！</h2>
SPAとはSingle Page Applicationの略で、
従来のDOMを直接書き換えたり、ルートから<strong>画面全体</strong>を
再度描画(レンダリングとも言います）し直す、
<strong>クライアント-サーバ型</strong>のアプリケーションとは別に、
仮想DOMを用いて、<strong>差分</strong>だけ変更し、
ページ遷移を伴いwebアプリケーションのことです。

&nbsp;

&nbsp;

SPAでサイトを構築すると、
いちいち画面全体の描画を行わない（ページをリロードしたりしない）ので、
<strong>サクサクした使用感</strong>になります。

<strong>デメリット</strong>としては、
ブラウザが行なっていた操作なども、
記述しないといけないとめ<strong>実装のコストが高く</strong>、
難易度の高い技術となっていること。

初期ロードでそれら実装した大量のJavaScriptコード
なども読み込む必要があるので、
<strong>初期読み込みに時間がかかる</strong>ということがあるようです。
<h2 class=""chapter"">環境構築　Laravelアプリ作成・Vue.jsインストール</h2>
&nbsp;

&nbsp;

Laravel5.4のアプリ作成
（Laravelはすでに導入済みの体です。）
<pre><code class=""language-bash"">composer create-project --prefer-dist laravel/laravel  my-app ""5.4.*""</code></pre>
&nbsp;

&nbsp;

上でアプリが作成できたら、できたファイル群をみてみると。
以下のようになります。
<pre><code class=""language-bash"">$cd my-app/ &amp;&amp; ls -1
app            
artisan        
bootstrap
composer.json
composer.lock
config
database
package.json
phpunit.xml
public
readme.md
resources
routes
server.php
storage
tests
vendor
webpack.mix.js
</code></pre>
&nbsp;

&nbsp;

&nbsp;

今回はVueもインストールしないといけないので、
上の中にある。package.jsonをみてみると
<pre><code class=""language-json"">
""devDependencies"": {
    ""axios"": ""^0.16.2"",
    ""bootstrap-sass"": ""^3.3.7"",
    ""cross-env"": ""^5.0.1"",
    ""jquery"": ""^3.1.1"",
    ""laravel-mix"": ""^1.0"",
    ""lodash"": ""^4.17.4"",
    ""vue"": ""^2.1.10""
  }
</code></pre>
&nbsp;

&nbsp;

このような風に、最初からvueが
依存関係に記述されていることがわかります。
<pre><code>npm install</code></pre>
これらのモジュールをインストールします。

npmはNode.jsのパッケージを管理するツールです。
ちなみに、Nodeもすでにインストールされている前提です。

&nbsp;

&nbsp;

&nbsp;
<h2 class=""chapter"">環境構築　DB設定-salite3-</h2>
&nbsp;

&nbsp;

今回のDBはsqlite3を使用します。
<pre><code class=""language-bash"">$sqlite3
SQLite version 3.16.0 2016-11-04 19:09:39
Enter "".help"" for usage hints.
Connected to a transient in-memory database.
Use "".open FILENAME"" to reopen on a persistent database.
sqlite&gt; .open database/development.sqlite3
sqlite&gt; .q
</code></pre>
&nbsp;

sqliteのデータベースを作成したので、
作成したものをデータベースに指定します。
<pre><code class=""language-bash"">$cat .env
APP_NAME=Laravel
APP_ENV=local
APP_KEY=base64:tD+sSyvGr6EtipnDgOmBXCFlfwJsV6635aS3ssi/rgU=
APP_DEBUG=true
APP_LOG_LEVEL=debug
APP_URL=http://localhost

DB_CONNECTION=sqlite
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=../database/development.sqlite3
DB_USERNAME=
DB_PASSWORD=

BROADCAST_DRIVER=log
CACHE_DRIVER=file
SESSION_DRIVER=file
QUEUE_DRIVER=sync

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_DRIVER=smtp
MAIL_HOST=smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
</code></pre>
ここまでで、
<pre><code class=""language-bash"">php artisan serve</code></pre>
として、http://127.0.0.1:8000
にアクセスすればLaravelのトップページは確認可能です。

&nbsp;

&nbsp;

&nbsp;

&nbsp;
<h2 class=""chapter"">環境構築　トップページだけVueで描画してみる</h2>
&nbsp;

&nbsp;

作り込みは次回に回しますが、
とりあえず、npm installされた後にできるExampleページだけでも
描画できるようにしましょう。

resources/views/app.blade.php(新規作成)
<pre><code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html lang=""{{ config('app.locale') }}""&gt;
&lt;head&gt;
  &lt;meta charset=""utf-8""&gt;
  &lt;meta http-equiv=""X-UA-Compatible"" content=""IE=edge""&gt;
  &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1""&gt;

  &lt;title&gt;SPA-samples&lt;/title&gt;

  &lt;link rel=""stylesheet"" href=""{{ mix('css/app.css') }}""&gt;&lt;/script&gt;
  &lt;meta name=""csrf-token"" content=""{{ csrf_token() }}""&gt;
  &lt;script&gt;
  window.Laravel = {
    csrfToken: ""{{ csrf_token() }}""
  };
  &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id=""app"" class=""container""&gt;
    &lt;div class=""header""&gt;
      {{$description = __('messages.site-description') }}
      &lt;navbar description=""{{$description}}""&gt;&lt;/navbar&gt;
    &lt;/div&gt;
    &lt;div class=""wrapper""&gt;
      &lt;div class=""main""&gt;
        &lt;h2&gt;Contetns&lt;/h2&gt;
        &lt;hr&gt;
        &lt;router-view price=""{{__('labels.price')}}""&gt;&lt;/router-view&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=""footer""&gt;
      &lt;nav-footer&gt;&lt;/nav-footer&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;script src=""{{ mix('js/app.js') }}""&gt;&lt;/script&gt;
&lt;/html&gt;
</code></pre>
ルーティング設定で上で作成したapp.blade.phpが
読み込まれるように設定します。

&nbsp;

routes/web.php(編集)
<pre><code class=""language-php"">&lt;?php

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the ""web"" middleware group. Now create something great!
|
*/

Route::get('/', function () {
    return view('app');
});

</code></pre>
app.js はもともとありますが、
一応載せます。

resources/assets/app.js
<pre><code class=""language-javascript"">
/**
 * First we will load all of this project's JavaScript dependencies which
 * includes Vue and other libraries. It is a great starting point when
 * building robust, powerful web applications using Vue and Laravel.
 */

require('./bootstrap');

window.Vue = require('vue');

/**
 * Next, we will create a fresh Vue application instance and attach it to
 * the page. Then, you may begin adding components to this application
 * or customize the JavaScript scaffolding to fit your unique needs.
 */

Vue.component('example', require('./components/Example.vue'));

const app = new Vue({
    el: '#app'
});

</code></pre>
&nbsp;

これらが一通り終わったら
<pre><code class=""language-bash"">npm run dev</code></pre>
でresources配下のjsファイルなどをビルドして、
artisanでサーバを起動すると

<img class=""alignnone size-large wp-image-804"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-11-at-0.02.03-1024x739.png"" alt=""spa-demo-top-page"" width=""700"" height=""505"" />

これで、
resources/assets/js/component/Example.vue
の内容が表示されていることがわかります。
<pre><code class=""language-markup"">
&lt;template&gt;
  &lt;div class=""container""&gt;
    &lt;div class=""row""&gt;
      &lt;div class=""col-md-8 col-md-offset-2""&gt;
        &lt;div class=""panel panel-default""&gt;
          &lt;div class=""panel-heading""&gt;Example Component&lt;/div&gt;

          &lt;div class=""panel-body""&gt;
            I'm an example component!
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
  export default {
    mounted() {
      console.log('Component mounted.')
    }
  }
&lt;/script&gt;
</code></pre>
以上、ここまでで環境構築は終わりです。
次回は実際にVueのクライアントでのルーティングやAjax通信など
を使ってデモページを作成していきます。


<ins><a href=""https://ver-1-0.net/2017/10/11/laravel-vue-spa-2/""></a></ins>

&nbsp;

[adsense_double_rect]"
"807","2017-10-11 08:09:50","2018-08-26 11:36:41","Laravel5.4とVue.jsでSPAを作ってみる。② -クライアントルーティング-","laravel-vue-spa-2","http://ver-1-0.net/wp-content/uploads/2017/10/0f71ba28509b81ba05c2dc6a54eb60d9_s.jpg","engineering","&nbsp;

&nbsp;

前回はこの記事でLaravel5.4とVue.jsの環境構築を行いました。
<a href=""https://ver-1-0.net/2017/10/11/laravel-vue-spa-1/"">Laravel5.4とVue.jsでSPAを作ってみる。① -環境構築-</a>

今回は、
クライアント側でのルーティングを行なう形で
もう少し実践的な内容で進めていきます。

&nbsp;

記事の終わりにはこのようなページができます。
※無音なので、安心してご視聴ください。

[video width=""844"" height=""598"" mp4=""http://ver-1-0.net/wp-content/uploads/2017/10/spa-sample.mp4""][/video]

&nbsp;

動画をみるとわかりますが、
ページを切り替えているのに全体を読み込まず、
差分だけ切り替えているので、
これまでのWebアプリ特有のページの読み込みが無くなっています。

&nbsp;

[adsense_double_rect]

&nbsp;

<h2 class=""chapter"">vue-routerのインストール</h2>
&nbsp;

上の動画を実現するには、
クライアント側でルーティングを行う必要があるので、
vue-routerをインストールします。

<a href=""https://router.vuejs.org/ja/essentials/getting-started.html"">https://router.vuejs.org/ja/essentials/getting-started.html</a>
インストールの流れは簡単で、
package.jsonに依存性を追加 -&gt; npm installです。
<pre><code class=""language-json"">""devDependencies"": {
    ""axios"": ""^0.16.2"",
    ""bootstrap-sass"": ""^3.3.7"",
    ""cross-env"": ""^5.0.1"",
    ""jquery"": ""^3.1.1"",
    ""laravel-mix"": ""^1.0"",
    ""lodash"": ""^4.17.4"",
    ""vue"": ""^2.1.10"",
    ""vue-router"": ""^2.3.0""
  }
</code></pre>
[adsense]
<h2 class=""chapter"">クライアントでのルーティングの設定</h2>
&nbsp;

&nbsp;

vue-routerをインストールできたら、
app.js、web.php、app.blade.phpを下のように変更します。

resourses/assets/js/app.js
<pre><code class=""language-javascript"">import Vue from 'vue';
import VueRouter from 'vue-router';
require('./bootstrap');

Vue.use(VueRouter);

/**
 * Next, we will create a fresh Vue application instance and attach it to
 * the page. Then, you may begin adding components to this application
 * or customize the JavaScript scaffolding to fit your unique needs.
 */
 const router = new VueRouter({
    mode: 'history',
    routes: [
        { path: '/', component: require('./components/Example.vue') },
    ]
});

const app = new Vue({
    router,
    el: '#app'
});

</code></pre>
routes/web.php
<pre><code class=""language-php"">&lt;?php

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the ""web"" middleware group. Now create something great!
|
*/


Route::get('/{any}', function () {
    return view('app');
})-&gt;where('any', '.*');
</code></pre>
&nbsp;

&nbsp;

resources/app.blade.php
(body部分のみ表示しています)
<pre><code class=""language-markup"">&lt;body&gt;
  &lt;div id=""app"" class=""container""&gt;
    &lt;div class=""header""&gt;
      {{$description = __('messages.site-description') }}
      &lt;navbar description=""{{$description}}""&gt;&lt;/navbar&gt;
    &lt;/div&gt;
    &lt;div class=""wrapper""&gt;
      &lt;div class=""main""&gt;
        &lt;h2&gt;Contetns&lt;/h2&gt;
        &lt;hr&gt;
        &lt;router-view price=""{{__('labels.price')}}""&gt;&lt;/router-view&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=""footer""&gt;
      &lt;nav-footer&gt;&lt;/nav-footer&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/body&gt;</code></pre>
&nbsp;

&nbsp;

ここまでが終わったら、
一度ビルドしてhttp://127.0.0.1:8000/にアクセスしてみましょう。
http://127.0.0.1:8000/でアクセスすると上の動画のトップページが
表示され、任意のURLhttp://127.0.0.1:8000/hogeなどでアクセスすると
何も表示されなければ、クライアント側でのルーティングは成功しています。

さらにweb.phpを以下のように設定して、
指定したComponentを作成して配置してあげれば、
/, /example,/example/1, /example/2で
それぞれの画面を描画することができます。

&nbsp;

&nbsp;
<pre><code class=""language-javascript"">const router = new VueRouter({
    mode: 'history',
    routes: [
        { path: '/', component: require('./components/Example.vue') },
        { path: '/example', component: require('./components/Example.vue') },
        { path: '/example/1', component: require('./components/Example1.vue') },
        { path: '/example/2', component: require('./components/Example2.vue') },
    ]
});
</code></pre>
※resources配下のソースを変更した場合は、ビルドするのを忘れずに・・・

&nbsp;

ここまでで、
クライアントでのルーティングはできるようになりました。

わかりやすいように
app.jsとapp.blade.phpの全体を乗せておきます。

app.blade.php

<pre><code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;{{ config(&#039;app.locale&#039;) }}&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;

    &lt;title&gt;spa-samples&lt;/title&gt;

    &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ mix(&#039;css/app.css&#039;) }}&quot;&gt;&lt;/script&gt;
    &lt;meta name=&quot;csrf-token&quot; content=&quot;{{ csrf_token() }}&quot;&gt;
    &lt;script&gt;
    window.Laravel = {
        csrfToken: &quot;{{ csrf_token() }}&quot;
    };
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot; class=&quot;container&quot;&gt;
        &lt;router-view&gt;&lt;/router-view&gt;
        &lt;nav-footer&gt;&lt;/nav-footer&gt;
    &lt;/div&gt;

&lt;/body&gt;
&lt;script src=&quot;{{ mix(&#039;js/app.js&#039;) }}&quot;&gt;&lt;/script&gt;
&lt;/html&gt;</code></pre>
app.js
<pre><code class=""language-javascript"">import Vue from 'vue';
import VueRouter from 'vue-router';
require('./bootstrap');

Vue.use(VueRouter);

/**
 * Next, we will create a fresh Vue application instance and attach it to
 * the page. Then, you may begin adding components to this application
 * or customize the JavaScript scaffolding to fit your unique needs.
 */
 Vue.component('nav-footer', require('./components/NavFooter.vue'));
 const router = new VueRouter({
    mode: 'history',
    routes: [
        { path: '/', component: require('./components/Example.vue') },
        { path: '/example', component: require('./components/Example.vue') },
        { path: '/example/1', component: require('./components/Example1.vue') },
        { path: '/example/2', component: require('./components/Example2.vue') },
    ]
});

const app = new Vue({
    router,
    el: '#app'
});

</code></pre>

&nbsp;
長くなったので、今回はここまでとします。

&nbsp;

&nbsp;
<h2 class=""chapter"">まとめ</h2>
ここまでやると、
Vueで作成したSPAのサクサクした使用感がわかってくると
思います。
次回のAJAX通信によって画面を変更するとよりアプリケーションらしく
なって面白いかと思います。
以上です！！

&nbsp;

ここまでのソースは下記に置いておきます。
<ins>レポジトリを変更したので、こちらのソースはfeature/step1ブランチにあります。</ins>
<a href=""https://github.com/version-1/spa-sample"">https://github.com/version-1/spa-sample</a>

&nbsp;

&nbsp;

[adsense_double_rect]

&nbsp;

&nbsp;"
"830","2017-10-14 21:59:36","2018-08-26 11:34:20","Laravel5.4とVue.jsでSPAを作ってみる。③ -仮想通貨の価格を取得するページを作ってみる-","laravel-vue-spa-3","http://ver-1-0.net/wp-content/uploads/2017/10/0f71ba28509b81ba05c2dc6a54eb60d9_s.jpg","engineering","&nbsp;

&nbsp;

前回、前々回と
環境の構築、
クライアント側でのルーティング設定を
行いました。

<a href=""https://ver-1-0.net/2017/10/11/laravel-vue-spa-1/"">Laravel5.4とVue.jsでSPAを作ってみる。① -環境構築-</a>

<a href=""https://ver-1-0.net/2017/10/11/laravel-vue-spa-2/"">Laravel5.4とVue.jsでSPAを作ってみる。② -クライアントルーティング-</a>

&nbsp;

今回は、
実際にAjax通信を使ったより実践的で、
現実に即した内容をお届けできればと思います。

&nbsp;

&nbsp;

さて、
作成する内容ですが、
仮想通貨の価格をコインチェックのAPIを利用して取得
→リアルタイムで画面で価格を表示とします。

出来上がったものはこちらです。

[video width=""860"" height=""924"" mp4=""http://ver-1-0.net/wp-content/uploads/2017/10/spa-sample-step2.mp4""][/video]

&nbsp;

&nbsp;

コインチェックのAPIを利用して、
実に14種類の仮想通貨のレートを確認できるようにしています。

内部でやっていることは
①同サーバDB内の仮想通貨の一覧を取得
②①のそれぞれの仮想通貨に関して価格を取得
です。

&nbsp;
[adsense_double_rect]
&nbsp;
<h2 class=""chapter"">同サーバDB内の仮想通貨の一覧を取得</h2>
&nbsp;

&nbsp;

マイグレーションを書いてDB
に仮想通貨の情報を登録します。
<pre><code class=""language-php"">
&lt;php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;
use App\Models\Currency;

class CreateCurrencies extends Migration
{
  /**
   * Run the migrations.
   *
   * @return void
   */
  public function up()
  {
    Schema::create('currencies', function (Blueprint $table) {
      $table-&gt;increments('id');
      $table-&gt;string('key');
      $table-&gt;string('name_ja');
      $table-&gt;string('name_en');
      $table-&gt;timestamps();
    });

    $data = [
      ['key' =&gt; 'btc','name_ja' =&gt; 'ビットコイン' , 'name_en' =&gt; 'BitCoin'],
      ['key' =&gt; 'bch','name_ja' =&gt; 'ビットコインキャッシュ' , 'name_en' =&gt; 'BitCoinCash'],
      ['key' =&gt; 'eth','name_ja' =&gt; 'イーサリアム' , 'name_en' =&gt; 'Etherium'],
      ['key' =&gt; 'etc','name_ja' =&gt; 'イーサリアムクラシック' , 'name_en' =&gt; 'Etherium Classic'],
      ['key' =&gt; 'dao','name_ja' =&gt; 'DAO' , 'name_en' =&gt; 'DAO'],
      ['key' =&gt; 'lsk','name_ja' =&gt; 'リスクコイン' , 'name_en' =&gt; 'BitCoin'],
      ['key' =&gt; 'fct','name_ja' =&gt; 'ファクトム' , 'name_en' =&gt; 'Factom'],
      ['key' =&gt; 'xmr','name_ja' =&gt; 'モネロ' , 'name_en' =&gt; 'Monero'],
      ['key' =&gt; 'rep','name_ja' =&gt; 'オーガー' , 'name_en' =&gt; 'Augur'],
      ['key' =&gt; 'xrp','name_ja' =&gt; 'リップル' , 'name_en' =&gt; 'Ripple'],
      ['key' =&gt; 'zec','name_ja' =&gt; 'ジーキャッシュ' , 'name_en' =&gt; 'Zcach'],
      ['key' =&gt; 'xem','name_ja' =&gt; 'ネム' , 'name_en' =&gt; 'Xem'],
      ['key' =&gt; 'ltc','name_ja' =&gt; 'ライトコイン' , 'name_en' =&gt; 'Litecoin'],
      ['key' =&gt; 'dash','name_ja' =&gt; 'DASH' , 'name_en' =&gt; 'DASH'],
    ];
    Currency::insert($data);
  }

  /**
   * Reverse the migrations.
   *
   * @return void
   */
  public function down()
  {
    Schema::drop('currencies');
  }
}
</code></pre>
&nbsp;

&nbsp;

マイグレーション実行
<pre><code class=""language-bash"">php aritsan migrate</code></pre>
これでDatabaseの準備はできたので、
これをAjaxでとってきて表示させるまでやりましょう。

&nbsp;

&nbsp;

&nbsp;

&nbsp;

APIのルーティング設定。

routes/api.php
<pre><code class=""language-php"">
&lt;?php use Illuminate\Http\Request;
 use App\Models\Currency; 
use GuzzleHttp\Client; 
Route::group(['middleware' =&gt; 'api'], function() {
  Route::get('currencies',  function() {
    $obj = new Currency();
    $result = $obj-&gt;all();
    return json_encode($result);
  });
});
</code></pre>
&nbsp;

&nbsp;

これで /api/currenciesにアクセスすると、
json形式の仮想通貨の情報を取得できるようになります。
（ルーティングファイルに処理を書くという。。まあチュートリアルでもやってたし。。）
お次は表示するVueコンポーネントです。

&nbsp;

&nbsp;
<pre><code class=""language-markup"">&lt;template&gt;
  &lt;div class=""container""&gt;
    &lt;div class=""row""&gt;
      &lt;div class=""col-md-8 col-md-offset-2""&gt;
        &lt;div class=""panel panel-default""&gt;
          &lt;div class=""panel-heading""&gt;Crypto Currencies&lt;/div&gt;

          &lt;div class=""panel-body""&gt;
            &lt;p&gt;{{message}}&lt;/p&gt;
            &lt;ul class=""list-unstyled"" v-if=""is_init""&gt;
              &lt;li v-for=""(currency, key) in currencies"" &gt;
                &lt;span v-on:click=""loading""&gt;
                  &lt;router-link :to=""{ path: '/currencies/' + currency.key }"" &gt;{{currency.name_ja}} / {{currency.name_en}}&lt;/router-link&gt;
                &lt;/span&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  created() {
    this.fetchCurrencies(),
  },
  data() {
    return {
      is_init: false,
      message: ""Fetching Data...""
    }
  },
  methods: {
    loading(){
      this.is_loading = true;
      this.message = ""Fetching Data..."";
    },
    fetchCurrencies() {
      axios.get('/api/currencies')
      .then(res =&gt;  {
        this.currencies = res.data;
        this.is_loading = false;
        this.is_init = true;
        this.message = """";
      });
    }
}
&lt;/script&gt;
</code></pre>
ここまででとりあえず、仮想通貨の一覧を取得はできて、
Ajax通信も使えています。
<a href=""http://ver-1-0.net/2017/10/14/laravel5-4%e3%81%a8vue-js%e3%81%a7spa%e3%82%92%e4%bd%9c%e3%81%a3%e3%81%a6%e3%81%bf%e3%82%8b%e3%80%82%e2%91%a2-%e4%bb%ae%e6%83%b3%e9%80%9a%e8%b2%a8%e3%81%ae%e4%be%a1%e6%a0%bc%e3%82%92%e5%8f%96/screen-shot-2017-10-14-at-19-00-02/"" rel=""attachment wp-att-849""><img class=""alignnone size-full wp-image-849"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-14-at-19.00.02.png"" alt=""仮想通貨の一覧の画像"" width=""863"" height=""926"" /></a>

が、ここまでだとリアルタイムに価格を表示していく！！
というSPAの面白さみたいなものがないので、
さらにそれぞれの価格を取得するように修正していきます。

&nbsp;

&nbsp;

&nbsp;

&nbsp;
<h2 class=""chapter"">APIで仮想通貨の価格を取得する</h2>
&nbsp;

&nbsp;

APIはこちらのコインチェックのAPIを使用します。
<a href=""https://coincheck.com/ja/documents/exchange/api"">https://coincheck.com/ja/documents/exchange/api</a>

価格設定の部分のAPIのルーティングを設定します。
routes/api.phpに以下のルーティングを設定します。

&nbsp;
<pre><code class=""language-php"">
Route::get('rate/{currency}',  function($currency) {
        $res = [ 'currency' =&gt; $currency ,'btc' =&gt; 0 , 'jpy' =&gt; 0 ];
        if ( $res['currency'] === ''){
            $res['currency'] = 'btc';
        }
        $client = new Client();
        $url = ""https://coincheck.com/api/rate/${currency}_jpy"";
        $response = $client-&gt;request('GET',$url);
        $res['jpy'] = json_decode($response-&gt;getBody())-&gt;rate;

        if($currency != 'btc'){
            $url = ""https://coincheck.com/api/rate/${currency}_btc"";
            $response = $client-&gt;request('GET',$url);
            $res['btc'] = json_decode($response-&gt;getBody())-&gt;rate;
        }

        if ($response-&gt;getStatusCode() === 200) {
            return response()-&gt;json($res);
        } else {
            return json_encode(['error']);
        }
    });
</code></pre>
ここでは、
仮想通貨の円建て、ビットコイン建てのレートを取得して
返却しています。

次に、Index.vueのhtml部分に以下のタグを追加し、
<pre><code class=""language-markup"">&lt;div class=""row""&gt;
    &lt;div class=""col-md-8 col-md-offset-2""&gt;
    &lt;div class=""panel panel-default""&gt;
      &lt;div class=""panel-heading""&gt;Crypto Currency Rate&lt;/div&gt;

      &lt;div class=""panel-body""&gt;
      &lt;p&gt;{{message}}&lt;/p&gt;
      &lt;ul class=""list-unstyled"" v-if=""!is_loading""&gt;
        &lt;li&gt;
        1{{name.toUpperCase()}} =   &lt;span class=""h2""&gt;{{currency.jpy.toLocaleString()}}&lt;/span&gt; JPY
        &lt;/li&gt;
        &lt;li v-if=""name != 'btc'""&gt;
        1{{name.toUpperCase()}} =   &lt;span class=""h2""&gt;{{currency.btc.toLocaleString()}}&lt;/span&gt; BTC
        &lt;/li&gt;
      &lt;/ul&gt;

      &lt;/div&gt;
    &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</code></pre>
javascipt部分を以下のようにします。
<pre><code class=""language-javascript"">&lt;script&gt;
export default {
  created() {
    this.fetchCurrencies(),
    this.fetchRate(),
    this.timer = setInterval(this.fetchRate, 2000)
  },
  props:['name'],
  data() {
    return {
      currency: { 'currency':'', 'jpy': 0 , 'btc':0 },
      is_init: false,
      is_loading: true,
      message: ""Fetching Data...""
    }
  },
  methods: {
    loading(){
      this.is_loading = true;
      this.message = ""Fetching Data..."";
    },
    fetchCurrencies() {
      axios.get('/api/currencies')
      .then(res =&gt;  {
        this.currencies = res.data;
        this.is_loading = false;
        this.is_init = true;
        this.message = """";
      });
    },
    fetchRate() {
      if (this.name === undefined){
        this.name = 'btc';
      }
      axios.get('/api/rate/' + this.name)
      .then(res =&gt;  {
        this.currency.btc = res.data.btc;
        this.currency.jpy = res.data.jpy;
        this.name = res.data.currency;
        this.is_loading = false;
        this.message = """";
      });

    },
    cancelAutoUpdate: function() {
      clearInterval(this.timer)
    }
  },
  beforeDestroy() {clearInterval(this.timer)}
}
&lt;/script&gt;
</code></pre>
あとは、cssなどを多少直すと
上の動画のような感じになります。

コードはここに置いておきます。
<a href=""https://github.com/version-1/spa-sample"">https://github.com/version-1/spa-sample</a>

&nbsp;

&nbsp;
<h2 class=""chapter"">まとめ</h2>
&nbsp;

&nbsp;

以上、ここまでで
クライアント側でレンダリングして、
必要なデータはAPIでとってくる。
という感じでサクサク動くSPAを作ってきました。

基本の部分は紹介したので、
あとは各々の興味次第という感じですね。

構築した感想としては、
ユーザ側からの使用感として、リロードの待ち時間が短くすみ
サクサク動くという点で良い気がきましたが、
やはりコードの管理が煩雑になりそうな気がしています、
ビュー側でそれなりのコードを各必要があるのでコード量が多くなり
大変そうです。

あとは、以前にも仮想通貨の価格を取得する記事を
書いたのですが、そこからビットコインの価格が5,6倍とかに
なっています。
恐ろしや。。

<a href=""https://ver-1-0.net/2017/04/28/node-js-realtime/"">[Node.js]ビットコインの価格をリアルタイムにDBに保存する。</a>

以上です！！

&nbsp;"
"1579","2017-12-10 14:41:30","2018-08-26 01:00:12","CSSスタイルガイドのSMACSSを勉強してみたまとめ","learn-smacss","https://ver-1-0.net/wp-content/uploads/2017/12/smacss.jpg","engineering::::design","&nbsp;

SMACSSって知ってますか？

&nbsp;

css初心者レベルからぬけだしたいのであれは知っておいていた方がいいcss設計に関する知識です。

私もこないだまでは名前しか知らない程度だったの他人のことを言える立場ではないのですが、これを勉強すればcssをさらに深くしれるなと思い勉強してみました。

&nbsp;
<h2 class=""chapter"">参考にしたサイト</h2>
&nbsp;

今回は公式サイトのドキュメントをダウンロードして読み込みました。

&nbsp;

130ページ程度の電子書籍で(無料です)短いのでぜひ読んでみることをオススメします。

<a href=""https://smacss.com/ja"">https://smacss.com/ja</a>

&nbsp;

本の流れとしては、最初にそれぞれのレイヤーのルールを紹介した後に、テンプレートエンジンやSASSなどのプリプロセッサ、パフォーマンスなどSMACSSに関連したトピックについて記載されています。

本自体は元々英語で書かれているもののようなのですが、訳が若干読みづらいかもしれません。。理解しながら読むのが辛かった泣

何はともあれ、しっかりと理解したい方は一度読んでみてみると良いと思います。

&nbsp;

[after_intro]

&nbsp;
<h2 class=""chapter"">SMACSSの概要</h2>
&nbsp;

SMACSSは、CSS設計の際に用いるアーキテクチャのルールやパターンの事です。
規約がものすごい厳密という訳でもなさそうですのでスタイルガイドと言ってしまって良いと思います。

&nbsp;

CSS設計に関するアーキテクチャとしては他にもOOCSS,BEMなどがありSMACSSもその一つになります。

&nbsp;

&nbsp;

このアーキテクチャの目指すところは

<strong>よりセマンティックで、拡張性が高く変更に強い CSSです。</strong>

&nbsp;

&nbsp;

この場合の変更に強いとは<strong>HTMLへの依存性が低く、HTMLの変更がCSSに影響を与えない</strong>ようなことを言います。
<strong>セマンティック</strong>であるとは、<strong>見た目や振る舞いではなく、目的や意図がわかるということ</strong>です。

それを実現する方法がSMACSSとして提唱されているのですが、基本的な思想として

CSSの役割を
<ul>
 	<li>ベース</li>
 	<li>レイアウト</li>
 	<li>モジュール</li>
 	<li>ステート(状態)</li>
 	<li>テーマ</li>
</ul>
の5つのカテゴリに分けて管理します。

名前でなんとなく想像はつくと思いますが、
簡単に説明すると

&nbsp;
<h4 style=""text-align: left; padding-left: 30px;"">ベース</h4>
bodyタグやhtmlタグなどデフォルトでのスタイル定義。サイトの背景食や文字サイズ、フォントスタイルなども含みます。

&nbsp;
<h4 style=""padding-left: 30px;"">レイアウト</h4>
名前の通りレイアウトを定義する層です。ただし、ボタンや吹き出し、カルーセルなどの部品はここでは定義しません。

&nbsp;
<h4 style=""padding-left: 30px;"">モジュール</h4>
ボタン、カルーセル、アコーディオンなどアプリケーションの中の部品を定義します。

&nbsp;
<h4 style=""padding-left: 30px;"">ステート</h4>
モジュールやレイアウトの状態を定義しています。表示・非表示やアコーディオンが畳んだ状態か開いた状態かなどの部分です。

&nbsp;
<h4 style=""padding-left: 30px;"">テーマ</h4>
これは常に必須のレイヤーではないそうなのですが、デザインの表層の部分が定義されます。サイト全体の色やフォントをデフォルトのものと切り替えるというような用途に使われるようです。

となります。

&nbsp;

これらのカテゴリは、 CSSを書く際にどこのカテゴリのコードを書くか意識する事で、複雑な絡み合ったコードを避けるためにあります。カテゴリをはっきりと分けることで、コードを共通化させシンプルでメンテナンスしやすいコードが実現できます。

本では、それぞれのルールに対して細かな解説があるのでまとめてみました。

&nbsp;

[mid_article]
<h2 class=""chapter"">ベース</h2>
&nbsp;

<strong>スタイル例:</strong>
<pre><code class=""language-css"">body, form {
    margin: 0;
    padding: 0;
}

a {
    color: #039;
}

a:hover {
    color: #03F;
}
</code></pre>
&nbsp;

<strong>対象:</strong>
bodyタグ、htmlタグ、aタグ、h1タグ..

&nbsp;

<strong>命名規則:</strong>
要素セレクタでのスタイル

&nbsp;

&nbsp;

ベースのカテゴリではクラスセレクタやIDセレクタを使わず、要素セレクタでそれぞれの要素のデフォルトの状態を定義します。
ベーススタイルには見出しのサイズ、デフォルトリンクスタイル、デフォルトフォントスタイルそしてbodyの背景が含まれます。

要は、bodyタグ、aタグ、h1タグ、h2タグなどのデフォルトのスタイルを定義する部分になります。他のカテゴリでは、html構造への依存を避けるため極力要素セレクタ（ h2指定で直接スタイル）でスタイルを定義したりしないのですが、ベースは例外です。

&nbsp;

それぞれの要素のデフォルトのスタイルを定義する必要があるので要素セレクタにスタイルを指定します。

リセットCSSやnormalize CSSはこの層になりますが、本ではリセットCSSは積極的に使用しましょうと言う感じではありませんでした。
リセットCSSは一度デフォルトのスタイルを解除して、再度スタイルを定義し直すことになるので読み込むコードが増えますと言うところが懸念点としてあるようです。

&nbsp;

&nbsp;
<h2 class=""chapter"">レイアウト</h2>
&nbsp;

<strong>スタイル例:</strong>
<pre><code class=""language-css"">#header, #article, #footer {
    width: 960px;
    margin: auto;
}

#article {
    border: solid #CCC;
    border-width: 1px 0 0;
}
</code></pre>
&nbsp;

<strong>対象:</strong>
ヘッダー、フッター、サイドバーなどページを分割する要素

<strong>命名規則:</strong>
原則IDセレクタ一つでスタイル、クラスセレクタの場合はl-やlayout-のようなprefix（接頭辞）をつける。

&nbsp;

名前の通りレイアウトを定めるカテゴリで、一ページをどのようなセクションに分割するかという部分について定義されます。

ヘッダーやフッターなどの主要なレイアウトはIDタグで定義されることが多いが、それはページ内で本当に繰り返し使用されないことを確認した上でそうすべきで、繰り返される場合はクラスセレクタでスタイルが良いとされています。

これについては、伝統的にそうされてきたかのような記述があるのですがイマイチIDセレクタで指定する必要性があまりわからないですね。。何か深い理由があるのでしょうか。主要なレイアウトとして目立たせる為にIDセレクタとしてスタイルすると言うのはまあわかる気もしますが。

&nbsp;

また、基本的にはレイアウトは一つのセレクタで定義されますが、ユーザの権限ごとにレイアウトを変えたいなどの場合もあるのでそう言う場合は下のような複数セレクタでスタイルすることあります。

&nbsp;
<pre><code class=""language-css"">.l-admin #header { hoge: foo }</code></pre>
命名規則として他のカテゴリと区別する為に、クラスセレクタで指定する場合は先頭にl-やlayout-のようにレイアウトのスタイルであることをわかりやすくする規則があります。

&nbsp;
<h2 class=""chapter"">モジュール</h2>
&nbsp;

<strong>スタイル例:</strong>
<pre><code class=""language-css"">.carousel  &gt; h2 {
    padding: 5px;
}

.carousel  span {
    padding: 5px;
}
</code></pre>
&nbsp;

<strong>対象:</strong>
カルーセル、アコーディオンなどなど

&nbsp;

<strong>命名規則:</strong>
IDや要素セレクタを避け、クラスセレクタのみを利用。モジュール内の要素は子・子孫セレクタで指定。

&nbsp;

モジュールはカルセール、アコーディオンなどのスタイルを行うカテゴリです。

命名規則にあるように要素セレクタは極力避ける必要があります。h1,h2など見出しタグはセマンティック性が一定程度あるので、（タグをみただけで見出しなんだなと言う意図がわかる）良いですが、divやspanなど一見して意図がわかりづらいものはクラスセレクタを使ってその意図を補足してやるのが良いです。
<pre><code class=""language-markup"">&lt;div class=""item-list""&gt;
     &lt;div class=""item""&gt;Scissors&lt;/div&gt;
     &lt;div class=""item""&gt;Hammer&lt;/div&gt;
     &lt;div class=""item""&gt;Ruler&lt;/div&gt;
&lt;/div&gt;
</code></pre>
&nbsp;

クラスセレクタを使うとスタイルの意図がわかりやすくセマンティック性が保たれるので、クラスセレクタの利用が推奨されています。

&nbsp;

また、サブクラスのモジュールを定義する際に場所による制約をスタイルするのは避ける必要があります。

これはあらかじめデフォルトのボタンをスタイルした後に、サイドバーに少しスタイルの違うボタンを設置する場合に、
<pre><code class=""language-css"">.pod { 
    width: 100%; 
}
.pod input[type=text] { 
    width: 50%; 
}
#sidebar .pod input[type=text] { 
    width: 100%; 
}
</code></pre>
&nbsp;

のようにサイドバー内のボタンとして指定するのではなく、
<pre><code class=""language-css"">.pod { 
    width: 100%; 
} 
.pod input[type=text] { 
    width: 50%; 
}
.pod-constrained input[type=text] { 
    width: 100%; 
}

</code></pre>
&nbsp;

このようにスタイルして、htmlの要素には

class=""btn btn-constrained""

のように指定します。

&nbsp;

#sidebarのような指定の仕方でも一見問題ないように思えますが、この後にサイドバーやそれ以外にも配置可能ななモジュールを作る場合にベースのpodのスタイルと、サイドバー内のスタイル両方のスタイルを上書きしないといけなくなってしまいます。

レイアウトなどの親要素に依存するモジュールを作成する場合は注意が必要です。場所に依存する（サイドバーの中ののような）スタイルすることを極力されるのが良さそうです。

&nbsp;
<h2 class=""chapter"">ステート</h2>
&nbsp;

<strong>スタイル例:</strong>
<pre><code class=""language-css"">.is-hidden{
    display:none;
}
</code></pre>
&nbsp;

<strong>対象:</strong>
モジュール等の状態の指定。表示・非表示。メニューが開いているか閉じているか。

&nbsp;

<strong>命名規則:</strong>
・1つのクラスセレクタのみ。
・特定のモジュールについてのみ適用される状態であればモジュール名を含める。
・利用に注意しながら!importantの利用可

&nbsp;

ステートはモジュールの状態を示し、表示・非表示などをスタイルする。

サブモジュールと役割上の類似点があり、混乱を招きがちだが、
<ol>
 	<li>状態スタイルはレイアウトやモジュールに割り当てることができ</li>
 	<li>状態スタイルはJavaScriptに依存するという意味を持つ</li>
</ol>
といった違いがあります。

2つめがわかりやすくサブモジュールクラスは、htmlがレンダリングされた際に描画されているもので、ステートはユーザのアクションや経過時間などに応じてクラスが付加されたり削除されたりするものです。

&nbsp;
<h2 class=""chapter"">テーマ</h2>
&nbsp;

<strong>スタイル例:</strong>
<pre><code class=""language-css"">.theme-border {
    border-color: purple;
}

.theme-background {
    background: linear-gradient( ... );
}</code></pre>
&nbsp;

<strong>対象:</strong>
テーマでは色やアプリケーションやサイトが持つルック&amp;フィールを定義

&nbsp;

<strong>命名規則:</strong>
テーマの規模によりtheme-などのprefixをつける。

&nbsp;

テーマではアプリケーションが持っている他のカテゴリで定義されたデフォルトのボーダーの色などを上書きする。

想定される用途としてユーザー側にいくつかのテーマを決めさせてサイトの雰囲気をユーザ好みにカスタマイズできるようにする場合などがあります。

&nbsp;
<h2 class=""chapter"">まとめ</h2>
&nbsp;

今回は、簡単なカテゴリのルールだけまとめました。電子書籍の中には他の項目についての記載もありますが、まとめるのも大変ですし読み切るのも大変なので紹介はここまでとさせて頂きます。

&nbsp;

冒頭でも書きましたが、130ページ程度の本なので自身でも読んでみると良いかと思います。

・状態の変更について
・適応性の深度
・セレクタパフォーマンス

らへんの部分は結構参考になると思います。

&nbsp;

本は読むだけでは意味がないのでお次は、実際にSMACSSを意識しながら簡単なページをコーディングしてみたいですね。ちゃんとできたらその様子もアップしたいです。

では

&nbsp;

[after_article]"
"2034","2018-06-11 23:29:59","2018-09-02 13:09:21","Railsの便利メソッドをlodashでやると","lodash-instead-of-rails","https://ver-1-0.net/wp-content/uploads/2018/02/rails-1.png","rails","日常的にRailsでサーバ側を書いていても、ふとした時にjs書かないといけない時ってありますよね。
そのほかにも、これまでサーバ側でRuby書いてきたけど、せっかくだからフロント側も勉強したいなみたいな形で
Jsを触り始めることもあるかと思います。

jsもES6以降で便利なメソッドも増えたみたいですが、仕事で使ってみるとついついlodashとかライブラリを使いたくなってしまいます。
そんなこんなで、Railsのメソッドをlodashでやるには？みたいなところをまとめてみました。

&nbsp;

[after_intro]
<h2>slice</h2>
&nbsp;

railsのsliceはハッシュから必要なキーだけを取得して返却してくれます。これがActiveRecordのオブジェクトにも
使えたりして便利なので、Jsでも同じことがやりたい！！となると思います。

&nbsp;
<h4>rails</h4>
<pre><code class=""language-ruby"">fruit = { apple: 'red', banana: 'yellow', cucumuber: 'green'}
fruit.slice(:apple, :banana)
#  {:apple=&gt;""red"", :banana=&gt;""yellow""}
</code></pre>
<h4>lodash</h4>
<pre><code class=""language-javascript"">const fruit = { apple: 'red', banana: 'yellow', cucumuber: 'green'}
_.pick(fruit, ['apple', 'banana'])
// { apple: 'red', banana: 'yellow' }
</code></pre>
&nbsp;
<h2>except</h2>
&nbsp;

exceptはsliceの逆で、ハッシュのキーから不要なものを取り除いてくれます。
<h4>rails</h4>
<pre><code class=""language-ruby"">fruit = { apple: 'red', banana: 'yellow', cucumuber: 'green'}
fruit.except(:apple, :banana)
# {:cucumuber=&gt;""green""}
</code></pre>
<h4>lodash</h4>
<pre><code class=""language-javascript"">const fruit = { apple: 'red', banana: 'yellow', cucumuber: 'green'}
_.omit(fruit, ['apple', 'banana'])
// { cucumuber: 'green' }
</code></pre>
&nbsp;
<h2>Pluck</h2>
&nbsp;

pluckは配列のハッシュから、指定したキーの配列で返却してくれます。lodashでは、0.4以降pluckは廃止されmapで代用できるようです。
<h4>rails</h4>
<pre><code class=""language-ruby"">array = [
 { id: 1, name: 'John', age: 19 },
 { id: 2, name: 'Mary', age: 30 },
 { id: 3, name: 'Smith', age: 25 }
]
array.pluck(:name)
# [""John"", ""Mary"", ""Smith""]
</code></pre>
<h4>lodash</h4>
<pre><code  class=""language-javascript"">array = [
 { id: 1, name: 'John', age: 19 },
 { id: 2, name: 'Mary', age: 30 },
 { id: 3, name: 'Smith', age: 25 }
]

array.pluck(:name)
_.map(array, 'name')
// [""John"", ""Mary"", ""Smith""]
</code></pre>
&nbsp;
<h2>配列の引き算（差集合）</h2>
&nbsp;

これはRails(Active Support) というよりはRubyですが、
<h4>Ruby(Rails)</h4>
<pre><code class=""language-ruby""> [1, 2, 3] - [1, 3]
# [2]
</code></pre>
<h4>loadash</h4>
<pre><code class=""language-javascript"">_.diffrence([1,2,3], [1,3])
// [2]
</code></pre>
&nbsp;
<h2>Compact</h2>
&nbsp;

compactはnilであるハッシュのキーを取り除いたハッシュを返却します。
微妙にい意味合いは違いますが、lodashでもfalseyなkeyをオブジェクトから取り除いてくれます。
<h4>Rails(Ruby)</h4>
<pre><code class=""language-ruby"">fruit = { apple: 'red', banana: nil, cucumuber: 'green'}
fruit.compact
# {:apple=&gt;""red"", :cucumuber=&gt;""green""}
</code></pre>
<h4>lodash</h4>
<pre><code class=""language-javascript"">fruit = { apple: 'red', banana: null, cucumuber: 'green'}
_.omitBy(fruit, _.isNull)
// { apple: 'red', cucumuber: 'green' }
</code></pre>
&nbsp;
<h2>ほかにもありそうですが一旦ここまでで</h2>
&nbsp;
ちょっとほかにもありそうですが、今思いつくのはここまでですので、一旦ここで区切らせて頂きます。
今思いましたが、ほかにもtapなどなどjsで再現したい関数というのはいくつかあるので続編もできれば
書きたいと思っています。

では、今回は一旦ここまでで

[after_article]"
"17","2017-01-03 15:47:17","2018-08-26 12:57:01","LubuntuにRails5 をインストール","lubuntu-rails5","http://ver-1-0.net/wp-content/uploads/2017/01/スクリーンショット-2017-01-03-15.37.16.png","engineering::::for-beginner","<h2>①パッケージインストール</h2>

<pre><code class=""language-bash"">sudo apt-get install build-essential zlib1g-dev libssl-dev libreadline-dev libyaml-dev libxml2-dev libxslt-dev
</code></pre>

<h2>②パッケージ管理のrbenvをインストール</h2>

apt-getでインストール
<pre><code class=""language-bash"">sudo apt-get install rbenv</code></pre>

<pre><code class=""language-bash"">rbenv init
echo 'eval &quot;$(rbenv init -)&quot;' &gt;&gt; ~/.bashrc
</code></pre>

インストールに必要なruby-buildをインストール
<pre><code class=""language-bash"">git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
</code></pre>

<h2>③ruby 2.4.0をインストール</h2>
現在の安定版は2.4.0のようなので2.4.0をインストール
<a href=""https://www.ruby-lang.org/ja/downloads/"">https://www.ruby-lang.org/ja/downloads/</a>
<pre><code class=""language-bash"">rbenv install 2.4.0</code></pre>




<pre><code class=""language-bash"">$rbenv global 2.4.0
rbenv rehash
ruby -v
ruby 2.4.0p0 (2016-12-24 revision 57164) [x86_64-linux]
</code></pre>


<h2>③rails5をインストール</h2>
rails5をインストール
<pre><code class=""language-bash"">gem install rails -v '5.0.1'
gem install bundller
</code></pre>



<h2>③railsアプリケーションの作成・動作確認</h2>
<pre><code class=""language-bash"">rails new myapp 
cd myapp
rails s
</code></pre>

サーバを起動したところエラー発生
<pre><code class=""language-bash"">`rescue in block (2 levels) in require': There was an error while trying to load the gem 'uglifier'. (Bundler::GemRequireError)
</code></pre>

<<対処法>>
nodejsをインストールしてアプリケーションを作り直す
<pre><code class=""language-bash"">sudo apt-get install
rails new myapp 
cd myapp
rails s -b 0.0.0.0 
# rails s　だけであげるとhttp://localhost:3000でサーバが起動するため
# ホストOSから接続できない。IPアドレスで指定する。
</code></pre>


ブラウザでアクセスすると
<img src=""http://ver-1-0.net/wp-content/uploads/2017/01/スクリーンショット-2017-01-03-15.37.16-300x244.png"" alt=""rails初期画面"" height=""300"" class=""alignnone size-medium wp-image-23"" />
成功



参考URL:<a href=""http://makev.blogspot.jp/2012/11/lubunturbenvrubyrails.html"">http://makev.blogspot.jp/2012/11/lubunturbenvrubyrails.html</a>
"
"258","2017-03-05 21:02:22","2018-08-29 08:48:45","[Mac] Ansible を使ってみる","mac-ansible-ping","http://ver-1-0.net/wp-content/uploads/2017/01/AnsibleLogo_transparent_web.png","engineering::::rails","&nbsp;

以前に以下のような
<a href=""https://ver-1-0.net/2017/01/12/ansible-for-mac/"">Ansible Install for Mac | Macのための Ansible Install</a>
記事を書いていましたが、
しばらく勉強が止まってしまっていました。

&nbsp;

&nbsp;

今回は、
自分のPC上にVagrantで仮想環境を作成し、
それをAnsibleで操作するための接続設定・接続確認
というのをやりたいと思います。

まずは、操作するサーバ(Vagrantの構築から)
<pre><code class=""language-bash"">vagrant init ubuntu/xenial64
vagrant up
</code></pre>

&nbsp;
<pre><code class=""language-bash"">$vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
==&gt; default: Importing base box 'ubuntu/xenial64'...
==&gt; default: Matching MAC address for NAT networking...
==&gt; default: Checking if box 'ubuntu/xenial64' is up to date...
==&gt; default: A newer version of the box 'ubuntu/xenial64' is available! You currently
==&gt; default: have version '20170104.0.0'. The latest is version '20170303.1.0'. Run
==&gt; default: `vagrant box update` to update.
==&gt; default: Setting the name of the VM: test_default_1488712807930_72913
==&gt; default: Fixed port collision for 22 =&gt; 2222. Now on port 2200.
==&gt; default: Clearing any previously set network interfaces...
==&gt; default: Preparing network interfaces based on configuration...
    default: Adapter 1: nat
==&gt; default: Forwarding ports...
    default: 22 (guest) =&gt; 2200 (host) (adapter 1)
==&gt; default: Running 'pre-boot' VM customizations...
==&gt; default: Booting VM...
==&gt; default: Waiting for machine to boot. This may take a few minutes...
    default: SSH address: 127.0.0.1:2200
    default: SSH username: ubuntu
    default: SSH auth method: password
    default: Warning: Remote connection disconnect. Retrying...
    default: Warning: Remote connection disconnect. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Remote connection disconnect. Retrying...
    default: 
    default: Inserting generated public key within guest...
    default: Removing insecure key from the guest if it's present...
    default: Key inserted! Disconnecting and reconnecting using new SSH key...
==&gt; default: Machine booted and ready!
==&gt; default: Checking for guest additions in VM...
    default: The guest additions on this VM do not match the installed version of
    default: VirtualBox! In most cases this is fine, but in rare cases it can
    default: prevent things such as shared folders from working properly. If you see
    default: shared folder errors, please make sure the guest additions within the
    default: virtual machine match the version of VirtualBox you have installed on
    default: your host and reload your VM.
    default: 
    default: Guest Additions Version: 5.0.24
    default: VirtualBox Version: 5.1
==&gt; default: Mounting shared folders...
    default: /vagrant =&gt; /Users/jo/Vagrant/test
</code></pre>

これでAnsibleで操作するサーバの準備はOK

次にAnsibleの準備。
管理人の場合は~/Ansibleというディレクトリを作って、
そこの下に接続に必要なファイルを置きます。

デフォルトでは、
<strong>/etc/ansible/hosts</strong>
というファイルが作られるので、
いちいちオプションを指定するのが面倒な人は
こちらにホストの定義を行うと良いかと思います。</pre>
<pre><code class=""language-bash"">cd
mkdir Ansible &amp;&amp; touch inventory/host
</code></pre>
このhostファイルに接続設定を書き込みます。
が、その前に先ほど作成したVagrantイメージの
SSH接続情報を調べて置きましょう。

調べ方は以下、
<pre><code class=""language-bash"">cd ../Vagrant/test/
$vagrant ssh-config
Host default
  HostName 127.0.0.1
  User ubuntu
  Port 2200
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile /Users/version1/Vagrant/test/.vagrant/machines/default/virtualbox/private_key
  IdentitiesOnly yes
  LogLevel FATAL
</code></pre>
これで、秘密鍵の場所とport番号,User名などがわかりました。
ではそれを設定に書き込みましょう。
<pre><code class=""language-ini"">[target]
[targets]
127.0.0.1 ansible_user=ubuntu ansible_port=2200 ansible_ssh_private_key_file=/Users/jo/Vagrant/t    est/.vagrant/machines/default/virtualbox/private_key
</code></pre>
接続する際の情報が
以下にそれぞれ書き込めば完了です。

ユーザ名: ansible_user
ポート番号: ansible_port
秘密鍵:ansible_ssh_private_key_file

これで準備完了したので、
早速ansibleを動かして疎通確認を行いましょう。
<pre><code class=""language-bash"">ansible all -i inventory/hosts -m ping
</code></pre>
これでpingというModuleを使い疎通確認を行います。

それでは実行
<pre><code class=""language-bash"">$ansible all -i inventory/hosts -m ping
127.0.0.1 | FAILED! =&gt; {
    ""changed"": false,
    ""failed"": true,
    ""module_stderr"": ""Shared connection to 127.0.0.1 closed.\r\n"",
    ""module_stdout"": ""/bin/sh: 1: /usr/bin/python: not found\r\n"",
    ""msg"": ""MODULE FAILURE""
}
</code></pre>
&nbsp;

&nbsp;

おっと失敗、メッセージを見るからに
<strong>/usr/bin/python</strong>が
ないと言われているのでvagrant にSSHで接続してシンボリックリンク作成。
<pre><code class=""language-bash"">vagrant ssh
sudo ln -s /usr/bin/python3 /usr/bin/python 
</code></pre>
&nbsp;

&nbsp;

これでAnsibleさんがリモートホストの
pythonを使ってリモート操作ができるはず。

実行。
<pre><code class=""language-bash"">$ansible all -i inventory/hosts -m ping
The authenticity of host '[127.0.0.1]:2200 ([127.0.0.1]:2200)' can't be established.
ECDSA key fingerprint is SHA256:KjjtevSpvebZmVWHpc9nASxWwoD2fMPAy9a61i+6Nac.
Are you sure you want to continue connecting (yes/no)? yes
127.0.0.1 | SUCCESS =&gt; {
    ""changed"": false,
    ""ping"": ""pong""
}
</code></pre>
&nbsp;

&nbsp;

見事成功しました。
これで疎通の確認は終わったので、

次回以降Playbookなどを使って
さらに実践的な内容を使っていきたです。"
"1266","2017-11-14 08:00:21","2018-08-26 11:20:41","Macにイーサリアムをインスールして、送金してみる（テストネットワーク）","mac-ethereum-install","https://ver-1-0.net/wp-content/uploads/2017/11/Screen-Shot-2017-11-14-at-1.03.53.png","cryptocurrency-blockchain::::engineering","&nbsp;

&nbsp;

イーサリアムでのアプリケーション開発を
入りの部分だけ勉強したのでまとめます。

また、
タイトルに送金とあるので、
<strong>「え、お金使うの？？」</strong>と不安になってしまう部分がある
かと思いますが、
安心してください、この記事では、
テストネットワークと言う自分しか存在しないチェーン上
での作業になるので、
実際にお金を動かしたりすることはありません。

[after_intro]

それでは、
まずはイーサリアムって何という人へ

&nbsp;

&nbsp;
<h2 class=""chapter"">Ethereum - イーサリアム - とは</h2>
&nbsp;

ビットコインと同じような中央の管理組織を持たない仮想通貨で、
<strong>時価総額は3兆3913億円（2017年11月13日時点）</strong>にものぼり
ビットコインの次に時価総額の大きな通貨となっています。

ビットコインとは違いイーサリアムブロックチェーン上にコントラクトを
保存できると言うことです。
コントラクトは<strong>Solidity</strong>と言うjavascriptライクな言語で記述することができ、
<strong>アプリケーションをブロックチェーン上に登録することが可能です。</strong>

そのコントラクトの実行には、
手数料が発生し、それらがイーサリアムのマイナーの
収入になります。

イーサリアムブロックチェーン上には、
すでに複数の分散型のアプリケーションが構築されており、
それらはこちらのサイトに公開されてあります。
<a href=""https://www.stateofthedapps.com/"">State of the ÐApps — 821 Projects Built on Ethereum</a>

ちなみに、
<strong>中央の管理組織を持たないことを生かしたソーシャルメディアである</strong>
<a href=""https://akasha.world/"">Akasha</a>
や
<strong>音楽業界の著作権管理と印税の支払いを自動化するプラットフォームである</strong>
<a href=""https://ujomusic.com/"">Ujomusic</a>
などのプロジェクトが紹介されています。

&nbsp;

&nbsp;

イーサリアム自体に興味が湧いて、
今のうちに買っておきたいと言う方には、
こちらの記事を紹介しておきます。
https://ver-1-0.net/2017/09/03/%e3%81%be%e3%81%a0%e7%9f%a5%e3%82%89%e3%81%aa%e3%81%84%ef%bc%9f%e4%bb%ae%e6%83%b3%e9%80%9a%e8%b2%a8%e3%81%ae%e8%b2%b7%e3%81%84%e6%96%b9%e3%80%80%e3%83%93%e3%83%83%e3%83%88%e3%82%b3%e3%82%a4%e3%83%b3/
&nbsp;

&nbsp;

&nbsp;

ブロックチェーンの仕組みがいまいちと言う方は、
こちらの記事が参考になると思います。
https://ver-1-0.net/2017/10/18/how-does-blockchain-really-work-i-built-an-app-to-show-you-translate-ja/

&nbsp;

&nbsp;
<h2 class=""chapter"">Etheriumクライアントをインストール</h2>
&nbsp;

それでは早速Ethereumに接続する
クライアントツールが必要なので
インストールをしていきます。

クライアントツールもいくつか種類はあるのですが、
今回は一番よく使われているであろう、
<strong>go-ethereum</strong>を利用します。

通称gethです。
<strong>読み方はそのままゲスで大丈夫です。</strong>
躊躇せず読んじゃってください。

Macにインストールする場合のコマンドは
こちらになります。

&nbsp;
<pre><code class=""language-bash"">brew tap ethereum/ethereum
brew install ethereum
</code></pre>
&nbsp;

エラーがなくインストールできていれば完了です。
インストールできるているかは下記のように
確認しましょう。

&nbsp;
<pre><code class=""language-bash"">$geth version
Geth
Version: 1.7.2-stable
Git Commit: 1db4ecdc0b9e828ff65777fb466fc7c1d04e0de9
Architecture: amd64
Protocol Versions: [63 62]
Network Id: 1
Go Version: go1.9.2
Operating System: darwin
GOPATH=
GOROOT=/usr/local/Cellar/go/1.9.2/libexec
</code></pre>
&nbsp;

&nbsp;
<h2 class=""chapter"">Gethを起動してテストネットワークに接続する</h2>
&nbsp;

今回接続するのはローカルプライベートテストネットなので、
冒頭で説明したように、
お金の心配だったり他の方に迷惑をかける恐れは
ないので、そのまま安心してお進みください。

&nbsp;
<h3>データディレクトリを作成</h3>
送受信したブロックのデータやアカウント情報を格納するための、
ディレクトリを作成します。
<pre><code class=""language-bash"">mkdir my-first-eth</code></pre>
&nbsp;
<h3>Genesisファイルを作成</h3>
&nbsp;

Genesisファイルは、
ブロックチェーンの一番最初のブロックチェーンの
情報をかいた設定ファイルのようなものです。
ローカルプライベートテストネットを利用する場合は、
ゼロからブロックチェーンを構築するため、
このファイルが必要となります。

&nbsp;

myGenesis.json
<pre><code class=""language-json"">{
""nonce"": ""0x0000000000000042"",
""mixhash"": ""0x0000000000000000000000000000000000000000000000000000000000000000"",
""difficulty"": ""0x400"",
""alloc"": {},
""coinbase"": ""0x3333333333333333333333333333333333333333"",
""timestamp"": ""0x0"",
""parentHash"": ""0x0000000000000000000000000000000000000000000000000000000000000000"",
""extraData"": ""0x"",
""gasLimit"": ""0x8000000"",
""config"": {}
}
</code></pre>
&nbsp;
<h3>Gethの初期化</h3>
作成したGenesisファイルで初期化をします。
<pre><code class=""language-bash"">geth --datadir /your/env/path/my-first-eth init /your/env/path/myGenesis.json</code></pre>
&nbsp;
<h3>Gethの起動</h3>
起動のコマンドはこちらになります。
<pre><code class=""language-bash"">geth --networkid 10 --nodiscover --maxpeers 0 --datadir /your/env/path/my-first-eth console 2&gt;&gt; geth.log </code></pre>
&nbsp;

それぞれのオプションを説明すると

<b>--networkid</b>
ネットワーク識別子。0 ~ 3 は予約済みですので、
指定する際は他の値を指定します。

<b>--nodiscover</b>
起動したノードを他のノードから検出できないようにします。

<b>--maxpeers</b>
起動したノードに接続できるノードの数です。0を指定すると、
他のノードとは接続しなくなります。

<b>console</b>
対話型のJavaScriptコンソールを呼び出します。

問題なければ対話型のコンソールが表示され、
プロンプトが現れます。

ここまででgethの起動は完了です。

&nbsp;

&nbsp;

[mid_article]

&nbsp;

&nbsp;

&nbsp;
<h2 class=""chapter"">アカウントの作成</h2>
&nbsp;

&nbsp;

イーサリアムを送金する必要があるので、
アカウントを作成する必要があり、
作成するユーザーのことはEOA ( Externally Owned Account)と
呼ばれます。

コマンドは以下になります。
引数の文字列はパスワードになるので、
忘れないようにしましょう。
<pre><code class=""language-go"">personal.newAccount(""password"")</code></pre>
&nbsp;

送金を行うには、
送り手と受け手が必要ですので、
もう一つアカウントを作成します。
<pre><code class=""language-go"">personal.newAccount(""drowssap"")</code></pre>
&nbsp;

&nbsp;

アカウントを作成した際に表示された文字列は、
作成したアカウントのアドレスになります。
送金を行う際はこのアドレスを利用して、送金を行うことになります。

作成したアカウントを確認します。
<pre><code class=""language-go"">&gt; personal.newAccount(""password"")
""0x73c935b7ade47b3a3efa29769e4db1cc91aa2e88""
&gt; 
&gt; 
&gt; 
&gt; personal.newAccount(""drowssap"")
""0x0c792c39d206ae2d2a0df7b7db7d365c3067a137""
&gt; 
&gt; 
&gt; eth.accounts
[""0x73c935b7ade47b3a3efa29769e4db1cc91aa2e88"", ""0x0c792c39d206ae2d2a0df7b7db7d365c3067a137""]</code></pre>
&nbsp;

&nbsp;
<h2 class=""chapter"">残高の確認・マイニング</h2>
下記のコマンドで残高を確認できますが、
まだマイニングを行なっていないため残高は0となっています。
<pre><code class=""language-go"">&lt; eth.getBalance(eth.accounts[0])
0</code></pre>
&nbsp;

ブロックチェーンのブロック数も0になっています。
<pre><code class=""language-go"">&lt; eth.blockNumber
0
</code></pre>
&nbsp;

この状態では、
まだローカルのブロックチェーン上に一つのブロックも生成されて
いない状態なので、
マイニングでブロックを生成していきます。
<pre><code class=""language-go"">&lt; miner.start(1)
null
</code></pre>
&nbsp;

しばらくするとブロックが生成されてきます。
<pre><code class=""language-go"">&lt;  miner.stop()
true
</code></pre>
&nbsp;

そして残高を確認してみると
<pre><code class=""language-go"">&lt; eth.getBalance(eth.accounts[0])
195000000000000000000
&gt; web3.fromWei(eth.getBalance(eth.accounts[0]),""ether"")
195
</code></pre>
195ETHが最初に作成したアカウントに
入金されています。
これでマイニング成功です。
※もちろん、これはテスト環境でのみ使える通貨で金銭的な価値はありません。

ここまで準備ができたので最後は送金を行います。

&nbsp;

&nbsp;

&nbsp;

&nbsp;
<h2 class=""chapter"">送金</h2>
&nbsp;

&nbsp;

はじめにアカウントの残高を確認します。
<pre><code class=""language-go"">&gt; eth.getBalance(eth.accounts[0])
195000000000000000000
&gt; 
&gt; 
&gt; eth.getBalance(eth.accounts[1])
0
&gt; 
</code></pre>
&nbsp;

残高を確認すると、
account1には195ETH、
account2には0ETHであることがわかります。

また、送金を行うには
<strong>アカウントのロック解除が必要</strong>ですので、
コマンドでロックを解除します。
<pre><code class=""language-go"">personal.unlockAccount(eth.accoutns[0],'password',0)</code></pre>
&nbsp;

それでは、
account1からaccount2に100ETHを送ってみます。
<pre><code class=""language-go"">&gt; eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: web3.toWei(100,""ether"") })
""0xd404f7d67c0df7c8388db84efe9f1523f6134b18b5b615121ee236281e5db9d8""
&gt; 
&gt; 
&gt; 
&gt; eth,getTransaction(""0xd404f7d67c0df7c8388db84efe9f1523f6134b18b5b615121ee236281e5db9d8"")
ReferenceError: 'getTransaction' is not defined
    at &lt;anonymous&gt;:1:5

&gt; eth.getTransaction(""0xd404f7d67c0df7c8388db84efe9f1523f6134b18b5b615121ee236281e5db9d8"")
{
  blockHash: ""0x0000000000000000000000000000000000000000000000000000000000000000"",
  blockNumber: null,
  from: ""0x73c935b7ade47b3a3efa29769e4db1cc91aa2e88"",
  gas: 90000,
  gasPrice: 18000000000,
  hash: ""0xd404f7d67c0df7c8388db84efe9f1523f6134b18b5b615121ee236281e5db9d8"",
  input: ""0x"",
  nonce: 0,
  r: ""0xc69cac899af8c2e914f3dda00379bd9c6df4478e465d96e5521042b0f6ce1120"",
  s: ""0x677930addcbeb8299e0ff52a1e7fe79cd4db2b10714b3706faf08b8aa2e84b9e"",
  to: ""0x0c792c39d206ae2d2a0df7b7db7d365c3067a137"",
  transactionIndex: 0,
  v: ""0x1b"",
  value: 100000000000000000000
}
&gt; </code></pre>
&nbsp;

これで送金は完了しました。

が、
残高を確認してみると
残高が移動していないように見えます。
<pre><code class=""language-go"">&gt; eth.getBalance(eth.accounts[0])
195000000000000000000
&gt; 
&gt; 
&gt; 
&gt; eth.accounts[1]
""0x0c792c39d206ae2d2a0df7b7db7d365c3067a137""
&gt; eth.getBalance(eth.accounts[1])
0
&gt; </code></pre>
&nbsp;

これは、
送金をしたあとに<strong>マイニングで取引が</strong><strong>承認されていないためです。</strong>
再度マイニングを行い、
残高を確認してみると100ETHがaccount2の残高に
反映されていることが確認できます。
<pre><code class=""language-go"">&gt; miner.start(1)
null
&gt; 
&gt; miner.stop()
true
&gt; 
&gt; 
&gt; eth.getBalance(eth.accounts[1])
100000000000000000000
&gt; web3.fromWei(eth.getBalance(eth.accounts[1]),'ether')
100
&gt; </code></pre>
&nbsp;

これでイーサリアムの送金はできました！

以上です！！
<div class=""cstmreba"">
<div class=""booklink-box"">
<div class=""booklink-image""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4798151343/llg01-22/"" target=""_blank"" rel=""nofollow noopener""><img style=""border: none;"" src=""https://images-fe.ssl-images-amazon.com/images/I/51ZDMhsrXWL._SL320_.jpg"" /></a></div>
<div class=""booklink-info"">
<div class=""booklink-name"">

<a href=""http://www.amazon.co.jp/exec/obidos/asin/4798151343/llg01-22/"" target=""_blank"" rel=""nofollow noopener"">はじめてのブロックチェーン・アプリケーション Ethereumによるスマートコントラクト開発入門 (DEV Engineer's Books)</a>
<div class=""booklink-powered-date"">posted with <a href=""https://yomereba.com"" target=""_blank"" rel=""nofollow noopener"">ヨメレバ</a></div>
</div>
<div class=""booklink-detail"">渡辺 篤,松本 雄太,西村 祥一,清水 俊也 翔泳社 2017-08-03</div>
<div class=""booklink-link2"">
<div class=""shoplinkamazon""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4798151343/llg01-22/"" target=""_blank"" rel=""nofollow noopener"">Amazonで購入</a></div>
<div class=""shoplinkkindle""><a href=""http://www.amazon.co.jp/exec/obidos/ASIN/B07416W2PY/llg01-22/"" target=""_blank"" rel=""nofollow noopener"">Kindleで購入</a></div>
<div class=""shoplinkrakuten""><a href=""https://hb.afl.rakuten.co.jp/hgc/163854b7.d97e8d5b.163854b8.3c41ae34/?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F15008160%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F"" target=""_blank"" rel=""nofollow noopener"">楽天ブックスで購入</a></div>
<div class=""shoplinkseven""><a href=""https://px.a8.net/svt/ejp?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2&amp;a8ejpredirect=http%3A%2F%2F7af-ent.omni7.jp%2Frelay%2Faffiliate%2FentranceProcess.do%3Furl%3Dhttp%253A%252F%252F7net.omni7.jp%252Fsearch%252F%253FsearchKeywordFlg%253D1%2526keyword%253D4-79-815134-2%252520%25257C%2525204-798-15134-2%252520%25257C%2525204-7981-5134-2%252520%25257C%2525204-79815-134-2%252520%25257C%2525204-798151-34-2%252520%25257C%2525204-7981513-4-2"" target=""_blank"" rel=""nofollow noopener"">7netで購入</a><img src=""https://www17.a8.net/0.gif?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2"" alt="""" width=""1"" height=""1"" border=""0"" /></div>
</div>
</div>
<div class=""booklink-footer""></div>
</div>
</div>
&nbsp;

&nbsp;

[after_intro]"
"240","2017-02-20 00:27:09","2017-12-22 20:24:19","画面分割で作業捗る!!Mac OS Xに標準搭載 Split View","mac-os-x-split-view","http://ver-1-0.net/wp-content/uploads/2017/02/6njoebtarec-lee-campbell.jpg","%e4%bb%95%e4%ba%8b","<h2></h2>
<h2>Mac OS Xに標準搭載 Split Viewという機能
ご存知ですか？</h2>

<hr />

&nbsp;

この機能を使うと全画面表示した
Window二つを一つの画面に並べて表示できます。

&nbsp;

私はこないだはじめって知って
<strong>「もっと早く知っていれば・・・」</strong>
という情報だったので共有させて頂きます。

&nbsp;

Macが仮想デスクトップというものを持っていて、
デスクトップを切り替えて使えて、
複数の全画面表示のWindowの間を
移動できるというのは知っている方もいるかもしれないですが
画面分割できるというのは、
意識して調べないと厳しいですよね！！

&nbsp;

ということで早速
やり方の動画です。

[video width=""960"" height=""540"" mp4=""http://ver-1-0.net/wp-content/uploads/2017/02/SplitView.mp4""][/video]

&nbsp;

&nbsp;

やり方は簡単
<ol>
 	<li>画面分割したいWindow A と B を用意
Aを全画面表示</li>
 	<li><strong>Ctrl + ↑</strong> を押すと仮想デスクトップ全体が見れるので押す。</li>
 	<li>BのWindowをAのWindowの上にドラッグ&amp;ドロップ</li>
</ol>
&nbsp;

たったこれだけです。
これまでは、いちいち<strong>Command + Tab</strong> とかで
切り替えていた画面が一度に表示できてしまいます!!

これで<strong>作業効率UP</strong>間違いなしかと
以上です!!

&nbsp;

&nbsp;

ディスプレイ買う方は
こちらなどオススメです。

<iframe style=""width: 120px; height: 240px;"" src=""//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=llg01-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01FQ6JM8S&amp;linkId=04d5f61b3b188251233e5c01d4fd446d"" width=""300"" height=""150"" frameborder=""0"" marginwidth=""0"" marginheight=""0"" scrolling=""no""></iframe>

<iframe style=""width: 120px; height: 240px;"" src=""//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=llg01-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B014I8SSD0&amp;linkId=1747b8fac3230078e4a3f82558d2c6e7"" width=""300"" height=""150"" frameborder=""0"" marginwidth=""0"" marginheight=""0"" scrolling=""no""></iframe>

これだと最新のMac の USB-TYPE-Cの端子からHDMIに接続できます。
<iframe style=""width: 120px; height: 240px;"" src=""//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=llg01-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01CG7CMSM&amp;linkId=c47bc43afce7e2250c60fc2db1d6f6f5"" width=""300"" height=""150"" frameborder=""0"" marginwidth=""0"" marginheight=""0"" scrolling=""no""></iframe>"
"151","2017-02-04 14:27:38","2018-08-25 22:21:01","自分と市場の強みについて。- 彼を知り己を知れば百戦殆うからず -  己は「オレ」で彼はダレ？","market-and-me","http://ver-1-0.net/wp-content/uploads/2017/05/jonathan-simcoe-227321.jpg","colum::::freelance","&nbsp;

&nbsp;
<h2>彼を知り己を知れば百戦殆うからず</h2>
<blockquote>【意味】彼を知り己を知れば百戦殆うからずとは、敵についても味方についても情勢をしっかり把握していれば、幾度戦っても敗れることはないということ。</blockquote>
引用元:<a href=""http://kotowaza-allguide.com/ka/karewoshiri.html"" target=""_blank"" rel=""noopener noreferrer"">http://kotowaza-allguide.com/ka/karewoshiri.html</a>

&nbsp;

&nbsp;

&nbsp;

<strong>いきなり重めのワード</strong>を紹介して驚かれたかもしれませんが、

孫氏の名言から引用させて頂きました。
この名言を現代に当てはめるとすると、
ここでの己とは言わずもがな、自分のやってきたこと、
自分の好きなことや、嫌いなこと、得意なことや苦手なことでしょう。

&nbsp;

&nbsp;

&nbsp;

では、<strong>彼というのは誰でしょうか？あの憎っくき上司の事でしょうか？</strong>
<strong> 同期のライバルの事でしょうか？それともこだまでしょうか？</strong>

&nbsp;

&nbsp;

&nbsp;
<h2>いえ、市場です</h2>
<div class=""cstmreba"">
<div class=""booklink-box"">
<div class=""booklink-image""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4478064784/llg01-22/"" target=""_blank"" rel=""nofollow noopener""><img style=""border: none;"" src=""https://images-fe.ssl-images-amazon.com/images/I/51GLVSqdPLL._SL320_.jpg"" /></a></div>
<div class=""booklink-info"">
<div class=""booklink-name"">

<a href=""http://www.amazon.co.jp/exec/obidos/asin/4478064784/llg01-22/"" target=""_blank"" rel=""nofollow noopener"">マーケット感覚を身につけよう---「これから何が売れるのか?」わかる人になる5つの方法</a>
<div class=""booklink-powered-date"">posted with <a href=""https://yomereba.com"" target=""_blank"" rel=""nofollow noopener"">ヨメレバ</a></div>
</div>
<div class=""booklink-detail"">ちきりん ダイヤモンド社 2015-02-20</div>
<div class=""booklink-link2"">
<div class=""shoplinkamazon""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4478064784/llg01-22/"" target=""_blank"" rel=""nofollow noopener"">Amazonで購入</a></div>
<div class=""shoplinkkindle""><a href=""http://www.amazon.co.jp/exec/obidos/ASIN/B00TPC8JXE/llg01-22/"" target=""_blank"" rel=""nofollow noopener"">Kindleで購入</a></div>
<div class=""shoplinkrakuten""><a href=""https://hb.afl.rakuten.co.jp/hgc/163854b7.d97e8d5b.163854b8.3c41ae34/?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F13092091%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F"" target=""_blank"" rel=""nofollow noopener"">楽天ブックスで購入</a></div>
<div class=""shoplinkseven""><a href=""https://px.a8.net/svt/ejp?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2&amp;a8ejpredirect=http%3A%2F%2F7af-ent.omni7.jp%2Frelay%2Faffiliate%2FentranceProcess.do%3Furl%3Dhttp%253A%252F%252F7net.omni7.jp%252Fsearch%252F%253FsearchKeywordFlg%253D1%2526keyword%253D4-47-806478-8%252520%25257C%2525204-478-06478-8%252520%25257C%2525204-4780-6478-8%252520%25257C%2525204-47806-478-8%252520%25257C%2525204-478064-78-8%252520%25257C%2525204-4780647-8-8"" target=""_blank"" rel=""nofollow noopener"">7netで購入</a><img src=""https://www17.a8.net/0.gif?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2"" alt="""" width=""1"" height=""1"" border=""0"" /></div>
</div>
</div>
<div class=""booklink-footer""></div>
</div>
</div>
<blockquote>すばらしい学歴や職歴に加え 、難関資格から専門知識まで持ちながら、
不安から逃れられない人がいる一方 、ずっと少ないものしかもっていないのに 、
「なんとかなる 」 「なんとでもなる 」という自信とともに、世の中をわたっていける人もいます 。
この両者の違いがまさに 「売れるものに気がつく能力 」であり、「価値を認識する能力 」の差です 。</blockquote>
&nbsp;

&nbsp;

ちきりんさんの
マーケット感覚を身につけようから引用させて頂きました。
引用ばかりで恐縮ですが。。
Twitterでも、居酒屋でも「上司や経営層は全然わかっていない」「最近の新人は指示待ちで
全然使えない」「長時間働かせといて、残業代も出ないし、給料も安い」などなど、
世間は悪口や愚痴で満ちています。

&nbsp;

&nbsp;

「会社にもっと待遇をよくしろ」とか、「上司・同僚・部下にもっとちゃんと仕事しろ」
などなどありますが、
全然そんなことしている場合じゃないです！！

&nbsp;

待遇をよくしろと言っても会社もそんなに万能ではなく、
売り上げにや人件費にも限りがあるので
よほどのことがないと待遇は改善されません。

できる人は、
そういう人たちが居酒屋とか職場で環境のせいにして不満を言っているのを
横目にみて着々と力をつけて、
<strong>自分にどんな価値</strong>があり、<strong>その価値がどこで重宝されるのか</strong>ということを勉強して
稼ぐ力を身につけ・実行しているはずです。

&nbsp;

と、
ここまでは割と辛口な意見を書きましたが、
実際には市場と言われてもいまいちイメージ掴みづらいですよね。
（私も上のことが実践できているか自問自答しながら日々を過ごしています。）

&nbsp;

&nbsp;

&nbsp;
<h2 class=""chapter"">ひとまずは己を知ってみる</h2>
&nbsp;

&nbsp;

ひとまずは<strong>ちきりんさんの書籍</strong>を読んでみるというのも良いかと思うのですが、
冒頭に紹介した<strong>「彼を知り己を知れば百戦殆うからず」</strong>ということで
まずは<strong>「己を知ってみる」</strong>というの良いのではないでしょうか。

&nbsp;

&nbsp;

<a href=""https://px.a8.net/svt/ejp?a8mat=2TC21N+6QWXWQ+2GDO+6H729"" target=""_blank"" rel=""noopener noreferrer"">
<img src=""https://www22.a8.net/svt/bgt?aid=170203739408&amp;wid=004&amp;eno=01&amp;mid=s00000011454001088000&amp;mc=1"" alt="""" width=""300"" height=""250"" border=""0"" /></a>
<img src=""https://www14.a8.net/0.gif?a8mat=2TC21N+6QWXWQ+2GDO+6H729"" alt="""" width=""1"" height=""1"" border=""0"" />

こちらグッドポイント診断では、
自分の強みを知ることができます。

所要時間は大体20~30分程度です。
（ちょっと長いかも、結構問題数もあるのでそれなりに
体力いりました。。。)

&nbsp;

&nbsp;

結果は以下のような形で確認できます。

<a href=""http://ver-1-0.net/wp-content/uploads/2017/02/グッドポイント診断.png""><img class=""alignnone size-large wp-image-165"" src=""http://ver-1-0.net/wp-content/uploads/2017/02/グッドポイント診断-1024x473.png"" alt="""" width=""700"" height=""323"" /></a>

<a href=""http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-02-13.20.47.png""><img class=""alignnone size-large wp-image-156"" src=""http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-02-13.20.47-1024x229.png"" alt=""グッドポイント診断"" width=""700"" height=""157"" /></a>

<a href=""http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-02-13.20.56.png""><img class=""alignnone size-large wp-image-155"" src=""http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-02-13.20.56-1024x271.png"" alt=""グッドポイント診断"" width=""700"" height=""185"" /></a>

<a href=""http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-02-13.21.06.png""><img class=""alignnone size-large wp-image-154"" src=""http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-02-13.21.06-1024x234.png"" alt=""グッドポイント診断"" width=""700"" height=""160"" /></a>

<a href=""http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-02-13.21.10.png""><img class=""alignnone size-large wp-image-153"" src=""http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-02-13.21.10-1024x236.png"" alt=""グッドポイント診断"" width=""700"" height=""161"" /></a>

&nbsp;

回答に一定の体力が必要な分、
しっかりと結果が返ってきます。
（上の画像は、私の結果です）

&nbsp;

&nbsp;

&nbsp;

&nbsp;
<h2 class=""chapter"">まとめ - 「市場」と「己」を知る。-</h2>
&nbsp;

&nbsp;

<strong>「市場を知る」</strong>というのは、
なかなか難しいですが、こう言ったものを通して自分の強みを知るというのであれば
まだとっかかり易いですよね。
<strong>グッドポイント診断</strong>は性格的な側面が強いですが、
スキル的な部分も当然大事です。

&nbsp;

<strong>自分にどんな価値があり、どういう場所でそれを発揮すると</strong>
<strong> 一番自分が楽しいのかや評価がもらえるのか</strong>というのは
常に考えていくべきことです。

&nbsp;

まあ、
要は彼を知り、己を知るということですね。

環境のせいにするのではなく、
力磨いてたくましく生きていきましょう！！
以上です。

&nbsp;

[adsense_double_rect]

&nbsp;"
"262","2017-03-11 23:07:13","2018-08-26 12:15:22","Rails  migration |  通らないmigration をスキップする | down upの変更方法","migration-matome","http://ver-1-0.net/wp-content/uploads/2017/01/スクリーンショット-2017-01-03-15.37.16.png","engineering::::rails","&nbsp;

rails ではマイグレーションコードを
gitで保管して、DBの変更履歴を残していたり
するのですが、
たまーーに
migrationコードを実行せずにSQLで直接
DBを変更する輩がいます。

&nbsp;

そんな時に
<pre><code class=""language-ruby"">rails db:migrate</code></pre>
としようものなら、
<strong>「そんなカラムはalreadyで存在するぜ」</strong>
とか
<strong>「そんなカラムないけどちゃんと確認して」</strong>
と怒られることがあります。

&nbsp;

いらないマイグレーションコードだとわかっていれば
すぐにファイルを削除してしまえばいいのですが、
そうもできない時があります。

&nbsp;

そんな時に、実際は実行してないけど
スキップする方法を探していたのですが。。。
<h3>ありました</h3>
方法は簡単です。

&nbsp;

[after_intro]

&nbsp;

&nbsp;
<h2>スキップしたいバージョン番号のレコード
をschema_migrationテーブルに追加する</h2>
です。
これで、<strong>migrateがupの状態</strong>になり、
次から実行されることはありません。

railsのマイグレーションはどうやら、
<strong>schema_migration</strong>というテーブルで
migrationの実行有無( rake db:migrate:statusで見れるやつ )
を管理しているようですね。

バージョン番号というのは
rails gすると勝手に先頭に付加される数字です
<pre><code class=""language-bash""> 例 ) 20170310XXXXXX_create_user.rb</code></pre>
また逆も然りで、
再度migrationコードを実行したい場合は
対象のレコードを削除してあげます。

試してみてください!!
"
"326","2017-04-28 23:16:17","2018-11-08 18:29:35","[Node.js]ビットコインの価格をBitFlyer APIを使ってリアルタイムにDBに保存する。","node-js-realtime","http://ver-1-0.net/wp-content/uploads/2017/04/スクリーンショット-2017-04-28-23.09.33.png","cryptocurrency-blockchain::::engineering","&nbsp;

&nbsp;

今回は徐々に浸透しつつあるビットコインの（個人的な見解ですが）
価格を取得する方法を紹介します！！
お使いのPCにNode.jsがインストールされていれば
すぐにリアルタイムに価格を取得できます。

&nbsp;
<h2>BitFlyerのAPIを使って価格取得</h2>
価格の取得には<a href=""https://bitflyer.jp?bf=rorqosjz"" target=""_blank"" rel=""nofollow noopener noreferrer"">ビットフライヤー</a>のAPIを利用します。<a href=""https://px.a8.net/svt/ejp?a8mat=2TAGV9+1IRYQY+3JJ4+62U35"" target=""_blank"" rel=""nofollow noopener noreferrer"">
</a>
<img src=""https://www12.a8.net/0.gif?a8mat=2TAGV9+1IRYQY+3JJ4+62U35"" alt="""" width=""1"" height=""1"" border=""0"" />

APIの情報はこちらからみれます。
<a href=""https://bitflyer.jp/ja/api"">https://bitflyer.jp/ja/api</a>

こちらのAPIでは、<a href=""https://www.pubnub.com/"">PubNub</a>
というサービスを使って
リアルタイムにAPIを取得してきます。

ベースとなるのは、
<a href=""https://lightning.bitflyer.jp/docs?lang=ja#realtime-api"">こちら</a>にも
記載されたコードです。

[after_intro]

これで1ティックごとに価格を取得できます。
<pre><code class=""language-javascript"">// Node.js のサンプル
var PubNub = require('pubnub');
var pubnub = new PubNub({
    subscribeKey: 'sub-c-52a9ab50-291b-11e5-baaa-0619f8945a4f'
});
pubnub.addListener({
    message: function (message) {
        console.log(message.channel, message.message);
    }
});
pubnub.subscribe({
    channels: ['lightning_ticker_BTC_JPY']
});
</code></pre>
&nbsp;

&nbsp;

これをindex.js などとして
適当なディレクトリに置いて以下コマンドでpubnubモジュール取得
<pre><code class=""language-bash"">npm install pubnub --save-dev
</code></pre>
&nbsp;
<pre><code class=""language-bash"">node index.js 
</code></pre>
で実行。

&nbsp;

&nbsp;
<h2 class=""chapter"">実行例</h2>
&nbsp;

こう言った感じで、価格を表示し続ける
サーバの完成です。
<pre><code class=""language-bash"">$node index.js 
lightning_ticker_BTC_JPY { product_code: 'BTC_JPY',
  timestamp: '2017-04-28T14:10:50.8892719Z',
  tick_id: 77957,
  best_bid: 147600,
  best_ask: 147799,
  best_bid_size: 0.53973796,
  best_ask_size: 2.35196282,
  total_bid_depth: 8602.3910664,
  total_ask_depth: 1527.97714433,
  ltp: 147600,
  volume: 11264.84506998,
  volume_by_product: 11264.84506998 }
lightning_ticker_BTC_JPY { product_code: 'BTC_JPY',
  timestamp: '2017-04-28T14:10:51.0298905Z',
  tick_id: 77958,
  best_bid: 147600,
  best_ask: 147799,
  best_bid_size: 0.53973796,
  best_ask_size: 2.35196282,
  total_bid_depth: 8602.4940664,
  total_ask_depth: 1527.97714433,
  ltp: 147600,
  volume: 11264.84506998,
  volume_by_product: 11264.84506998 }
lightning_ticker_BTC_JPY { product_code: 'BTC_JPY',
  timestamp: '2017-04-28T14:10:51.1705529Z',
  tick_id: 77960,
  best_bid: 147600,
  best_ask: 147799,
  best_bid_size: 0.53973796,
  best_ask_size: 2.35196282,
  total_bid_depth: 8619.3160664,
  total_ask_depth: 1527.97714433,
  ltp: 147600,
  volume: 11264.84506998,
  volume_by_product: 11264.84506998 }
lightning_ticker_BTC_JPY { product_code: 'BTC_JPY',
  timestamp: '2017-04-28T14:10:51.3267675Z',
  tick_id: 77961,
  best_bid: 147600,
・
・
・
</code></pre>
以上です！

<strong>ビットコインってどうやって買えるの？</strong>
という方はこちらの記事
まだ知らない？仮想通貨の買い方　ビットコイン、イーサリアム、ネム、リップルetc…

&nbsp;

<strong>ビットコインを使うとどうなるの？</strong>
という方はこちらの記事
<a href=""https://ver-1-0.net/2017/05/21/illustration-merit-bitcoin/"">ビットコイン急騰中!! ビットコインのメリットまとめてみた</a>

<strong>ブロックチェーンの仕組みに興味がある</strong>方は
こちらの記事
<a href=""https://ver-1-0.net/2017/10/18/how-does-blockchain-really-work-i-built-an-app-to-show-you-translate-ja/"">マイニングとは？ブロックチェーンの仕組みを解説する記事”How does blockchain really work? I built an app to show you.”を訳してみた</a>

が参考になるかと思います。
よろしければ覗いて見てください！！

"
"1012","2017-10-29 00:59:52","2018-08-26 11:31:29","NodeJS + PhatomJSでブログの全ページのスクショを取得する。（Sitemapから）","node-phantom-take-scsho","http://ver-1-0.net/wp-content/uploads/2017/01/5ntkpxqt54y-sai-kiran-anagani.jpg","engineering","<strong>2017年10月29日追記</strong>

このスクリプトを動かすとPVとしてカウントされてしまうことが
判明しました汗
見事にその時間のPVが跳ね上がり直帰率100%。。。
（IPでフィルタかけてるので大丈夫だと思ったのですが、なぜかダメでした。。）

もし、このスクリプトを動かす場合は十分に気をつけて
開発環境のサイトに対して実行したり（アクセスURLのドメインをローカルホストに置換したり）、
使用してください。

<hr>

どうも、
最近コツコツブログの記事を増やしてきているのですが、
一年弱でだいたい80ページくらいのブログになって来ました。

年内100記事が目標なので、
それを目指して着々と更新を続けていく予定です。
（本当はもっとペースあげたい・・）

と、
そんなところでコツコツと記事を
変えていると途中でCSSを変更したくなってくる時が
まあまああります。

変更するのは良いのですが、
それが全記事にどれくらい影響するかって中々確認しづらいですよね。

そんな時に全ページのキャプチャを取って来て
確認できたら楽だなぁと考えて。
<strong>自動でスクショを取ってくるスクリプトを作ろう！！</strong>
ということになりました。

&nbsp;

[after_intro]

&nbsp;
<h2 class=""chapter"">処理の流れの説明 - sitemapperとphantomjsを使う -</h2>
&nbsp;

早速手順ですが、
NodeJSと自動化テスト界隈で話題に上るPhantomJSを組み合わせて
作って行きます。

処理の流れとしては、
<ol>
 	<li>sitemapを解析して、ブログの全URLを取得。</li>
 	<li>取得したURL一つ一つに対してPhatomJSを使ってJSを取得していく。</li>
</ol>
&nbsp;

で、
1.のsitemapの解析は、
<a href=""https://github.com/hawaiianchimp/sitemapper"">sitemappter</a>というモジュールを使用し、

また2のPhantomJSでスクショをとる部分
は<a href=""https://github.com/Medium/phantomjs"">phantomjs</a>というモジュールを使用します。

これ、ふざけているのではなくNodeJS+PhantomJSの
モジュールはいくつかあるのでこういう説明にしています。。

とりあえず簡単に環境だけ作ってしまいましょう。

&nbsp;

&nbsp;

まずはディレクトリの作成
<pre><code class=""language-bash"">mkdir wp-scshots
cd wp-scshots
mkdir output # スクショの出力先
</code></pre>
&nbsp;

&nbsp;

次に必要なモジュールをnpmでインストール
<pre><code class=""language-bash"">
npm -y init
npm install --save sitemapper phantomjs
</code></pre>
&nbsp;

ここまでのPackage.jsonを残しておきます。
<pre><code class=""language-json"">{
  ""name"": ""wp-scshots"",
  ""version"": ""1.0.0"",
  ""description"": """",
  ""main"": ""index.js"",
  ""scripts"": {
    ""test"": ""echo \""Error: no test specified\"" &amp;&amp; exit 1""
  },
  ""keywords"": [],
  ""author"": """",
  ""license"": ""ISC"",
  ""dependencies"": {
    ""phantomjs"": ""^2.1.7"",
    ""sitemapper"": ""^2.1.13""
  }
}
</code></pre>

&nbsp;

[mid_article]

&nbsp;

<h2 class=""chapter"">実装</h2>
&nbsp;

&nbsp;

前のセクションで、モジュールのインストールはできたので、
実際に実装を行なっていきます。

まずは、
sitemapからURLを取得する部分

index.js
<pre><code class=""language-javascript"">var sitemap = new Sitemapper();
sitemap.fetch('https://ver-1-0.net/sitemap.xml').then(function(sites) {
    sites.sites.forEach(function(val,index,ar){
        console.log(val);
    });
}
</code></pre>
これだけで、
sitemapに書かれたURLが全て取得できてしまいます。

&nbsp;

&nbsp;

次は、
実際にスクリーンショットを撮る部分ですが
この記事のやり方だと直接phantomjsコマンドを
別プロセスで発行する方法になります。

ので、
スクリーンショットを撮る部分を関数にすると
以下のようになります。
上の方の部分はただの変数・定数定義になるのですが実際にphantomjsで
スクショを撮る部分は中盤あたりあるscreenshotメソッドです。

あらかじめ決めた定数と引数で与えられたURLを
元にコマンドを作成して実行する形になります。

&nbsp;

index.js
<pre><code class=""language-javascript"">const Sitemapper = require('sitemapper');
const OUTPUT_FOLDER = './output'; // 保存先のフォルダー
const VIEWPORT_W = '1024'; // viewportの横幅(幅：単位px)
const VIEWPORT_H = '768'; // viewportの高さ(幅：単位px)
const PHANTOM_JS_FILE = 'render.js'; // PhantomJSのパス

const childProcess = require('child_process');
const phantomjs = require('phantomjs');
const binPath = phantomjs.path;


function screenshot(url,index){
    const outputFilePath = `${OUTPUT_FOLDER}/version1_${index}.png`;
    const options = [
        PHANTOM_JS_FILE,
        url,
        outputFilePath,
        VIEWPORT_W,
        VIEWPORT_H
    ];
    const cmd = binPath + ' ' + options.join(' ')
    console.log(childProcess.execSync(cmd).toString());
}


var sitemap = new Sitemapper();
sitemap.fetch('https://ver-1-0.net/sitemap.xml').then(function(sites) {
    sites.sites.forEach(function(val,index,ar){
        console.log(val);
    });
}
</code></pre>
screenshotメソッドで実行されるコマンドは
<pre><code class=""language-bash"">phantomjs [phantomjsを実行するjsファイル] [URL] [出力ファイル名] [VIEWPORTの幅] [VIEWPORTの高さ]</code></pre>
になります。
[phantomjsを実行するjsファイル]は

render.js
<pre><code class=""language-javascript"">const page = require('webpage').create();
const system = require('system');

// 引数は、system.argsでアクセスできる。
const address = system.args[1];
const output = system.args[2];
const VIEWPORT_W = system.args[3];
const VIEWPORT_H = system.args[4];

page.viewportSize = {
  width: VIEWPORT_W,
  height: VIEWPORT_H,
};
page.open(address, function () {
    window.setTimeout(function () {
        page.render(output);
        phantom.exit();
    }, 200);
});
</code></pre>
になります。
コマンド引数をphantomjsのオプションに渡して実行する形ですね。

ここまでで来たらあとは、
取得したURLごとにscreenshotメソッドを実行するだけなので、
最初に追加したsitemapを出力しているループの部分に
screenshotメソッドを入れ込んで完成です。

index.js（最終盤）
<pre><code class=""language-javascript"">const Sitemapper = require('sitemapper');
const OUTPUT_FOLDER = './output'; // 保存先のフォルダー
const VIEWPORT_W = '1024'; // viewportの横幅(幅：単位px)
const VIEWPORT_H = '768'; // viewportの高さ(幅：単位px)
const PHANTOM_JS_FILE = 'render.js'; // PhantomJSのパス

const childProcess = require('child_process');
const phantomjs = require('phantomjs');
const binPath = phantomjs.path;


function screenshot(url,index){
    const outputFilePath = `${OUTPUT_FOLDER}/version1_${index}.png`;
    const options = [
        PHANTOM_JS_FILE,
        url,
        outputFilePath,
        VIEWPORT_W,
        VIEWPORT_H
    ];
    const cmd = binPath + ' ' + options.join(' ')
    console.log(childProcess.execSync(cmd).toString());
}


var sitemap = new Sitemapper();
sitemap.fetch('https://ver-1-0.net/sitemap.xml').then(function(sites) {
    sites.sites.forEach(function(val,index,ar){
        console.log(`processing ..${val}`);
        screenshot(val,index);
    });
});
</code></pre>
実行するには
<pre><code class=""language-javascript"">node index.js</code></pre>
です。

&nbsp;

&nbsp;
<h2 class=""chapter"">まとめ</h2>
&nbsp;

&nbsp;

はい、一通り説明しましたが、
早速私は自分のサイトで試したところうまくいってそうでした。
私の環境では、
約80ページのスクショを撮るのに10分ほどかかりました。

まあ今の記事数くらいであれば許容範囲という感じでしょうか。
これでイチイチサイトのページを開いてレイアウトの崩れとかをチェックする
必要がなくなりそうです。

今回は、
コマンド実行を同期実行にしましたが、
実行するプロセスを複数にしたりすればもう少し早くできたり
するかもしれませんね。
（最初は全部非同期で試したのですが、プロセスが上がりすぎてかなり重くなりました。。）

また、
phantomjsを子プロセスで動かすというのが
どうもしっくり来ないので、
もう少し良い実装の仕方があるのではとも思います。

とりあえず、目的は達成されたのでよしとします。
以上です！

[after_article]"
"2087","2018-07-01 16:24:45","2018-09-02 13:09:21","OmniAuthで認証後のコールバックにパラメータを渡す方法","omniauth-callback-pass-params","https://ver-1-0.net/wp-content/uploads/2018/02/rails-1.png","engineering::::rails","&nbsp;

FacebookログインやGoogleログインを実装する際によくお世話になるOmniauthですが、Webサービスに採用していると、認証完了後にある特定の処理をしたいということがまあまああります。

そんな時は、認証前のURLに任意のパラメータを渡して、<strong>コールバックでそのパラメータを元に処理をわけたい</strong>ということがありますよね。これができない場合は、sessionに値を保持してやったりするのですが、sessionを乱用すると、一見意味のわからないキーが乱立するので、極力Oauth認証後の処理であればこういった仕組みを利用していきたいです。

&nbsp;

調べてみたところ,omniauthに任意の値を渡すことが可能のようで、認証先（例えばgoogle）に飛ばす際のURLにパラメータを付与すると認証後にそのパラメータを取得できるようです。
<pre><code class=""language-pug"">= link_to 'Link' , user_oauth2_omniauth_authorize_path({flg: 1})
</code></pre>
として飛ばすと、
<pre><code class=""language-ruby"">def callback
　　params = request.env['omniauth.params']
　　if params['flg'].present?
　　　　// フラグのある時の処理
　　else
　　　　// フラグのない時の処理
　　end
end
</code></pre>
というように処理をわけることができます。

&nbsp;

決済の処理など外部に一度リクエストを飛ばして、リダイレクトしてもらう場合にもレスポンスに任意の値が設定できるのでomniauthも似た感じですね。

細かいですが、こういうことを知っておけると無駄な処理を書かなくてすむのでメモしておきます。"
"1419","2017-11-27 17:59:34","2018-08-25 22:18:33","テレワークでも生産性向上!!ポモドーロテクニックのやり方","pomodoro-techinque","https://ver-1-0.net/wp-content/uploads/2017/11/ivan-timov-138042.jpg","freelance","<h2 class=""chapter"">一人でも怠けない。生産性向上。ポモドーロテクニック</h2>
&nbsp;

昨今巷では働き方改革、副業解禁などなど
ワークスタイルに関する話題が上がっていますが、
皆さんはいかがでしょうか。

&nbsp;

&nbsp;

仕事をする環境も多様になっており、
在宅勤務されたり、テレワークされたりされるかたも
多いと思います。

通勤もしんどいし、
布団から出てすぐに仕事ができるって魅力的ですよね。
（微妙に本質から外れている気がするけど笑）

ただ一つ忘れてはならないことがあります。
日本の過酷な受験戦争を経験してきた方々はすでに知っているはずです。

それは、

&nbsp;
<strong>「一人で勉強・仕事すると怠ける」</strong>
&nbsp;

ということです。

&nbsp;

&nbsp;

自宅には、
様々な誘惑があります。

<strong>あったかいお布団</strong>や<strong>漫画が並んだ本棚</strong>、
作業部屋だけでなく、
コンピュータの中にもあなたの<strong>興味を</strong>
<strong> 刺激するブログや動画</strong>の数々。

しかし、
世の中にはそんな誘惑を
完全に断ち切るテクニックがあります。

それが
<strong>ポモドーロテクニック</strong>
です。

今回はこの
<strong>ポモドーロテクニック</strong>をご紹介したいと思います。

&nbsp;

[after_intro]

&nbsp;
<h2 class=""chapter"">ポモドーロテクニックとは？</h2>
&nbsp;

<a href=""https://cirillocompany.de/pages/pomodoro-technique"">ポモドーロテクニック</a>とは、
タイマーを使った簡単な時間管理術です。

&nbsp;

&nbsp;

ポモドーロとはこのテクニックを考案した開発者で起業家、
かつ作家のフランチェスコ・シリロ氏
の愛用していたトマト型のタイマーにちなんでつけられた名前です。
ポモドーロテクニックは短時間の集中を繰り返して
全体としての生産性を向上させるメソッドです。

&nbsp;

&nbsp;

次に実際にその方法について書いていきます。

[mid_article]
<h2 class=""chapter"">ポモドーロテクニックのやり方</h2>
<a href=""https://ver-1-0.net/2017/11/27/pomodoro-techinque/pomodoro-tech-iloveimg-compressed/"" rel=""attachment wp-att-1422""><img class=""alignnone size-large wp-image-1422"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/pomodoro-tech-iloveimg-compressed-1024x784.png"" alt=""ポモドーロテクニックの手順"" width=""700"" height=""536"" /></a>

&nbsp;

まず、
最初に終わらせないといけない作業を
25分単位で終わらせられるくらいの作業に切り出していきます。

&nbsp;

作業が切り出せたら、
25分をタイマーで測って作業を開始します。

ここで大切なのが、
この<strong>25分間は集中してやるべきタスクに集中</strong>して、<strong>メールやチャットなどが来ても対応しない</strong>ようにします。
（後の休憩時間に先延ばしにする。）

そして25分間たったら、5分の休憩を取ります。

この休憩の間は、コーヒーを飲んだり、
完全に休憩し次の仕事を始めたりはしません。

&nbsp;

&nbsp;

25分のポモドーロと5分の休憩を
4回繰り返したら、
<strong>少し長めの15分から30分の休憩</strong>を取ります。

&nbsp;

&nbsp;

ここまでがポモドーロテクニックの一連の流れで、
あとは一日に何個ポモドーロをこなせたか
数えて1日の生産性を管理します。

以上のようにポモドーロテクニックを紹介しましたが、
内容は割とシビアにタイマーを使って、
期限を決めてダッシュを繰り返すような形になります。

なかなかストイックなメソッドですが、
<strong>個人的にはポモドーロタイマーというトマト型のタイマー</strong>のおかげで
楽しみながら作業ができています。

&nbsp;
<h2 class=""chapter"">ポモドーロテクニックをやるべき理由</h2>
ポモドーロテクニックをやるべき理由は、
<a href=""https://cirillocompany.de/pages/pomodoro-technique"">ポモドーロテクニックのサイト</a>にもまとまっています。

上記のサイトをを参考にしつつメリットをあげていきます。

&nbsp;
<h3 class=""section"">作業にかかる時間がわかる</h3>
25分という時間を決めて取り組むので、
定期的な作業がどの程度で完了できるかわかるようになります。
私も記事を書く時にやってみましたが、
だいたい1記事=3ポモドーロくらいかかるということがわかりました。

&nbsp;
<h3 class=""section"">SNSやメールなど作業を妨害するものに邪魔されない</h3>
冒頭にも話しましたが、
作業をする上で自分の集中を妨げるものというのは本当に信じられない
くらい多いです。
Facebookのポストやtweetや友人からのLINEでのメッセージなどなど、
これらの妨害を脇に寄せて本当に集中すべきことに集中できます。

&nbsp;
<h3 class=""section"">作業の見積もりができるようになる</h3>
ポモドーロを繰り返すと作業にかかる時間がわかるようになるので、
それらを見て、明日、来月にいくつのポモドーロが必要かを見積もることができます。

&nbsp;
<h3 class=""section"">作業のタイムスケージュルが立てられるようになる</h3>
ポモドーロで実際にかかる時間が割り出せるので、
作業のタイムスケジュールが引けるようになります。

&nbsp;
<h3 class=""section"">作業の目標が明確になる</h3>
限られた時間で何をやり、終わらせるのか。どれくらい時間がかかったのかに
集中できるので、「次はこの作業を-1ポモドーロで終わらせる」などの目的が明確になり、
モチベーションが保ちやすいです。
また、記事作成を考えると推敲に時間がかかりすぎているなど、
各作業の割合の調整する際の参考にもなります。

&nbsp;
<h2 class=""chapter"">ポモドーロテクニックをやってみて</h2>
&nbsp;

&nbsp;
<blockquote>- パーキンソンの法則 -

仕事の量は、完成のために与えられた時間をすべて満たすまで膨張する</blockquote>
&nbsp;

締め切り間近って、
プレッシャーもありますが、ここ一番の集中力を発揮しますよね。
必要な作業が見えていて、
いらない作業はガンガン切っていける。

ポモドーロタイマーを使うと
これが非常にやりやすいです。

&nbsp;

&nbsp;

私は<strong>アマゾンで売っていた、良い感じの形のタイマー</strong>を購入して、
使っているのですが、これがまた良いです。

アプリや、webサイトでも同じような
機能のあるものが探すと見つかりますが、
ぜひ、
ポモドーロテクニックを試す方は、
<strong>このポモドーロタイマーを購入して手元に置いて</strong>、
やって欲しいと思います。

ポモドーロタイマーをひねって25分の目盛りに合わせる動作が
集中する前のトリガーになるので、
一度試して見ていただけると良いと思います。

&nbsp;

&nbsp;

また、
このタイマーをひねって置いておくと、
<strong>チクタクチクタクという音</strong>がなって、
<strong>今ポモドーロの最中であるというのを常に意識させ続けながら、</strong>
<strong> 作業をすることができます。</strong>

&nbsp;

&nbsp;

アプリのポモドーロタイマーですと、
その日に消化したポモドーロをカウントしてくれたり、
タスクリストと連携していたりして便利なのですが、
これを読んでいる方には、ぜひ<strong>ポモードロタイマーを手元に</strong>
<strong> 置いて試して頂きたいです。</strong>

&nbsp;

&nbsp;

退屈な単純作業であったり、ここ一番集中して取り組まないといけない作業などに対して、
今回紹介したポモドーロテクニックを使ってみると、
<strong>トマトを見ながら楽しくゲーム感覚でタスクをこなすことができます。</strong>

あなたの作業机に一つトマトの形をしたタイマーを
置いて生産性向上のタイマーとして置いて見てはいかがでしょうか？

&nbsp;

興味ある方はこちらから、
1000円ほどで買えます。

<a href=""http://amzn.to/2A9dZhd"">=&gt;360度　かわいい　キッチンタイマー　トマトタイマー　1~60分</a>

&nbsp;

以上です！！

[after_article]"
"1918","2018-02-14 00:57:08","2018-09-02 13:09:21","polymophicなテーブルを経由して、has_many thourghする。","post-1918","https://ver-1-0.net/wp-content/uploads/2018/02/rails-1.png","engineering::::rails","&nbsp;

Railsのアソシエーションで、中間テーブルを経由して一個飛ばしでインスタンスを取得できるhas_many~through便利ですよね。ところが、この<strong>中間テーブルがpolymophicだった場合</strong>に、どうやって対象を取得すれば良いのかということに悩みました。

&nbsp;

解決策は、結論からいうと、下の例でいうと
モデルにはこういう形で定義して、そのままuser.post_commentsのような形でできます。

&nbsp;

&nbsp;
<pre><code class=""language-ruby"">has_many :post_comments, through: :comments, :source =&gt; :commentable,:source_type =&gt; 'Post'
has_many :blog_comments, through: :comments :source =&gt; :commentable,:source_type =&gt; 'Blog'
</code></pre>
&nbsp;

[after_intro]

&nbsp;
<h2>図やコードを交えて解説</h2>
&nbsp;

これだけではなんのことかよくわからないかもしれないので、上の結論のコードの全容を明かすと以下のようになります。

以下のモデルは、複数のユーザがブログを作り、各々ポストを投げていくという世界を想定したモデル群です。

<a href=""https://ver-1-0.net/2018/02/14/post-1918/polymophic-through/"" rel=""attachment wp-att-1922""><img class=""alignnone size-large wp-image-1922"" src=""https://ver-1-0.net/wp-content/uploads/2018/02/polymophic-through-1024x767.png"" alt=""has_many~through polymophioc"" width=""1024"" height=""767"" /></a>

&nbsp;

&nbsp;
<pre><code class=""language-ruby"">class User &lt; ActiveRecord::Base 
  has_many :blogs 
  has_many :posts 
  has_many :comments 
  has_many :post_comments, through: :comments, :source =&gt; :commentable,:source_type =&gt; 'Post'
  has_many :blog_comments, through: :comments :source =&gt; :commentable,:source_type =&gt; 'Blog'
end

class Blog &lt; ActiveRecord::Base
  has_many :comments, as: :commentable
end

class Post &lt; ActiveRecord::Base
  has_many :comments, as: :commentable
end

class Comment &lt; ActiveRecord::Base
  belongs_to :commentables, polymophic: true
end
</code></pre>
&nbsp;

コードを見てみると、確かにいつものようにhas_manyで<strong>「Userが行った投稿を取ってくる」ことや「Userが持っているブログを取得する」ということは簡単にできます。</strong>ただ、<strong>「ユーザーがコメントした投稿」</strong>や<strong>「ユーザーがコメントしたブログ」</strong>についてはどうやって取得しようか少し迷うところがあると思います。

&nbsp;

&nbsp;

特に、ここでは、中間テーブルの役割をはたすCommentがポリモーフィック関連なのでなおさらです。

railsのポリモーフィック関連では、~able_idと~able_typeというカラムで関連が定義されますが、上のコードを例にとるとhas_many :commentsだけでは、<strong>「ユーザーがコメントした投稿」と「ユーザーがコメントしたブログ」の両方ともが取得されてきてしまいます。</strong>愚直にやるのであれば、commentable_typeを条件にSQLを発行してとやればできなくはないですが、それは苦しいです。。

&nbsp;

&nbsp;

そこで、この解決策では、:sourceオプションと:source_typeオプションを使って、ポリモーフィック関連の先のテーブルを指定してあげることで「ユーザーがコメントした投稿」と「ユーザーがコメントしたブログ」を簡単に取得できるようにしています。

&nbsp;

polymophicなテーブルを経由して、has_many thourghする場合は、<strong>sourceオプションでポリモーフィック関連の名前を指定して、source_typeで中間テーブルの先のクラスを指定してシンプルにデータをとってきましょう。</strong>

&nbsp;

&nbsp;

[after_article]"
"2326","2018-09-21 22:16:49","2018-09-21 22:16:49","これやっておけば・・・とならないために。アメリカに行く前の準備まとめ","prepare-travel-to-usa","https://ver-1-0.net/wp-content/uploads/2018/09/luggage-1149289_640.jpg","travel","&nbsp;

この度一週間ほど、アメリカ旅行にいってきたのでアメリカに初めて行く方のためにアメリカ旅行のための準備をまとめておきます。

アメリカは今回二回目、海外旅行自体もすでに数回こなしているので今回は大丈夫！かと思いきや同行者の準備も含めて万全の準備というのはなかなかなか難しいです。

次回旅行する際にぬかりない旅行をするためにもここに記事として残しておきます。

&nbsp;

[after_intro]

&nbsp;
<h2>パスポート</h2>
<img class=""alignnone size-full wp-image-2327"" src=""https://ver-1-0.net/wp-content/uploads/2018/09/passport-315266_640.jpg"" alt=""パスポート"" width=""635"" height=""640"" />

&nbsp;

これは言わずもがな、<strong>国外に出るのであればパスポートは必須です。</strong>また海外で飲酒する際やカジノ、クラブなどに入場する際にID(身分証明書）の提示を求められることも多いので海外旅行時は常に携帯しておきたいもののひとつです。

申請の豊富おは住民登録をしている都道府県のパスポート申請窓口での申請になります。

詳しい方法はここでは書かないので下記外務省のリンクを参考にしていただけるとよいかと思います。
<a href=""https://www.mofa.go.jp/mofaj/toko/passport/pass_2.html"">https://www.mofa.go.jp/mofaj/toko/passport/pass_2.html</a>

申請してから取得までは長くても<strong>10日間</strong>ほどでできるようですが、<strong>各種住民票や戸籍謄本などの準備も必要なので90~60日前くらいからは動きだして、余裕を持って準備を進めていきたいですね。</strong>後述するESTA申請もあるので早めの準備を心がけたいです。

&nbsp;
<h2>航空券</h2>
<a href=""https://ver-1-0.net/wp-content/uploads/2018/09/airport-690556_640.jpg""><img class=""alignnone size-full wp-image-2328"" src=""https://ver-1-0.net/wp-content/uploads/2018/09/airport-690556_640.jpg"" alt=""航空券"" width=""640"" height=""426"" /></a>

&nbsp;

こちらも言わずもがなですが、アメリカ渡航のためのチケットです。候補としては、<strong>JAL,ANAやDelta,American、他アジア系航空会社</strong>などありますがアジア系の会社だと香港でトランジットして移動に20時間以上かかるなんてチケットもあるので価格と相談しつつも最適なチケットを予約しましょう。

JAL,ANAは日本の会社ということもあり機内食もおいしく、サービスが行き届いてますがその分高いです。American,DeltaなどはJAL,ANAなどに比べればお手頃ですが、機内食がおいしくないなどのデメリットがあります。この選択は人によって異なるのでお財布と相談して決めていきましょう。

ちなみに、アメリカに渡航する場合は、日本発の往路が9時間程度、アメリカ発の復路が10,11時間程度です。

&nbsp;
<h2>ESTA申請</h2>
<img class=""alignnone size-full wp-image-2330"" src=""https://ver-1-0.net/wp-content/uploads/2018/09/new-york-668616_640.jpg"" alt=""ESTA"" width=""640"" height=""426"" />

&nbsp;

今回の旅行では完全に忘れてました。。

<strong>ESTA申請。</strong>アメリカ渡航時にはパスポートの他に渡航のための手続きが必要です。

このESTA申請（ビザ免除プログラム)ですが、米国国土安全保障省（DHS）により2009年1月12日から義務化された制度で短期商用・観光目的（90日以下）の目的で旅行するすべてのビザ免除プログラム渡航者は、米国行きの航空機や船に搭乗する前にオンラインでESTA渡航認証を受けなければなりません。

旅行前にちゃんと地球の歩き方などを読んでいればESTA申請が必要なことがわかるのですが、意外としられていない制度なのでアメリカ渡航の前にしっかり確認しておきたいところです。

ESTAというなんかアルファベットで難しそうな雰囲気をかもしだしていますが、手続きは意外と簡単でこちらのリンクから
<a href=""https://esta.cbp.dhs.gov/esta/application.html?execution=e1s1"">https://esta.cbp.dhs.gov/esta/application.html?execution=e1s1</a>

案内にしたがって手続きを行えば<strong>数分で手続き完了できます。</strong>航空券のようにeチケットを空港に持って行くなどの手順は必要なく、オンラインで申請したあとは入国時に審査官がシステムでチェックしてくれるので申請をおこなって審査が完了していれば問題ありません。

審査は<strong>旅行出発日の72時間前までに済ませておく必要があります</strong>が、スムーズに行くと一瞬で申請から審査完了までが終わるので、当日空港にわすれていたことに気づいて申請して間に合うこともあるようです。そうは言っても、早めに審査を終えておくことにこしたことはないので、審査に時間がかからない事実を踏まえつつも余裕をもって申請しておきましょう。

&nbsp;
<h2>モバイルWiFiなど現地通信機器</h2>
<img class=""alignnone size-full wp-image-2329"" src=""https://ver-1-0.net/wp-content/uploads/2018/09/wifi-1371030_640.jpg"" alt=""wifi"" width=""640"" height=""360"" />

&nbsp;

アメリカ国内では多くの建物にWiFi設備がありますが、WiFiに時間制限があったりして完璧とはいえない感じです。また、<strong>アメリカ国内での移動ではUberが使えると便利なので室外でもネットが使えると便利</strong>です。

海外用の携帯レンタルサービスなどもありますが、僕は海外でも使い慣れた携帯を使いたいので、モバイルWifi+マイ携帯という組み合わせを採用しています。

&nbsp;
<h2>Uberのインストール・登録</h2>
<img class=""alignnone size-full wp-image-2337"" src=""https://ver-1-0.net/wp-content/uploads/2018/09/Uber_Logo.png"" alt="""" width=""639"" height=""389"" />
Uberはアメリカで広く利用されている配車サービスです。Uberのアプリに搭載された地図上で目的地を指定して、自分がいまいる現在地に車を呼んで目的地まで運んでもらうことができます。

これは最初のアメリカ渡航の時に後悔したのですが、<strong>Uberのインストールは日本国内にいるうちにやっておきたいです。</strong>

Uberのインストール・登録にはSMS（電話番号をつかったメッセージサービス）での認証があるのですが海外にいるときにSMSを受け取れないことがあるので日本国内で先に自分のアカウントを登録できるとよいでしょう。

Uberでは、先に目的地を地図（グーグルマップのような地図）で指定して料金を確認したあとに配車できるので「運転手が道にまよった」「道が渋滞していて、通常より時間が増えて料金が高くなった」などの心配をすることがなくなります。英語で目的地を伝えるのが不安なひとも地図上で目的地を指定できるので心配いりません。

さらには、<strong>料金の割り勘機能</strong>なども存在するので友達との海外旅行での支払いも楽チンです。

また、一般的に<strong>タクシーより料金が安い</strong>のもUberを使う魅力の一つです。アメリカを旅行する際にはぜひUberを使いこなして、効率的に移動できるようになりましょう。

&nbsp;
<h2>Skypeクレジットの準備</h2>
<img class=""alignnone size-full wp-image-2338"" src=""https://ver-1-0.net/wp-content/uploads/2018/09/skype-2048156_640.png"" alt=""skype"" width=""640"" height=""579"" />
海外でのデータ通信はモバイルWifiで問題なしですが、現地で現地の番号に電話かけないといけないということもままあります。

そんなときは<strong>Skypeクレジット</strong>がおすすめです。Skypeのアプリを携帯にインストールしてクレジットカードを登録しておけばアプリ上にチャージ可能です。

<strong>Skypeにクレジットカードで必要な分をチャージをしておけば、あとはそのチャージ分を使って通常の電話をかけることができます。</strong>

現地の旅行会社に電話する。カード盗難・紛失時の電話など電話を利用する機会も一定程度あるので旅行前に準備しておきましょう。（チャージなどは現地でもできるので、現地からでも問題ないです。）

&nbsp;
<h2>充電器・コンセント（アダプタの形は変わらないので心配無用）</h2>
<img class=""alignnone size-full wp-image-2335"" src=""https://ver-1-0.net/wp-content/uploads/2018/09/power-plug-2802656_640.jpg"" alt=""充電器・コンセント"" width=""640"" height=""467"" />
海外旅行の際に心配な電源の確保ですが、<strong>アメリカのコンセントは日本のコンセントと変わらない形状</strong>なので<strong>変換用のアダプタなどを改めて購入する必要はありません。</strong>

少し注意が必要なのが<strong>電圧で日本が100Vなのに対して、アメリカは120Vあるいは200Vです。</strong>最近の家電では100-240Vなど幅広い電圧に対応しているので問題になることは少ない（MacBookやiPhoneなども幅広い電圧に対応している）のですが、念のため日本から持って行く家電の対応電圧は確認しておきましょう。

&nbsp;
<h2>現地通貨（ドル）・クレジットカード</h2>
<img class=""alignnone size-full wp-image-2336"" src=""https://ver-1-0.net/wp-content/uploads/2018/09/bank-note-941246_640.jpg"" alt=""ドル"" width=""640"" height=""480"" />
現地通貨はドルですが、アメリカではほとんどの場合でクレジットカードで決済できてしまうので現金としてのドルは少額で問題ありません。滞在期間などによりますが一週間の滞在でも<strong>200ドルほど</strong>あればだいたい事足りるのではないでしょうか？

アメリカには多額の現金を持ち込む必要はありませんが、<strong>クレジットカードを持って行くのは忘れないようにしましょう。</strong>

&nbsp;
<h2>海外旅行保険</h2>
&nbsp;

海外では、盗難やスリ、交通事故などのトラブルに巻き込まれることもありますので海外旅行保険に加入しておくことをおすすめします。

海外旅行保険に個別で加入するのも良いですが、楽天カードなどですと羽田空港へ向かうまでのシャトルバスの交通費、航空券の費用などでカードを使って決済をしていた場合に保険が適用されます。クレジットカードに付帯する保険の場合、わざわざ保険に申し込まなくても保険が適用される条件さえ満たせば万が一の自体に備えることができるので、海外旅行保険の準備はクレカで行うのがおすすめです。

&nbsp;
<h2> (番外編）地球の歩き方</h2>
<a href=""https://www.amazon.co.jp/B04-%E5%9C%B0%E7%90%83%E3%81%AE%E6%AD%A9%E3%81%8D%E6%96%B9-%E3%82%B5%E3%83%B3%E3%83%95%E3%83%A9%E3%83%B3%E3%82%B7%E3%82%B9%E3%82%B3%E3%81%A8%E3%82%B7%E3%83%AA%E3%82%B3%E3%83%B3%E3%83%90%E3%83%AC%E3%83%BC-2018-2019-%E5%9C%B0%E7%90%83%E3%81%AE%E6%AD%A9%E3%81%8D%E6%96%B9%E7%B7%A8%E9%9B%86%E5%AE%A4/dp/4478821011/ref=as_li_ss_il?ie=UTF8&amp;qid=1537534267&amp;sr=8-1&amp;keywords=%E5%9C%B0%E7%90%83%E3%81%AE%E6%AD%A9%E3%81%8D%E6%96%B9+%E3%82%B5%E3%83%B3%E3%83%95%E3%83%A9%E3%83%B3%E3%82%B7%E3%82%B9%E3%82%B3&amp;linkCode=li2&amp;tag=llg01-22&amp;linkId=c3587687f35bd8fc8d81de974097e60a&amp;language=ja_JP"" target=""_blank"" rel=""noopener""><img src=""//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=4478821011&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=llg01-22&amp;language=ja_JP"" border=""0"" /></a><img style=""border: none !important; margin: 0px !important;"" src=""https://ir-jp.amazon-adsystem.com/e/ir?t=llg01-22&amp;language=ja_JP&amp;l=li2&amp;o=9&amp;a=4478821011"" alt="""" width=""1"" height=""1"" border=""0"" />
これは番外編ですが、<strong>地球の歩き方</strong>もおすすめです。空港の本屋さんなどでも購入できるので旅のおともに一冊用意しておくとよいでしょう。観光スポットなどの紹介はもちろん旅行に際しての準備や現地の文化、治安など幅広い情報を網羅しています。年ごとの情報も充実していて、ラスベガスの地球の歩き方ではカジノを観光スポットとして紹介するだけではなく、実際の遊び方・ルールなども載っていて道中の移動やホテルなどでさっとよんでおくだけでも非常にためになります。

&nbsp;
<h2>まとめ</h2>
&nbsp;

アメリカ投稿前の準備をまとめてみましたがいかがでしたでしょうか？パスポート海外旅行保険、Wifiなどはどの国に旅行する際にも必要な一般的なものですが、Uberなどはアメリカに行くのであれば日本にいる際にインストールしてから渡航したいです。

Skypeクレジットで一般電話の番号に電話をかけられるというのも意外と知られていない情報なので、これを機にチェックできると良いでしょう。

旅行に合わせて仕事の休みもうまく調整して、チケットの手配もしてと準備して迎えた旅行でパスポートを忘れてスケジュールが大幅変更やESTA申請を忘れて入国できなかったなどは避けたいですよね。

こちらに書かれている情報が参考になって楽しい旅行の実現に役立てれば嬉しいです。

では。"
"469","2017-06-24 13:21:57","2018-08-26 11:52:44","Kotlin + SpringBoot のhtml、css変更後の再起動が面倒臭い。。の対処法","problem-boot-server-in-spring","http://ver-1-0.net/wp-content/uploads/2017/01/5ntkpxqt54y-sai-kiran-anagani.jpg","engineering","&nbsp;

&nbsp;

先日休日に
Kotlin+SpringBootを
いじっていたら

ある問題でストレスが溜まったのでこんなツイートをしてみました。

&nbsp;

&nbsp;

<img class=""alignnone size-full wp-image-470"" src=""http://ver-1-0.net/wp-content/uploads/2017/06/スクリーンショット-2017-06-24-11.46.54.png"" alt=""困ったツイート"" width=""592"" height=""293"" />

&nbsp;

そしたら、
世の中良い人はやっぱりいて、
解決策を教えてくださる人が現れました。

&nbsp;
<h2>「spring-boot-devtoolsを
入れてくださいと。」</h2>
&nbsp;

教えてくださったのが、
SpringBootに関して著書のある
槇 俊明さんだったので、
（感謝の返信をしてから気づきました汗）
迷うことなく、

gradleのdependenciesに追加しました。
<pre><code class=""language-groovy"">compile(""org.springframework.boot:spring-boot-devtools"")
</code></pre>
&nbsp;

&nbsp;

しかし、
これを追加してみただけではダメ
だったようで、
さらに調べたら
以下のようなページを見つけました。
<a href=""https://dzone.com/articles/continuous-auto-restart-with-spring-boot-devtools"">https://dzone.com/articles/continuous-auto-restart-with-spring-boot-devtools</a>

&nbsp;

方法としては、
<h3>①あるウィンドウでgradle build --continuous
で継続的にビルド</h3>
<h3>②別のウィンドウでgradle bootRunして
アプリケーションを動かす。</h3>
になります。

&nbsp;

これをすると
①がファイルの変更を検知してビルド、
②で起動したアプリケーションの再起動が
自動で行われるので、
いちいちウィンドウを切り替えて手動でSpringを再起動させる手間が省けます。

&nbsp;

&nbsp;

twitterで教えを受けて、
自分で調べてやってみましたが、
これでいいんですかね。

とりあえず手動でSpringを再起動する手間が省けるので、
状況は改善されました。
ご報告まで

&nbsp;

<a href=""http://amzn.to/2t1j6fm"">はじめてのSpring Boot―「Spring Framework」で簡単Javaアプリ開発 (I・O BOOKS)</a>

<a href=""https://www.amazon.co.jp/%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6%E3%81%AESpring-Boot%E2%80%95%E3%80%8CSpring-Framework%E3%80%8D%E3%81%A7%E7%B0%A1%E5%8D%98Java%E3%82%A2%E3%83%97%E3%83%AA%E9%96%8B%E7%99%BA-I%E3%83%BB-BOOKS/dp/4777518655/ref=as_li_ss_il?ie=UTF8&amp;linkCode=li2&amp;tag=llg01-22&amp;linkId=cb2f914bd2edcfe09725b49c16ffc363"" target=""_blank"" rel=""noopener noreferrer""><img src=""//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=4777518655&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=llg01-22"" border=""0"" /></a><img style=""border: none !important; margin: 0px !important;"" src=""https://ir-jp.amazon-adsystem.com/e/ir?t=llg01-22&amp;l=li2&amp;o=9&amp;a=4777518655"" alt="""" width=""1"" height=""1"" border=""0"" />"
"1855","2018-01-17 08:46:26","2018-09-02 13:09:21","Rails+Devise+LetterOpenerでシードを行う際に、メールがタブで開かれないようにする","rails-letter-opener-seed","https://ver-1-0.net/wp-content/uploads/2018/01/germ-2871773_1280.jpg","engineering::::rails::::for-beginner","&nbsp;

letter opener便利ですよね。

<a href=""https://github.com/ryanb/letter_opener"">ryanb/letter_opener</a>

letter openerは、開発しているアプリケーションからメールが飛んだときに、メールを送信する代わりに、送信するメールをタブで開いてくれます。

が、

今回Rails + Devise + Letter Openerを使った場合に、ユーザのアカウント作成時のメールのタブがポコポコでてくるようになってしまったのでその対策を共有します。

[after_intro]
&nbsp;
<h2>やろうとしたこと</h2>
&nbsp;

今回はテストデータとして、rake db:seedでユーザを10人くらい自動で生成するようなスクリプトを組みました。

開発中にDBを綺麗にしたいときに、
<pre><code class=""language-bash"">rake:db:reset && rake db:seed</code></pre>
のようにカジュアルに実行できるようにしたいです。

&nbsp;

db/seeds.rb

<pre><code class=""language-ruby"">User.delete_all
10.times do |idx|
  User.create(
    name: ""user_#{idx + 1}"",
    password: 'password',
    email: ""user_#{idx + 1}@example.com"",
    age: 25 
  )
end
</code></pre>

(これはサンプルで実際はFactoryBotを使ったりしています)


この方法だと、確かにユーザは10人作れるのですが実際にシードを走らせてみるとユーザ作成時にdeviseが確認のEmailを飛ばすので、それに呼応したletter openerがポコポコと丁寧に10人分
のメールをポコポコとタブで開いてくれます。

さすがに、毎回シードを走らすたびに10個もタブが開くのはいただけないので少し調べてみました。


<h2>解決方法</h2>

解決方法は割と簡単で
以下のように設定を足して
<pre><code>ActionMailer::Base.perform_deliveries = false</code></pre>
シード内でメールが飛ばないようにするだけで解決できます。

db/seeds.rb

<pre><code class=""language-ruby""># LetterOpnerでメールが開かれないようにする
ActionMailer::Base.perform_deliveries = false

User.delete_all
10.times do |idx|
  User.create(
    name: ""user_#{idx + 1}"",
    password: 'password',
    email: ""user_#{idx + 1}@example.com"",
    age: 25 
  )
end
</code></pre>


[after_article]"
"1940","2018-03-01 22:03:57","2018-09-02 13:09:21","Rails5.1すでに存在するカラムをmigrationでnot nullにする","rails-migration-not-null","https://ver-1-0.net/wp-content/uploads/2018/02/rails-1.png","engineering::::rails","&nbsp;
<h2>change_column_nullを使う</h2>
&nbsp;

すでに存在するカラムをマイグレーションでnullにするには、change_column_nullを使います。

&nbsp;
<pre><code class=""language-ruby"">class ChangeLikeCountToPost &lt; ActiveRecord::Migration[5.1]
  def change
    change_column_null :posts, :like_count, null: false, 0
  end
end
</code></pre>
&nbsp;

change_column_nullはDBの定義をnull:オプションで指定した定義に変更するまえに、値がnullのものを第4引数にupdateしたのちにDB定義を変更してくれます。

&nbsp;
<pre><code class=""language-ruby"">def change_column_null(table_name, column_name, null, default = nil) #:nodoc:
  unless null || default.nil?
    execute(""UPDATE #{quote_table_name(table_name)} SET #{quote_column_name(column_name)}=#{quote(default)} WHERE #{quote_column_name(column_name)} IS NULL"")
  end

  change_column table_name, column_name, nil, null: null
end
</code></pre>
&nbsp;

change_columnでもDBの定義は変更できますが、このメソッドは問答無用でDBの定義を変更しにいくので、「値がNullのカラムにNotNull制約をつけることはできません」となって怒られます。

&nbsp;
<h2> change_column_nullはDBのデフォルト値も変更してくれるわけではない</h2>
&nbsp;

下のコードをみると、NotNull制約をつけるついでにDBのデフォルト値も設定してくれそうに見えますが、

&nbsp;
<pre><code class=""language-ruby"">change_column_null :posts, :like_count, null: false, 0</code></pre>
&nbsp;

実際は、そこまでやってくれません。第四引数の<strong>0はnullの値を置き換える値を指定するだけでデフォルト値を指定しているわけではない</strong>ことに注意しなければいけません。

そのため、NotNull制約をつけるついでにデフォルト値も設定する場合は、以下のようにする必要があります。

&nbsp;
<pre><code class=""language-ruby"">class ChangeLikeCountToPost &lt; ActiveRecord::Migration[5.1]
  def change
    change_column_null :posts, :like_count, null: false, 0
    change_column :posts, :like_count, :integer, default: 0
  end
end
</code></pre>
&nbsp;
"
"267","2017-03-13 23:21:52","2018-08-26 12:14:47","Rails migratoinコマンドまとめ","rails-migratoin","http://ver-1-0.net/wp-content/uploads/2017/01/スクリーンショット-2017-01-03-15.37.16.png","engineering::::rails","Rails では
マイグレーションコードを書いておけば
<pre><code class=""language-ruby"">rake db:migrate</code></pre>
とするだけで、
DBの変更などをとりくむことができます。

今回はマイグレーションコード
についてまとめてみました。




&nbsp;
[after_intro]
&nbsp;
<h2 class=""chapter"">Migration Codeの実行</h2>

<pre><code class=""language-ruby"">rake db:migrate</code></pre>
これを実行するだけで,
[Raisのルートディレクトリ]/db/migrate配下にある
マイグレーションコードを全て実行できます。

&nbsp;
<h2 class=""chapter"">Migration Codeの個別実行</h2>


<pre><code>rake db:migrate:up VERSION=[バーション番号]</code></pre>
migrationコードを個別に実行したい場合は、
VERSIONオプションでバージョンを指定して
実行することができます。

バージョン番号とはマイグレーションコードの頭に着く
2017XXXXXXXXXXのような番号です。

ちなみにDBの変更を戻したい場合は
<pre><code class=""language-ruby"">rake db:migrate:down VERSION=[バーション番号]</code></pre>
&nbsp;
&nbsp;
<h2 class=""chapter"">Migration Codeの状態確認</h2>


<pre><code>rake db:migrate:status</code></pre>
このコマンドでどのマイグレーションコードが
実行されているかを確認することができます。

これまで実行したかどうかはup/downで表されます。

まだ、実行していないmigration codeを表示する場合は、
<pre><code class=""language-ruby"">rake db:migrate:abort_if_pending_migrations</code></pre>
です。


以上です!!
"
"1324","2017-11-19 16:45:50","2018-08-26 01:11:58","DockerでRails + Nginx + Postgresの環境を構築する。その①","rails-nginx-postgres-on-docker-1","https://ver-1-0.net/wp-content/uploads/2017/11/whale-2193356_640-1.jpg","engineering::::rails","&nbsp;

&nbsp;

タイトルのように、
何回かに分けてRails + Nginx + Postgresの環境を
Dockerで構築していきます。

<ol>
 	<li>DockerでRails + Nginx + Postgresの環境を構築する。その①</li>
 	<li><a href=""https://ver-1-0.net/2017/11/23/rails-nginx-postgres-on-docker-2/"">DockerでRails + Nginx + Postgresの環境を構築する。その②</a></li>
 	<li><a href=""https://ver-1-0.net/2017/11/29/docker-rails-nginx-postgres/"">DockerでRails + Nginx + Postgresの環境を構築する。その③</a></li>
</ol>
構築を行う前に簡単にDockerの説明から。

※書いていたらそれなりの長さになったので、
Dockerをインストールして、
ちょっと触ってみるところまでで一旦切りました。

Dockerは、
PC上にコンテナという仮想のサーバを作成して、
その上にRailsやPostgres,Nginxなどの環境を構築するものです。

[after_intro]
<h2 class=""chapter"">Dockerの基本的な仕組み -Virtual Machineとの違い-</h2>
下に図を貼りつけましたが、

<a href=""https://ver-1-0.net/2017/11/19/rails-nginx-postgres-on-docker-1/comparevmtodoc-2/"" rel=""attachment wp-att-1326""><img class=""alignnone wp-image-1472 size-full"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/CompareVMtoDoc-1.jpg"" alt=""dockerとvagrantの比較"" width=""800"" height=""600"" /></a>

<strong>「DockerはVirtual Boxなどの仮想マシンとどう違うの？」</strong>
というように比較して語られることが多いです。

図では、

左側がDocker
右側がVirtual BoxなどのVirtualMachineの
場合の構成になっています。

VMは図を見てわかるように
<strong>Hypervisor（ハイパバイザー）という仮想化技術</strong>を挟んで、
サーバを仮想的に構築します。
このHypervisor（ハイパバイザー）を使用する場合、
メモリなどのリソースをVMごとに割り当て、
ゲストOS上でアプリケーションを稼働させることになるため、
<strong>ゲストOSの分容量であったり、メモリなどのリソースを</strong>
<strong> 大きく取られてしまうことになります。</strong>

対して、
<strong>Docker</strong>のようなコンテナ型のものは、
リソースやカーネルをホストOSと共有するので、
VM型のように余分なリソースを食われることが
少なく、イメージサイズも小さい軽量なものとなります。
（ Windows,Macなどの場合は、ホストOS上にハイパバイザー型の仮想マシンを立ち上げそのゲストOS上にDockerEngineを動かす形になるので、
Linux版にDockerをインストールをするのが、これらのメリットを
多く受けられるようです。）

&nbsp;

このような軽量であることのメリット以外にも、
開発環境で作成したアプリケーションをイメージ化して本番にデプロイができるので、
本番環境と開発環境の差異を極限まで小さくできるという
メリットもあります。

本番環境にDockerさえ入っていれば、
本番環境にDockerのイメージを配置してそのまま、
動かすことができてしまいます。
コードでデプロイするのではなく、
コンテナごと配布する形になるそうです。

&nbsp;

Dockerの仕組みやメリットについての説明は
これくらいにして、
次は実際の構築をやっていきます。

&nbsp;

[mid_article]

&nbsp;
<h2 class=""chapter"">Dockerのインストール</h2>
&nbsp;

今回は、
MacでのDockerのインストールの仕方だけ説明します。

インストールはこちらからできます。
<a href=""https://store.docker.com/editions/community/docker-ce-desktop-mac"">https://store.docker.com/editions/community/docker-ce-desktop-mac</a>

インストールの方法は簡単で、
リンク先からDocker.dmgをダウンロードして起動するだけです。

特段コマンドを打ったりする必要はありません。

&nbsp;

&nbsp;
<h2 class=""chapter"">Dockerを触ってみる。基本コマンドの説明</h2>
&nbsp;

まずは簡単に触ってみてDockerのイメージを
掴んでいきます。
コンソールから以下コマンドを叩いてみましょう。
<pre><code class=""language-bash"">docker pull hello-world</code></pre>
&nbsp;

実行結果は以下のようになります。
<pre><code class=""language-bash"">$docker run hello-world
Unable to find image 'hello-world:latest' locally
latest: Pulling from library/hello-world
9a0669468bf7: Already exists
Digest: sha256:cf2f6d004a59f7c18ec89df311cf0f6a1c714ec924eebcbfdd759a669b90e711
Status: Downloaded newer image for hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the ""hello-world"" image from the Docker Hub.
 3. The Docker daemon created a new container from that image which runs the

    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://cloud.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/engine/userguide/
</code></pre>
&nbsp;

<strong>docker run</strong> は、<strong>コンテナの起動</strong>を行なうコマンドです。

実行結果を補足するために
以下に図を用意しました。

<a href=""https://ver-1-0.net/2017/11/19/rails-nginx-postgres-on-docker-1/docker-2/"" rel=""attachment wp-att-1327""><img class=""alignnone wp-image-1474 size-full"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/Docker-1.png"" alt=""Dockerの概要"" width=""751"" height=""649"" /></a>

Dockerはクライアントーサーバ型のアーキテクチャになっており、
インストールした直後から起動している
<strong>Docker Daemon</strong>という
常駐型のプロセスがコマンドを待ち受けています。

そこに、
先ほどのようにrunコマンドを実行すると、
ClientからDockerデーモンにhello-worldというコンテナを
起動するように命令が飛びます。

デーモンは、命令の通りローカルに保存されているイメージ（コンテナを作成するための雛形のようなもの）を調べて、
命令どおりのhello-worldというイメージがすでに存在するか
確認します。

今回の場合。
実行結果にも""Unable to find image 'hello-world:latest' locally""と出力されているように
ローカルでイメージが見つからないので、
Registryからイメージを取得してコンテナを作成しています。

図でいうところの<strong>青色の矢印</strong>がこの流れ
になります。

&nbsp;

ローカルにどのイメージが存在するか下記コマンドで
確認できます。
<pre><code class=""language-bash"">docker images</code></pre>
先ほどのrunコマンドを実行した後であれば、
hello-worldイメージが取得されていることを確認できる
と思います。

この状態でrunコマンドを実行すると
図の<strong>赤い矢印</strong>がさすようにすでに存在するイメージを
再利用してコンテナを作成します。

お次は、
railsのコンテナを作成していくので、
まずはrubyのイメージを取得しましょう。
<pre><code class=""language-bash"">docker pull ruby:2.4.2</code></pre>
取得できたら、
コンテナの中をみて見ましょう。
<pre><code class=""language-bash"">$docker run -it ruby:2.4.2 bin/bash
root@e77b7d2cc4a0:/#
root@e77b7d2cc4a0:/#
root@e77b7d2cc4a0:/# ruby -v
ruby 2.4.2p198 (2017-09-14 revision 59899) [x86_64-linux]
root@e77b7d2cc4a0:/#</code></pre>
&nbsp;

&nbsp;

<strong>runコマンドに -i と -t オプションを与えてあげて、</strong>
<strong> シェルを起動させる</strong>と、
コンテナの中をみることができます。
railsサーバの構築とは直接関係ないですが、
何か詰まった時に確認できる方法なので、
知っておくと良いと思います。

また、
bashを起動した状態で別ウィンドウから
<pre><code class=""language-bash"">docker ps</code></pre>
と叩くと起動しているコンテナが確認できます。

dockerを扱うにあたり、
images, run , pull , ps あたりは基本のコマンドなので
覚えておくと良いと思います。

ここまでは、
コンテナを取得・起動して基本のコマンドについて
画像付きで説明しましたが、
このあとは実際にrailsサーバを立てていきます。

と思ったのですが、
長くなったのでこの記事は一旦ここまでと
します。

また別の機会に
続きを書いていきます。

[after_article]"
"1401","2017-11-23 14:34:17","2018-08-26 01:09:02","DockerでRails + Nginx + Postgresの環境を構築する。その②","rails-nginx-postgres-on-docker-2","https://ver-1-0.net/wp-content/uploads/2017/11/whale-2193356_640-1.jpg","engineering::::rails","<h2 class=""chapter"">Dockerでrails5.1.4環境を構築する</h2>
&nbsp;

前回の記事ではDockerをMacにインストールして、
少しDockerコンテナを起動させたり、
コンテナに繋いでDockerの操作に慣れました。

<ol>
 	<li><a href=""https://ver-1-0.net/2017/11/19/rails-nginx-postgres-on-docker-1/"">DockerでRails + Nginx + Postgresの環境を構築する。その①</a></li>
 	<li>DockerでRails + Nginx + Postgresの環境を構築する。その②</li>
 	<li><a href=""https://ver-1-0.net/2017/11/29/docker-rails-nginx-postgres/"">DockerでRails + Nginx + Postgresの環境を構築する。その③</a></li>
</ol>

今回はそのDockerでrails環境を構築して行きます。

&nbsp;

&nbsp;
<h2 class=""chapter"">環境構築の流れ</h2>
&nbsp;

環境構築の流れは以下になります。
<ol>
 	<li>ruby2.4.2のイメージを取得</li>
 	<li>rubyのコンテナでbundle init</li>
 	<li>Dockerfileを元にrailsをインストール</li>
 	<li>コンテナを起動した際に、Railsが立ち上がるように設定</li>
</ol>
手順はこちらの記事を参考にしました。
<a href=""https://qiita.com/togana/items/30b22fc39fe6f7a188ec"">RailsアプリをDockerで開発するための手順</a>

&nbsp;

&nbsp;

[after_intro]

&nbsp;

&nbsp;
<h2 class=""chapter"">早速構築</h2>
&nbsp;
<h3 class=""section"">ruby2.4.2のイメージを取得</h3>
&nbsp;

まずはruby2.4.2がインストールされた、
イメージを取得してきます。
<pre><code class=""language-bash"">docker pull ruby:2.4.2</code></pre>
※前回の記事ですでにruby:2.4.2の取得が済んでいる人は、
ここはスキップしても大丈夫です。

&nbsp;

&nbsp;
<h3 class=""section"">rubyのコンテナでbundle init</h3>
&nbsp;

取得したコンテナ内でbundle initして、
Gemfileを作成します。
<pre><code class=""language-bash"">docker run --rm -v ""$PWD"":/usr/src/sample -w /usr/src/sample ruby:2.4.2 bundle init</code></pre>
&nbsp;

できたGemfileを編集して、
railsの行を追加してあげます。
<pre><code class=""language-bash"">$cat Gemfile 
# frozen_string_literal: true

source ""https://rubygems.org""

git_source(:github) {|repo_name| ""https://github.com/#{repo_name}"" }

 gem ""rails"", '5.1.4'
</code></pre>
&nbsp;

&nbsp;
<h3 class=""section"">Dockerfileを基にrailsアプリ用イメージの作成</h3>
&nbsp;

次にDockerfileを用いてrailsアプリ用のイメージをビルドして行きます。
今回は下記のようなDockerfileを作成します。
<pre><code class=""language-docker"">FROM ruby:2.4.2

ENV APP_ROOT /usr/src/sample

WORKDIR $APP_ROOT

RUN apt-get update &amp;&amp; \
    apt-get install -y nodejs \
                       sqlite3 \
                       --no-install-recommends &amp;&amp; \
    rm -rf /var/lib/apt/lists/*

COPY Gemfile $APP_ROOT
COPY Gemfile.lock $APP_ROOT

RUN \
  echo 'gem: --no-document' &gt;&gt; ~/.gemrc &amp;&amp; \
  cp ~/.gemrc /etc/gemrc &amp;&amp; \
  chmod uog+r /etc/gemrc &amp;&amp; \
  bundle config --global build.nokogiri --use-system-libraries &amp;&amp; \
  bundle config --global jobs 4 &amp;&amp; \
  bundle install &amp;&amp; \
  rm -rf ~/.gem
</code></pre>
&nbsp;

Dokcerfileとははapacheの設定ファイルのような形式で記述されたファイルになります。
ここに、
自由にイメージのビルドに必要なタスクを記述していくことで、
基のイメージから新しいイメージを作成することができます。

&nbsp;

今回はrailsに必要なモジュールがインストールされた
イメージを作成するためのDockerfileになっています。

&nbsp;

&nbsp;

Gemfile.lockがないので作成。
<pre><code class=""language-bash""> :&gt; Gemfile.lock</code></pre>
&nbsp;

ビルドのコマンドは次のように、
ビルドの基になるイメージと基底ディレクトリを指定します。
<pre><code class=""language-bash"">$ docker build -t version1/sample .</code></pre>
&nbsp;

&nbsp;

docker images(イメージの一覧取得)を叩くと確かに新しいイメージが作成されています。
<pre><code class=""language-bash"">$docker images | grep version1
version1/sample         latest              f31106e13371        40 seconds ago      762MB
</code></pre>
&nbsp;

&nbsp;

先ほどの手順までで、
railsに必要なモジュールがインストールできたので、
作成されたイメージでrails newして行きます。
<pre><code class=""language-bash"">$docker run --rm -it -v ""$PWD"":/usr/src/sample version1/sample rails new .</code></pre>
&nbsp;

&nbsp;

このコマンドは、
カレントディレクトリをversion1/sampleイメージの/usr/src/sampleに
マウントしてrails newしています。

これで、rails new できました。
ローカルでファイルをみてみるとrailsのファイル群がインストールされています。

&nbsp;
<pre><code class=""language-bash"">$ls -ltr
total 64
-rw-r--r--   1 admin  staff   546 Nov 23 13:01 Dockerfile
-rw-r--r--   1 admin  staff   130 Nov 23 13:06 config.ru
-rw-r--r--   1 admin  staff   227 Nov 23 13:06 Rakefile
-rw-r--r--   1 admin  staff   374 Nov 23 13:06 README.md
drwxr-xr-x   3 admin  staff   102 Nov 23 13:06 vendor
drwxr-xr-x   4 admin  staff   136 Nov 23 13:06 tmp
drwxr-xr-x  11 admin  staff   374 Nov 23 13:06 test
drwxr-xr-x   9 admin  staff   306 Nov 23 13:06 public
-rw-r--r--   1 admin  staff    64 Nov 23 13:06 package.json
drwxr-xr-x   3 admin  staff   102 Nov 23 13:06 log
drwxr-xr-x   4 admin  staff   136 Nov 23 13:06 lib
drwxr-xr-x   3 admin  staff   102 Nov 23 13:06 db
drwxr-xr-x  14 admin  staff   476 Nov 23 13:06 config
drwxr-xr-x  10 admin  staff   340 Nov 23 13:06 app
-rw-r--r--   1 admin  staff  1974 Nov 23 13:06 Gemfile
drwxr-xr-x   9 admin  staff   306 Nov 23 13:06 bin
-rw-r--r--   1 admin  staff  4772 Nov 23 13:06 Gemfile.lock
</code></pre>
&nbsp;

&nbsp;

[mid_article]

&nbsp;

&nbsp;
<h3 class=""section"">コンテナを起動した際に、Railsが立ち上がるように設定</h3>
&nbsp;

ここまででrailsが動く環境は作れましたが、
コンテナ起動と同時にRailsも立ち上がるようにしたいので、
Dockerfileに下記記述を追記します。
<pre><code class=""language-docker"">COPY . $APP_ROOT

EXPOSE  3000
CMD [""rails"", ""server"", ""-b"", ""0.0.0.0""]
</code></pre>
&nbsp;

&nbsp;

記述を追記したら再度ビルドします。
追記した部分では、
ローカルのソースをコンテナ内の $APP_ROOTにコピーして、
3000番ポートを開けて、railsを起動しています。
<pre><code class=""language-bash"">docker build -t version1/sample .</code></pre>
&nbsp;

&nbsp;

これで構築は
完了なので、コンテナを起動させてみましょう。
<pre><code class=""language-bash"">docker run -d -p 3000:3000 -v ""${PWD}:/usr/src/sample"" version1/sample</code></pre>
※起動させる場合は、
-vコマンドでローカルのディレクトリをマウントして置くのがみそです。
これしないとローカルのソースとコンテナ内のソースが同期できないので

&nbsp;

&nbsp;

無事起動しました。
<pre><code class=""language-bash"">$docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
c7a0a8cfabe5        version1/sample     ""rails server -b 0...""   8 seconds ago       Up 7 seconds        0.0.0.0:3000-&gt;3000/tcp   admiring_hugle
</code></pre>
&nbsp;

&nbsp;

ブラウザから繋いでもみれます。

&nbsp;

<a href=""https://ver-1-0.net/2017/11/23/rails-nginx-postgres-on-docker-2/screen-shot-2017-11-23-at-13-24-29/"" rel=""attachment wp-att-1403""><img class=""alignnone size-full wp-image-1403"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/Screen-Shot-2017-11-23-at-13.24.29.png"" alt=""rails起動画面"" width=""980"" height=""798"" /></a>

&nbsp;
<h2 class=""chapter"">少し開発してみる</h2>
&nbsp;

せっかくコンテナが
できたのでUserのCRUDくらいまで
作りましょう。

scaffoldする場合は、
<pre><code class=""language-bash"">docker exec -it c7a0a8cfabe5 bash</code></pre>
&nbsp;

としてコンテナに接続してコマンドを叩いてもいいですが、
面倒なので、
<pre><code class=""language-bash"">docker exec c7a0a8cfabe5 rails scaffold User name email age</code></pre>
とすればワンコマンドでscaffoldできます。

&nbsp;

&nbsp;

マイグレーションも
<pre><code class=""language-bash"">docker exec c7a0a8cfabe5 rake db:migrate</code></pre>
でいけます。

&nbsp;

config/routes.rbも少し変更して、
ユーザ管理画面がトップに来るようにします。
<pre><code class=""language-ruby"">Rails.application.routes.draw do
  resources :users
  root 'users#index'
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
end
</code></pre>
&nbsp;

&nbsp;

config/配下を修正したので、
コンテナを再起動させます。
<pre><code class=""language-bash"">docker restart c7a0a8cfabe5</code></pre>
&nbsp;

&nbsp;

これで、
http://localhostに接続すれば。

ユーザ管理画面が表示されます。

<a href=""https://ver-1-0.net/2017/11/23/rails-nginx-postgres-on-docker-2/screen-shot-2017-11-23-at-14-07-19/"" rel=""attachment wp-att-1406""><img class=""border alignnone size-full wp-image-1406"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/Screen-Shot-2017-11-23-at-14.07.19.png"" alt=""ユーザ管理画面"" width=""981"" height=""801"" /></a>

構築は以上です。

&nbsp;

&nbsp;
<h2 class=""chapter"">まとめ</h2>
&nbsp;

&nbsp;

ここまで、railsの環境構築をしましたが、
Dockerには一プロセス一コンテナという原則みたいなものがあるので、
アプリとDBではコンテナを分ける必要があります。
（今回はsqliteを使ったので、DBと一緒のコンテナにしてます。）

&nbsp;

コンテナ管理ツールとして
docker-composeというものがあるので、
次はそれを使いながら、
rails + nginx + postgres環境を構築したいと思います。

&nbsp;

[after_article]"
"149","2017-02-04 22:54:26","2018-08-26 12:38:27","一段上のエンジニアに。Rails でテストコードを書く ( RSpec )","rails-rspec","http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-04-22.15.06.png","engineering::::rails::::for-beginner","
&nbsp;

昨今TDDなどもあり、
テストコードについての話題がありますが、

&nbsp;

個人的にテストコードが書ける人
= 初級者を脱した中級者 のようなイメージを持っています。

&nbsp;

打たれる前に打てというような
考えもあるかと思いますが、
打たれても大丈夫なように体を作ることも大事です。

ちょっと何を言いたいのかわかりませんが
野球もサッカーも守りが強いという土台の上でこそ
攻撃力や創造性が発揮されるということです。

ということで脱線しましたが、
簡単な導入から行きましょう。

&nbsp;

まずはアプリはこんな感じです。

<a href=""http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-04-22.09.55.png""><img class=""alignnone size-large wp-image-172"" src=""http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-04-22.09.55-1024x272.png"" alt=""足し算アプリ"" width=""700"" height=""186"" /></a>

はい、簡単な足し算をするアプリです。
viewのコードは以下です。
<a href=""http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-04-22.48.02.png""><img class=""alignnone size-large wp-image-177"" src=""http://ver-1-0.net/wp-content/uploads/2017/02/スクリーンショット-2017-02-04-22.48.02-1024x586.png"" alt=""view code"" width=""700"" height=""401"" /></a>

&nbsp;

&nbsp;

<a href=""http://getbootstrap.com/"">bootstarap</a>
で多少装飾していますが、
今回はここで呼んでいる addというメソッドのテストを書いてみます。

まずはインストールから
方法はここにあります。
<a href=""https://github.com/rspec/rspec-rails"">https://github.com/rspec/rspec-rails</a>

ということで
<pre><code class=""language-ruby"">gem 'rspec-rails', '~&gt; 3.5'</code></pre>を追記してから
bundle installします。

インストールできたら初期化
<pre><code class=""language-bash"">rails generate rspec:install</code></pre>
テストの実行方法は以下です。
<pre><code class=""language-bash""># モジュール単位
bundle exec rspec spec/[ models / helpers / controller / .. ]

# ファイル単位
bundle exec rspec spec/helpers/homes_helper_rspec.rb
</code></pre class=""ruby"">
テストコードは以下の通り
<pre><code class=""language-ruby"">require 'rails_helper'
include(HomesHelper)

RSpec.describe HomesHelper, type: :helper do
  # pending ""add some examples to (or delete) #{__FILE__}""

  describe ""GET /homes"" do
    it ""about add method"" do
      # normal case
      sum = HomesHelper.add( 1, 2)
      expect(sum).to eq(3)

      # either nil
      sum = HomesHelper.add( nil, 2)
      expect(sum).to eq(0)

      # either nil
      sum = HomesHelper.add( 1, nil)
      expect(sum).to eq(0)

      # both nil
      sum = HomesHelper.add( nil, nil)
      expect(sum).to eq(0)
    end
  end
end
</code></pre>
&nbsp;

&nbsp;

it から end までがテストの一単位ですね。
実行してみます。
<pre><code class=""language-bash"">$ rspec spec/helpers
Please report a bug if this causes problems.
.

Finished in 0.02032 seconds (files took 4.38 seconds to load)
1 example, 0 failures
</code></pre>

はい成功です。
今回は一発目で成功しましたが、
失敗すると
<pre><code class=""language-bash"">$ rspec spec/helpers
WARN: Unresolved specs during Gem::Specification.reset:
      diff-lcs (< 2.0, >= 1.2.0)
WARN: Clearing out unresolved specs.
Please report a bug if this causes problems.
.

Finished in 0.02032 seconds (files took 4.38 seconds to load)
1 example, 0 failures
</code></pre>

こういう感じになります。
今回はシンプルなパターンだったので、
もう少し複雑なパターンを試してみたいです。

試したらまたこのブログで紹介します。

rspecは他にもcontrollerやmodel,routingもテストできます。
はい!今回はここまで。
"
"2113","2018-08-21 09:16:12","2018-09-02 13:09:21","[Android]React Nativationでキーボードと一緒にタブバーも上がってしまう問題の対策","react-navigation-keyboard-move-tabbar-up","https://ver-1-0.net/wp-content/uploads/2018/01/react.png","engineering::::react","&nbsp;

ReactNativeで開発をする際ルーティングの為にReactNavigationを使っている方が多いかと思うのですが、

そのReactNavigationのタブバーを何も気にせず使っているとキーボードが出てきたときに（Android限定）タブバーも一緒に押し上げて残念な感じになってしまうというのがあったので、その解決方法を記しておきます。

[after_intro]

&nbsp;
<h2>KeyBoardのイベントを検知して、TabBarを非表示にする。</h2>
&nbsp;

解決策としては、KeyBoardが表示されると同時にタブバーを非表示にしてやるだけです。

ただ、TabBarを直接非表示にしたりするAPIは提供されていないので、自前でTabBarをラップした形のコンポーネントを実装してその中で表示・非表示を切り替えます。

以下がWrapperComponentです。
<pre><code class=""language-jsx"">import React from 'react'
import { Keyboard } from 'react-native'
import { TabBarBottom } from 'react-navigation'

class TabBarComponent extends React.PureComponent {

  constructor(props) {
    super(props)
    
     this.state = {
      isVisible: true
    }
    this.keyboardWillShow = this.keyboardWillShow.bind(this)
    this.keyboardWillHide = this.keyboardWillHide.bind(this)
  }

  componentWillMount() {
    this.keyboardEventLisetners = [ 
    Keyboard.addListener('keyboardDidShow', this.keyboardWillShow)
 Keyboard.addListener('keyboardDidHide', this.keyboardWillHide)
 ]
  }

  componentWillUnmount() {
    this.keyboardEventLisetners.forEach( listener =&gt; listener.remove())
  }

  keyboardWillShow = () =&gt; {
    this.setState({
      isVisible: false
    })
  }

  keyboardWillHide = () =&gt; {
    this.setState({
      isVisible: true
    })
  }

  render() {
    if( !this.state.isVisible ) {
      return 
    }
    return 
  }
}

export default TabBarComponent
</code></pre>
&nbsp;

これができたら、TabNavigatorの第二引数で自前のラッパーコンポーネントを指定して完了です。
<pre><code class=""language-jsx"">import TabBarComponent from './TabBarComponent.js'

export default TabNavigator({
...
}, {
    initialRouteName: '...',
    tabBarComponent: TabBarComponent,
  })
</code></pre>
iosではキーボードがタブバーを押し上げるという感じにはならないので、イベントの登録をAndroid限定にしてあげるとより硬い実装にはなるかと思いますが、そちらはお好みでという感じです。

&nbsp;
<h2>まとめ</h2>
&nbsp;

React Nativeはまだまだ発展途上で想定外の動きをしたりOSごとの動作の違いがあったりしてなかなかつらみがありますが、プロジェクトとして動的でなかなか面白いですね。

この記事の問題をネットで調べてみるとAndroidのmanifest.xmlを書き換えれば動くよみたいななのがあったのですが、タブバーのためにアプリ全体の設定を書き換えるのはいかがなものかということでこちらの対策をアップしました。

では。"
"2063","2018-06-29 08:00:12","2018-09-02 13:09:21","Reactでスネークゲームを作ってみた-解説編 環境構築-","react-snake-game-2","https://ver-1-0.net/wp-content/uploads/2018/06/snake-game.jpg","engineering::::react","&nbsp;
<h2>目次</h2>
&nbsp;

<a href=""https://ver-1-0.net/2018/06/27/react-snake-game/"">Reactでスネークゲーム作ってみた。</a>

Reactでスネークゲームを作ってみた-解説編
<ol>
 	<li>環境構築</li>
 	<li>フィールドを作る</li>
 	<li>ヘビを動かす</li>
 	<li>曲がれるようにする</li>
 	<li>壁にぶつかった時の処理</li>
 	<li>えさを表示する</li>
 	<li>えさを食べる処理</li>
 	<li>ステータスを管理する</li>
 	<li>ゲームオーバーの処理を書く</li>
 	<li>スピードを変えられるようにする。</li>
 	<li>最後に</li>
</ol>
&nbsp;
<h2>インストール</h2>
&nbsp;

ひとまず Reactの環境をつくっていきます。

reactの環境構築は手間を省いて、create react appで1コマンドで仕上げます。
(cliをグローバルにインストールする必要があるので2コマンドかも)
<h5>コマンドのインストール</h5>
<pre><code>npm install -g create-react-app</code></pre>


<h5>アプリの雛形作成</h5>
<pre><code class=""language-bash"">create-react-app snake-game</code></pre>

オブジェクトの操作などで便利なのでついでに、lodashも入れておきます。

<pre><code>yarn add lodash</code></pre>

これで環境構築は終了です。
<h2>ディレクトリ構成</h2>
最終的なディレクトリ構成は以下のようになります。

ディレクトリ構成

|--public
|  |--assets
|--src
|  |--components
|  |--styles

cssはsassで書いています。最近ピュアcssに耐えられない体になってきているのでさらっと入れちゃっています。

※cssの解説はあまり詳しく説明しないので、面倒な方はmasterのcssをダウンロードしてつかったり、コピペすると良いと思います。sassをそのまま使いたい方はnode-sassを入れましょう。

<pre><code class=""language-bash"">yarn add node-sass</code></pre>

&nbsp;
<h2>github pagesについて</h2>
&nbsp;

今回<a href=""https://version-1.github.io/react-snake-game/"">デモ</a>を公開していますが、github pagesというパッケージを入れるとgithub上での公開がかなり簡単になります。ちょっとしたReactアプリのデモをWebで動かしたいとかだとかなり便利です。

&nbsp;
<h2>まとめ</h2>
&nbsp;

今回は環境構築だけなのであまり面白くありませんがら次回から実際にコードの解説をしていきます。"
"2058","2018-06-27 09:08:48","2018-09-02 13:09:21","Reactでスネークゲーム作ってみた。","react-snake-game-3","https://ver-1-0.net/wp-content/uploads/2018/06/snake-game.jpg","engineering::::react","&nbsp;

ある日youtubeで面白い動画を探してたら、こんな動画に出会いました。

https://m.youtube.com/watch?v=AaGK-fj-BAM

動画自体はp5.jsというフレームワークを使って15分以内でスネークゲームを作ってみるというものです。

本当に15分で作れるの？？とか思って見ていると案の定ラスト５分とかで、スネークが逆走した時にちっちゃくなっちゃったりして、バグ見つけてわちゃわちゃしています。

その様が締め切り前にバグとか、考慮漏れが見つかってドタバタする僕含めて多くのエンジニアの境遇に似てるなぁと思いながら楽しく見ていました。

&nbsp;
<h2>スネークゲーム作りました</h2>
&nbsp;

とまあ、話を元に戻しますが、自分でスネークゲームを作ってみるのも面白いかもしれないと思い実際にスネークゲームを作ってみました。

[video width=""300"" height=""407"" mp4=""https://ver-1-0.net/wp-content/uploads/2018/06/Snake.mp4""][/video]

実装に要したのは20時間くらいですかね？あるいはもうちょっとかかったかもしれませんが、ゲームとして動くには10時間くらいで、スマホでも使えるようにレスポンシブにしたり、デバッグしたりでプラス10時間くらいで作りました。

自分で遊んでみても結構面白いので、我ながら良くできたなぁなんて思ってます。
(まぁ、元のゲームのアイデアが面白いからかとは思います、、、)

&nbsp;
<h2>スネークゲームのルール</h2>
&nbsp;

スネークゲームを知らない人もいるかと思うので、ざっくりルールを説明すると

登場人物
<ul>
 	<li>へび(スネーク)</li>
 	<li>えさ(フード)</li>
</ul>
ルール
<ul>
 	<li>へびはえさを食べると成長して長くなる。</li>
 	<li>長くなった自分に衝突したらゲームオーバー</li>
 	<li>ゲームオーバーにならず、どこまで長さを伸ばせるか。</li>
</ul>
ルールはシンプルでいかに自分にぶつからずに、自分を成長させていけるかというゲームです。簡単ですね。

&nbsp;
<h2>ざっくり作り方を説明</h2>
&nbsp;

詳細な解説は、気が向いたらやろうと思うのですが、大まかに作りを説明すると
<ul>
 	<li>フィールドは固定幅と高さのdiv要素を並べて表現。</li>
 	<li>へび、えさ、フィールド(一つのdiv)にhtmlのclassを割り当て</li>
 	<li>Reactで一定の間隔ごとにレンダリングを行いへびが動いているように見せる。</li>
 	<li>へびの移動は、divの隣の要素をへびの色に変化させた後にへびの長さの分だけへびのdiv要素を残し他を元のフィールドclassに戻して表現する。</li>
</ul>
という感じですかね。この説明でわかる人と分からない人がいるとは思うのですが、今回はこれくらいの粗さの説明にしておきます。

ソースコードは、ここに置いてありますので気になる方はコード見てもらったり、スターを押して頂けると嬉しいです。

<a href=""https://github.com/version-1/react-snake-game"">https://github.com/version-1/react-snake-game</a>

&nbsp;
<h2>まとめ | 新しい技術を勉強するには暇つぶしにでも何か作ってみると身につく</h2>
&nbsp;

以前に読んだ<a href=""https://amzn.to/2KcbIYs"">SOFT SKILLS　ソフトウェア開発者の人生マニュアル</a>という本では、基礎を一通り学んだらその技術を使って一通り遊んでみるという時間を作ると新しい技術を習得する効率がよくなるというようなことが書いてありました。

それに習ってというか、単純に理解することとできることというのは違うものなので新しく学んでみたことは実践するのが一番記憶にものこるし、そのあと役に立ちやすいです。実際にやってみて<strong>「あれ、こういう場合どうするんだ？」</strong>とあらたな疑問が湧く場合もあるので、実践の過程でさらに理解が深まります。

Reactもチュートリアルがあってそれをやるだけでも基礎の理解はできますが、全く指示がないままなにか作れと言われるとなかなかできないですよね。ただ、レールが敷かれていないなかで自分で試行錯誤しながらプログラムを書いていくというのが一番力がつくのでぜひともチャレンジしたいところです。（力が足りなすぎて、迷子になる場合もありますが、、そういう時は期間をおいて再チャレンジしてみたり最初のハードルを下げてみたりしてみると良いです。）

今回は本当に作りましたという報告だけで、コード0ですが、暇つぶしに作ったゲームが割と面白かったので自慢してみました。

今はちょっと解説書こうかなという気になってますが、どうなるかはわかりません。

では。"
"1757","2017-12-25 20:51:02","2018-10-11 23:59:17","活動報告始めます。","report","https://ver-1-0.net/wp-content/uploads/2017/12/active_report.jpg","freelance","ブログ100記事を達成してから達成感で更新が滞りガチなのですが、
これからは活動報告として、1週間単位で振り返りを載せていくことにしました。

&nbsp;
<h2>振り返りを行う目的</h2>
&nbsp;

振り返りを行うにあたって振り返りの目的を考えてみました。
ざっとこんなところです。

・自分の活動状況を公開してフリーランスの生活を可視化する。
（普通に生活しています。生きています。というのをお伝えする。）
・良いことがあったらドヤする。
・一年スパン、三ヶ月スパンでの目標の確認及び達成度合いの確認

&nbsp;
<h2>[報告] フリーランスになりました。</h2>
&nbsp;
<h3>フリーランスになりました</h3>
&nbsp;

10月末で前の会社を退職後、11月の1日から個人事業主として働くこととなりました。

個人で働くというのは自身の学生の頃からの目標でしたので、無事目標を達成することができました。実際のとこ個人事業主として働き始めるのは覚悟さえあれば誰でもできるので、これからちゃんと稼いでサバイブできるかというのが大事だと考えています。

現在は週4日であるwebサービスを開発している会社で働かせて頂き、他の時間でこうしてブログを書いたりサイトを作ったりしています。

&nbsp;
<h3>サイトのテーマを変更しました</h3>
&nbsp;

本当はあまり予定にはなかったのですが、新しい他のサイトを作る過程でwordpressのテーマを調べてたらデザインも綺麗でAMPへの対応もしているluxeritusというテーマを見つけて、

「これめっちゃいいじゃん」

ってなったのでこちらのサイトにも適用しました。
luxeritusは日本語のurlをデフォルトで許容しないらしく割とサイトでも読まれている記事のurlが/2017/12/20/post-356とかいうURLに変更されていて焦りました。。

こちらは設定で変更できそうなのですが、日本語URL自体エンコードされた時にURLが読めなくなってながーくなるあまりイケてない感じなので、これを機にURLを半角英数字のものに変更しました。今のところ特にサイトアクセスには影響なさそうです。

&nbsp;
<h2>[進捗] 今週やったこと</h2>
・サイトテーマの変更
・新しいサイトの全体的なデザイン決め
・↑これの記事執筆2本

&nbsp;
<h2>今週読んだ本　「エッセンシャル思考」</h2>
&nbsp;
<div class=""cstmreba"">
<div class=""booklink-box"">
<div class=""booklink-image""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4761270438/llg01-22/"" target=""_blank"" rel=""noopener""><img style=""border: none;"" src=""https://images-fe.ssl-images-amazon.com/images/I/51eOOVlZgqL._SL320_.jpg"" /></a></div>
<div class=""booklink-info"">
<div class=""booklink-name"">

<a href=""http://www.amazon.co.jp/exec/obidos/asin/4761270438/llg01-22/"" target=""_blank"" rel=""noopener"">エッセンシャル思考 最少の時間で成果を最大にする</a>
<div class=""booklink-powered-date"">posted with <a href=""https://yomereba.com"" target=""_blank"" rel=""nofollow noopener"">ヨメレバ</a></div>
</div>
<div class=""booklink-detail"">グレッグ マキューン かんき出版 2014-11-19</div>
<div class=""booklink-link2"">
<div class=""shoplinkamazon""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4761270438/llg01-22/"" target=""_blank"" rel=""noopener"">Amazon</a></div>
<div class=""shoplinkkindle""><a href=""http://www.amazon.co.jp/exec/obidos/ASIN/B00QQKCV6E/llg01-22/"" target=""_blank"" rel=""noopener"">Kindle</a></div>
<div class=""shoplinkrakuten""><a href=""https://hb.afl.rakuten.co.jp/hgc/163854b7.d97e8d5b.163854b8.3c41ae34/?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F13023858%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F"" target=""_blank"" rel=""noopener"">楽天ブックス</a></div>
<div class=""shoplinkseven""><a href=""https://px.a8.net/svt/ejp?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2&amp;a8ejpredirect=http%3A%2F%2F7af-ent.omni7.jp%2Frelay%2Faffiliate%2FentranceProcess.do%3Furl%3Dhttp%253A%252F%252F7net.omni7.jp%252Fsearch%252F%253FsearchKeywordFlg%253D1%2526keyword%253D4-76-127043-8%252520%25257C%2525204-761-27043-8%252520%25257C%2525204-7612-7043-8%252520%25257C%2525204-76127-043-8%252520%25257C%2525204-761270-43-8%252520%25257C%2525204-7612704-3-8"" target=""_blank"" rel=""noopener"">7net</a><img src=""https://www17.a8.net/0.gif?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2"" alt="""" width=""1"" height=""1"" border=""0"" /></div>
</div>
</div>
<div class=""booklink-footer""></div>
</div>
</div>
twitterで徘徊していたら、この本をオススメしている人がいたので、読んでみました。

&nbsp;

本の内容をまとめると結構時間かかって辛いので、メモしていたところだけ紹介します。
<blockquote>「仕事がすべてという生き方をするつもりはなかったんです 。でも結局 、そうなってしまいました 。ちょっとした妥協が 、いつのまにか普通になっていきます 。もともと月曜の仕事に備えて 、日曜の 3 0分間だけをメ ールやスケジュ ールの整理にあてていました 。それが ２時間になり 、 １日中になりました 。徐々に日常が侵食され 、何もかも仕事に呑み込まれていきました （ ４ ） 」</blockquote>
時間管理って難しいですよね。
「月曜日はこれをやる！！」「週に一回はブログ書く！！」など決めてもやっぱり継続は難しいです。
フリーランスになると会社員時代よりシビアな時間管理が必要なので、上のようにならないようにきっちり区切りを決めてやっていきたいです。

&nbsp;
<blockquote>「絶対にイエスだと言いきれないなら 、それはすなわちノ ーである 」</blockquote>
フリーランスになった理由に、会社で一つの役割だけ与えられてその中で生活するというのが非常に勿体無いと思ったというのがあるのですが、逆にやりたいことが多すぎるのも困り者です。色々と手を出した結果何も実にならなかったりとかは悲惨ですよね。

自分の求めているものを日々明確にしないとなんとなく他の人とか環境に流されて自分のやりたいことができなくなってしまうので、この考え方はすごく良いなと思いました。

&nbsp;
<blockquote>つまり人生を凝縮するということは 、結果に対する行動の比率を減らすということだ 。</blockquote>
試行回数を増やすのは大事ですが、何も考えずに試行回数を増やすのと都度修正をくわえながら意図的に試行回数を増やすのでは結果に差が出ると思っています。この考え方ができればかなり生産性高められそうですね。

&nbsp;
<h2>振り返り</h2>
最初の振り返りはこれくらいにします。読書は継続したいですが、もう少し自己啓発とかでなく、技術書などの専門書を読む割合を増やしたいですね。

自己啓発は読んだだけで満足した気になりがちなので。。読みやすいからつい読んじゃうんですよね。

以上、活動報告でした。"
"2007","2018-05-20 22:27:28","2018-11-08 18:34:01","ReactNative+Jestでスナップショットテスト","rn-jest-snapshot-test","https://ver-1-0.net/wp-content/uploads/2018/01/react.png","engineering::::react","&nbsp;

今回はFacebookが提供している<a href=""https://jestjs.io"">Jest</a>をReactNativeに導入して、スナップショットテストを実施していきます。

スナップショットテストでは、最初のテスト実行時に実行結果がスナップショットとして出力され、以降のテストではその出力と実行結果に相違がないことを確認していきます。

スナップショットテストはReactとの相性がよくレンダーされたDOMのスナップショットをリポジトリにコミットしておくことで、それ以降の変更でDOMのレンダリングに変更がないことを確認することができます。

WebのE2Eテストなどと目標は近いですが、E2Eテストではいちいち各エレメントが存在することやHTMLの属性などをチェックするのが非常にたいへんなので、単純なレンダリングを確認する手段としてはこちらのスナップショットテストが向いてそうです。

&nbsp;

[after_intro]

&nbsp;
<h2>Jestを導入</h2>
&nbsp;

テストのためのReactNativeプロジェクトを作成します。
<pre><code>react-native init SnapShotSample</code></pre>
&nbsp;

ReactNativeは標準でJestが搭載されているので特にpackage.jsonあたりを書き換える必要はありません。
<pre><code class=""language-json"">{
  ""name"": ""SnapShotSample"",
  ""version"": ""0.0.1"",
  ""private"": true,
  ""scripts"": {
    ""start"": ""node node_modules/react-native/local-cli/cli.js start"",
    ""test"": ""jest""
  },
  ""dependencies"": {
    ""react"": ""16.3.1"",
    ""react-native"": ""0.55.4""
  },
  ""devDependencies"": {
    ""babel-jest"": ""22.4.4"",
    ""babel-preset-react-native"": ""4.0.0"",
    ""jest"": ""22.4.4"",
    ""react-test-renderer"": ""16.3.1""
  },
  ""jest"": {
    ""preset"": ""react-native""
  }
}
</code></pre>
&nbsp;
<h2>Jestのサンプルのテスト実行</h2>
&nbsp;

そもそもJest使うの初めてという方もいると思うので、Getting Startの例を使って簡単なテストを実行します。

最初はテスト用のディレクトリを用意します。
プロジェクトディレクトリ直下に__test__というディレクトリを用意してそこにテストファイルを配置します。jestは__test__という名前のディレクトリ以下のファイル、あるいは*.test.js,*.spec.jsというファイルを探してテストを実行します。

&nbsp;
<pre><code class=""language-bash"">mkdir __test__</code></pre>
&nbsp;

次に、テスト用のコードとして以下のものを用意します。

&nbsp;
<pre><code class=""language-javascript"">export const sum = (a, b) =&gt; {
  return a + b;
}
</code></pre>
&nbsp;

テスト対象のコードは簡単な足し算のコードです。これをテストするコードは、__test__/sum.test.jsとします。

&nbsp;
<pre><code class=""language-javascript"">import {sum} from '../src/sum';

test('adds 1 + 2 to equal 3', () =&gt; {
  expect(sum(1, 2)).toBe(3);
});</code></pre>
&nbsp;

テストの実行は以下のように

&nbsp;
<pre><code class=""language-bash"">yarn test</code></pre>
&nbsp;

で実行します。

&nbsp;
<pre><code class=""language-bash"">$yarn test
yarn run v1.3.2
$ jest
 PASS  __test__/sum.test.js
  ✓ adds 1 + 2 to equal 3 (4ms)

Test Suites: 1 passed, 1 total
Tests:       1 passed, 1 to
tal
Snapshots:   0 total
Time:        0.425s, estimated 1s
Ran all test suites.</code></pre>
&nbsp;
<h2>テスト用のコンポーネント</h2>
&nbsp;

ここでは説明上スナップショットテストを行う簡単なコンポーネントを用意します。
コンポーネントはなんでも良いのですが、一旦ボタン用コンポーネントを用意しました。

&nbsp;

<a href=""https://ver-1-0.net/2018/05/20/rn-jest-snapshot-test/reactnativebutton/"" rel=""attachment wp-att-2014""><img class=""alignnone size-full wp-image-2014"" src=""https://ver-1-0.net/wp-content/uploads/2018/05/ReactNativeButton.gif"" alt=""ReactNativeButton"" width=""333"" height=""600"" /></a>

&nbsp;

コードは下のようなものです。

&nbsp;
<pre><code class=""language-jsx"">import React, {Component} from 'react'
import {View, Text, Alert, TouchableWithoutFeedback, StyleSheet} from 'react-native'

export default class extends Component {

  constructor(props){
    super(props)
    this.state = {
      pushed: false
    }
  }

  render() {
    const {title, disabled} = this.props
    const {pushed} = this.state
    return (
      &lt;View
        style={button.container}
        &gt;
        &lt;TouchableWithoutFeedback
          onPress={() =&gt; {
            this.setState({pushed: true})
            Alert.alert('Alert', 'Button is Clicked.', () =&gt; {
              this.setState({pushed: false})
            })
          }}
          &gt;
          &lt;View style={[button.btn, !pushed &amp;&amp; button.texture, disabled &amp;&amp; button.disabled]}&gt;
            &lt;Text
              style={button.label}
              disabled={false}
              &gt;
              {title}
            &lt;/Text&gt;
          &lt;/View&gt;
        &lt;/TouchableWithoutFeedback&gt;
      &lt;/View&gt;
    )
  }
}

const button = StyleSheet.create({
  container: {
    flexDirection: 'row',
  },
  btn: {
    flex: 1,
    margin: 10,
    padding: 10,
    borderRadius: 10,
    backgroundColor: '#27AE60'
  },
  texture: {
    borderBottomWidth: 5,
    borderBottomColor: 'green',
  },
  label: {
    fontSize: 30,
    textAlign: 'center',
    color: 'white'
  },
  disabled: {
    borderBottomWidth: 0,
    backgroundColor: 'gray',
    color: 'white'
  }
})

</code></pre>


前置きが長くなりましたが今回はこれをスナップショットテストしていきます。

&nbsp;
<h2>スナップショットテストを書く</h2>
&nbsp;

スナップショットテストを書く場合は他と同様に__test__の下にテストファイルを作成していきます。今回は__test__/Button.test.jsとしました。
コードは以下のようになります。

&nbsp;

__test__/Button.test.js

&nbsp;
<pre><code class=""language-jsx"">import React from 'react';
import Button from '../src/Button';
import renderer from 'react-test-renderer';

it('renders correctly', () =&gt; {
  const tree = renderer
    .create(<button title=""Click!!""></button>)
    .toJSON();
  expect(tree).toMatchSnapshot();
});
</code></pre>
&nbsp;

普段のテストはマッチャが違い.toMatchSnapshot()となります。このマッチャを使うと__test__の下に__snapshot__というディレクトリが生成され、その下にスナップショットが作成されます。さきほどと同様にyarn testと実行するとこのようなスナップショットファイルが作成されます。

&nbsp;

/__test__/__snapshots__/Button.test.js.snap
<pre><code class=""language-jsx"">// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `&lt;View
  style={
    Object {
      ""flexDirection"": ""row"",
    }
  }
&gt;
  &lt;View
    accessibilityComponentType={undefined}
    accessibilityLabel={undefined}
    accessibilityTraits={undefined}
    accessible={true}
    hitSlop={undefined}
    nativeID={undefined}
    onLayout={undefined}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Array [
        Object {
          ""backgroundColor"": ""#27AE60"",
          ""borderRadius"": 10,
          ""flex"": 1,
          ""margin"": 10,
          ""padding"": 10,
        },
        Object {
          ""borderBottomColor"": ""green"",
          ""borderBottomWidth"": 5,
        },
        undefined,
      ]
    }
    testID={undefined}
  &gt;
    &lt;Text
      accessible={true}
      allowFontScaling={true}
      disabled={false}
      ellipsizeMode=""tail""
      style={
        Object {
          ""color"": ""white"",
          ""fontSize"": 30,
          ""textAlign"": ""center"",
        }
      }
    &gt;
      Click!!
    &lt;/Text&gt;
  &lt;/View&gt;
&lt;/View&gt;`;
</code></pre>
&nbsp;

初回のテストでは、DOMがレンダーされ必ず成功しますが、次回以降にテストを実行した際にこのスナップショットファイルと相違がある場合はテストが失敗します。また、このスナップショットはテストケースごとに取得され、オブジェクトにdisableを渡した場合をテストケースで追加すると

&nbsp;
<pre><code class=""language-jsx"">import React from 'react';
import Button from '../src/Button';
import renderer from 'react-test-renderer';

it('renders correctly', () =&gt; {
  const tree = renderer
    .create(&lt;Button title=""Click!!""/&gt;)
    .toJSON();
  expect(tree).toMatchSnapshot();
});

it('renders disabled component', () =&gt; {
  const tree = renderer
    .create(&lt;Button disabled title=""Click!!""/&gt;)
    .toJSON();
  expect(tree).toMatchSnapshot();
});</code></pre>
&nbsp;

&nbsp;

以下のようにテストのケースごとにスナップショットを出し分けてくれます。


<pre><code class=""language-jsx"">

exports[`renders correctly 1`] = `
~略~
`;

exports[`renders disabled component 1`] = `
~略~
`;</code></pre>
&nbsp;
<h2>まとめ</h2>
&nbsp;

以上、ここまでで簡単にReactNative+Jestでのスナップショットテストを試してみました。ReactNativeインストールすれば最初から、Jestも入っているので、導入のための手間はほとんどいりません。最初に手順だけ覚えればほんとに一瞬でコンポーネントのテストが書けます。

実務ベースでみると「こういうときどうする？？」みたいな部分はまだあまり理解していませんが、徐々につかっていくうちにマスターできればなと思っています。また、Jestへの理解が深まればこうして記事にします。

&nbsp;

では"
"1813","2018-01-12 15:35:22","2018-08-26 00:57:02","[ruby]rubyのEnumerableクラスの抽出メソッドまとめ、map、find、reject、select","ruby-enumerable","http://ver-1-0.net/wp-content/uploads/2017/01/5ntkpxqt54y-sai-kiran-anagani.jpg","engineering::::rails::::for-beginner","&nbsp;

RubyのEnumerableがごっちゃになっているのと、便利なメソッドが多いので、
まとめてみます。

例に使用しているrubyのversionは2.4.1です。

&nbsp;
<h2>map</h2>
&nbsp;

mapはブロックの結果をまとめた配列を返してくれます。
collectというメソッドもありますが、mapはcollectのエイリアスなので挙動は同じです。

&nbsp;

mapの方が短いのでmapを使いがちです。

下の例では仮想通貨の頭文字の配列の中で、'B'という文字列が
含まれるかを判断して返しています。
<pre><code class=""language-ruby"">2.4.1 :003 &gt;   coins = [ 'BTC', 'ETH', 'XRP', 'NEM']
 =&gt; [""BTC"", ""ETH"", ""XRP"", ""NEM""] 
2.4.1 :004 &gt; 
2.4.1 :004 &gt;   coins.map{ |coin| coin.include?('B')}
 =&gt; [true, false, false, false] 
</code></pre>
&nbsp;

&nbsp;

Hashの場合は、key と valueを分割できます。
keyを取り出したり、valueを取り出すにはこうします。

&nbsp;
<pre><code class=""language-ruby"">2.4.1 :027 &gt;   coins_hash = { btc: 'Bitcoin', eth: 'Ethereum', xrp: 'Ripple', nem: 'XEM' }
 =&gt; {:btc=&gt;""Bitcoin"", :eth=&gt;""Ethereum"", :xrp=&gt;""Ripple"", :nem=&gt;""XEM""} 

</code></pre>
<pre><code class=""language-ruby"">2.4.1 :032 &gt;   coins_hash.map{ | key, value | value }
 =&gt; [""Bitcoin"", ""Ethereum"", ""Ripple"", ""XEM""] 
2.4.1 :032 &gt;   coins_hash.map{ | key, value | key }
 =&gt;[:btc, :eth, :xrp, :nem]

</code></pre>
&nbsp;

&nbsp;
<h2>find ( detect )  | 最初に条件に一致したものを返却</h2>
&nbsp;

&nbsp;

findは配列やハッシュの個別のオブジェクトの中で最初に真になったものを返却してくれます。
detectというメソッドもありfindの別名になります。

&nbsp;

&nbsp;
<pre><code class=""language-ruby"">2.4.1 :090 &gt;   coins.find{ |c| c.include?('X') }
 =&gt; ""XRP"" 
</code></pre>
&nbsp;

ハッシュの場合

&nbsp;
<pre><code class=""language-ruby"">2.4.1 :084 $gt; coins_hash.find{ | key , value | key.to_s.include?('x') }
 =&gt; [:xrp, ""Ripple""]
</code></pre>
&nbsp;

&nbsp;
<h2>select | 条件に一致したものを配列で取得</h2>
&nbsp;

&nbsp;

selectはブロックが真を返したものを配列で返却してくれます。
findメソッドは最初に一致したものを返却してくれますが、selectは真のものすべてを
返却してくれます。

&nbsp;

&nbsp;
<pre><code class=""language-ruby"">2.4.1 :095 &gt;   coins.select{ |c| c.include?('T') }
 =&gt; [""BTC"", ""ETH""] 
</code></pre>
&nbsp;

ハッシュの場合

&nbsp;
<pre><code class=""language-ruby"">2.4.1 :117 &gt; coins_hash.select{ |coin| coin.to_s.include?('t') }
 =&gt; {:btc=&gt;""Bitcoin"", :eth=&gt;""Ethereum""} 
</code></pre>
&nbsp;

&nbsp;
<h2>reject | 条件に一致しないものを配列で取得</h2>
&nbsp;

&nbsp;

rejectはselectの反対で偽のものを抽出して配列にしてくれます。

&nbsp;
<pre><code class=""language-ruby"">2.4.1 :118 &gt; coins.reject{ |c| c.include?('T') }
 =&gt; [""XRP"", ""NEM""]</code></pre>
&nbsp;

ハッシュの場合

&nbsp;
<pre><code class=""language-ruby"">2.4.1 :121 &gt; coins_hash.reject{ |coin| coin.to_s.include?('t') }
 =&gt; {:xrp=&gt;""Ripple"", :nem=&gt;""XEM""} 
</code></pre>"
"82","2017-01-24 23:00:46","2018-08-26 12:41:41","【Ruby】Rubyのループ ( while, times ,for , each , step, upto などなど)","ruby-loop","http://ver-1-0.net/wp-content/uploads/2017/01/5ntkpxqt54y-sai-kiran-anagani.jpg","engineering::::for-beginner","Rubyのループって便利ですよね!!

timesとか簡単に回数指定してかけるし、
日付の配列を作ってループさせたりできるし。

というわけでRubyのループの構文に絞って紹介していきます。

&nbsp;
<h3>While 文</h3>
while文。
条件式がTrueである限りループし続けます。
ある一定の条件で抜けたい場合は、breakを挿入します。
<pre><code class=""language-ruby"">idx = 0
while idx &lt; 2 do
  pp idx
end
</code></pre>
&nbsp;
<h3>Times 文</h3>
Times文。
指定した回数だけ処理を繰り返す事ができます。
下に紹介した例ではidxは 0,1,2,3・・・・108となります。
<pre><code class=""language-ruby"">108.times do |idx|
pp ""ボーン""
end
</code></pre>
&nbsp;
<h3>for 文</h3>
for文。
指定した回数だけ処理を繰り返す事ができます。
下に紹介した例ではidxは a,b,c~zとなります。
う〜ん便利。これでアルファベットを覚えずにすみますね。
<pre><code class=""language-ruby"">for alphabet in 'a'..'z' do
  printf ""#{alphabet}\n""
end
</code></pre>
&nbsp;
<h3>each 文</h3>
いわゆるforeach文ですね。
<pre><code class=""language-ruby"">array = [ ""I"", ""Have"" , ""A"" , ""Pen!!!"" ]
array.each do | val |
  p array
end
</code></pre>
ハッシュについて使ってあげると
添え字も取得できます。
<pre><code class=""language-ruby"">h = {
 ""セ・リーグ"" =&gt; [ ""巨人"", ""阪神"", ""中日"" , ""ヤクルト"" , ""広島"",""横浜"" ],
 ""パ・リーグ"" =&gt; [ ""ソフトバンク"", ""ロッテ"", ""日ハム"" , ""オリックス"" , ""西武"",""楽天"" ]
 }
h.each do | key , val |
  p key 
  p val
end
</code></pre>
&nbsp;
<pre><code class=""language-ruby"">$ruby test.rb
""セ・リーグ""
[""巨人"", ""阪神"", ""中日"", ""ヤクルト"", ""広島"", ""横浜""]
""パ・リーグ""
[""巨人"", ""阪神"", ""中日"", ""ヤクルト"", ""広島"", ""横浜""]
</code></pre>
<strong>これは大分使います!!</strong>

&nbsp;
<h3>step , upto , downto</h3>
upto は以下のように書くと20~30まで実行というようになります。
<pre><code class=""language-ruby"">20.upto(30) do |idx|
   p idx
end
</code></pre>
downto というのもある
<pre><code class=""language-ruby"">20.upto(30) do |idx|
   p idx
end
</code></pre>
さらに極め付けはstepです。
1から100までは2つずつカウントしてくれます。
<pre><code>1.step(100, 2) do |odd|
   p odd
end
</code></pre>
&nbsp;
<h3>おまけ</h3>
個人的にすごいなと思うのは
日付、時刻のカウントですかね。

例) 1~3月の日付を全て表示
<pre><code class=""language-ruby"">require ""date""
jan = Date.parse(""2017/1/1"")
march_end = Date.parse(""2017/3/31"")
(jan..march_end).each do | day |
	  p day.strftime(""%Y/%m/%d"")
end
</code></pre>
例) 1日を30分単位で出力
<pre><code class=""language-ruby"">require ""time""
first = Time.parse(""2017/1/1 00:00:00"")
last = Time.parse(""2017/1/1  23:59:59"")

(first.to_i..last.to_i).step( 30 * 60  ) do | t | 
          p Time.at(t)
end
</code></pre>
以上!!"
"2306","2018-09-02 14:37:30","2018-09-02 14:37:30","Rubyでデザインパターン。Strategyパターン。Design Pattern in Ruby","ruby-strategy","https://ver-1-0.net/wp-content/uploads/2018/09/ruby-design-pattern.jpg","engineering::::rails","&nbsp;

&nbsp;

Rubyでデザインパターン今回はStrategyパターンです。

デザインパターンはオブジェクト指向のエッセンスが詰まったものなので本を読み進めしつつ、ここにまとめてしっかりと理解していきたいです。

[after_intro]

<iframe style=""width: 120px; height: 240px;"" src=""//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=llg01-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B004YW6M6G&amp;linkId=ec52d6ae172022e5fe853f63f31bce31"" frameborder=""0"" marginwidth=""0"" marginheight=""0"" scrolling=""no""><span data-mce-type=""bookmark"" style=""display: inline-block; width: 0px; overflow: hidden; line-height: 0;"" class=""mce_SELRES_start"">﻿</span></iframe>

&nbsp;
<h2>アルゴリズムを分離するStrategyパターン</h2>
&nbsp;

早速<strong>Strategyパターン</strong>のコードはこちらです。

&nbsp;
<pre><code class=""language-ruby"">class Report
  attr_reader :title, :text
  attr_accessor :formatter
  
  def initialize(formatter)
    @title = 'Monthly Report'
    @text  = ['Things are going', 'really, really well.']
    @formatter = formatter
  end
  
  def output_report()
    @formatter.output_report(self)
  end
end

class HTMLFormatter
  def output_report(context)
        puts('&lt;html&gt;')
    puts('  &lt;head&gt;')
    puts(""    &lt;title&gt;#{context.title}&lt;/title&gt;"")
    puts('  &lt;/head&gt;')
    puts('  &lt;body&gt;')
    context.text.each do |line|
      puts(""    &lt;p&gt;#{line}&lt;/p&gt;"")
    end
    puts('  &lt;/body&gt;')
    puts('&lt;/html&gt;')
  end
end

class TextFormatter
  def output_report(context)
    puts(""****** #{context.title} ******"")
    context.text.each do |line|
      puts(line)
    end
  end
end</code></pre>
いきなりポンと見せられてもわからないので個別に切り出して説明していきます。

&nbsp;
<h2>アルゴリズムをサブクラスに委譲</h2>
&nbsp;

こちらの記事で<strong>TemplateMethodパターン</strong>を紹介しましたが、

<a href=""https://ver-1-0.net/2018/08/31/ruby-template-method/"" data-blogcard=""1"">Rubyでデザインパターン。Template Methodパターン。Design Pattern in Ruby</a>

&nbsp;

<strong>TemplateMethodパターン</strong>では、名前の通りスーパークラスのテンプレートメソッドでどういう処理をどういった順序で行うというのを規定して、個別の処理はサブクラスでメソッドをオーバーライドして利用するというものでした。

このTemplateMethodパターンは処理の順序などのロジックを親クラスにもっているので、肝心の処理の順序が変更されてしまうと親クラス、子クラス全てのモジュールに影響を与えてしまいます。

そういった問題点を解決しているのが<strong>Strategyパターン</strong>でStrategyパターンでは実際のロジックをストラテジーのクラスに委譲してしまいます。

&nbsp;
<pre><code class=""language-ruby"">class Report
  attr_reader :title, :text
  attr_accessor :formatter
  
  def initialize(formatter)
    @title = 'Monthly Report'
    @text  = ['Things are going', 'really, really well.']
    @formatter = formatter
  end
  
  def output_report()
    @formatter.output_report(self)
  end
end
</code></pre>
TemplateMethodパターンではこのoutput_reportにtitleを出力するメソッド、bodyを出力するメソッドなど必要な処理を手続き的に書いていましたが、Strategyパターンではこれらのロジックを全てformatterとして与えられたインスタンスのoutput_reportに委譲します。

Strategyパターンでは、実際のロジックを全てストラテジークラスに委譲しているので動的に実行するロジックを切り替えるということも可能です。
<pre><code class=""language-ruby"">report = Report.new(HTMLFormatter.new)
report.output_report

report.formatter = TextFormatter.new
report.output_report</code></pre>
またStrategyパターンではロジックとデータを分離していて、Reportクラスの例でいうとtitleやtextなどのデータは親クラス（Contextクラスといったりします）が保持し、実際のロジックを実行する部分で自分自身をデータとして渡します。

対象のコードは下記の部分で
<pre><code class=""language-ruby"">
 def output_report()
    @formatter.output_report(self)
 end
</code></pre>
@formatterに注入されたクラスのメソッドに対してselfで自分自身を引き渡しています。さらにstorategy側では受け取っとたcontextからデータを取得し、実際のレポート主力時に出力を行なっています。
<pre><code class=""language-ruby"">class TextFormatter
  def output_report(context)
    puts(""****** #{context.title} ******"")
    context.text.each do |line|
      puts(line)
    end
  end
end</code></pre>
&nbsp;
<h2>Rubyの特徴を生かしたlambdaでお手軽Strategyパターン</h2>
&nbsp;

ここまでですと一般的なStrategyパターンとあまり代わりありませんが、
<a href=""https://amzn.to/2C9AEvR""> Design Patterns in Ruby (Adobe Reader) (Addison-Wesley Professional Ruby Series)</a>
では、RubyのProcオブジェクトを使った簡単なStrategyパターンの実装も紹介してありました。

本ではQuick-and-Dirty Strategiesと書かれていましたが、Javascriptなどでも似たような考え方ができて覚えておいて損しない考え方かなと思いました。

Rubyではlambdaという記法を使うことでブロックをオブジェクト化して変数につめて使うことができます。下がその例ですが、

&nbsp;
<pre><code class=""language-ruby"">sayHello = lambda { puts 'hoge' } sayHello.call
hoge
 =&gt; nil
</code></pre>
lamdaを使うとProcオブジェクトが生成され格納したブロックを実行する場合は、
callを利用します。

これを使ってStrategyパターンを組む場合は、さきほどのReportクラスを以下のようにします。
<pre><code class=""language-ruby"">class Report
  def initialize(&amp;formatter)
    @title = 'Monthly Report'
    @text = ['Things are going', 'really, really well.']
    @formatter = formatter
  end
  
  def output_report
    @formatter.call(self)
  end
end</code></pre>
あとは次のようにlamdaでstrategyを実装して渡してあげれば簡易strategyパターンのできあがりです。
<pre><code class=""language-ruby"">HTML_FORMATTER = lambd do |context|
  # HTMLFormatter#output_reportの処理を書く
end

report = Report.new(HTML_FORMATTER)
report.output_report</code></pre>
この書き方だとクラスを使わないのでかなり簡潔にかけそうですが、
まああまり多用は避けたいですね。

&nbsp;
<h2>まとめ</h2>
&nbsp;

今回はStrategyパターンを紹介しましたが、Strategyパターンは委譲をベースとしたデザインパターンでTemplate Methodパターンよりは、親クラスへの依存度を下げた形で実装を行うことができます。

こうやって書くとStrategyパターンの方が優れているような書き方になってしまっていますが、それぞれのパターンには向き不向きあるのでそれぞれの良いところと悪いところをわかった上で使い分けできるとよさそうですね。

また、Rubyのlambdaを使った書き方も紹介しましたがこういう選択肢もあるよという感じで覚えておくとどこかで役にたつかもしれないですね。

では。"
"2108","2018-08-31 12:29:41","2018-09-02 13:09:21","Rubyでデザインパターン。Template Methodパターン。Design Pattern in Ruby","ruby-template-method","https://ver-1-0.net/wp-content/uploads/2018/08/ruby-template-method.jpg","engineering::::rails","<h2>Rubyでのデザインパターン</h2>
デザインパターンといえば、こちらの本

<a href=""https://amzn.to/2wta3Vd"">増補改訂版Java言語で学ぶデザインパターン入門</a>

が有名で大変ためになる本ですが、これらのデザインパターンをrubyで書こうとするとどうなるのかというのでこちら購入して読んでみました。

<iframe style=""width: 120px; height: 240px;"" src=""//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=llg01-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B004YW6M6G&amp;linkId=ec52d6ae172022e5fe853f63f31bce31"" frameborder=""0"" marginwidth=""0"" marginheight=""0"" scrolling=""no""><span data-mce-type=""bookmark"" style=""display: inline-block; width: 0px; overflow: hidden; line-height: 0;"" class=""mce_SELRES_start"">﻿</span></iframe>

はい、英語です。日本語版もあるのですが、6000円ほどで結構高かったり英語の技術書を読破するという今年の目標もあったので、こちらを選びました。

&nbsp;
<h2>TemplateMethodパターン</h2>
&nbsp;

早速デザインパターンの紹介にうつります。第一回目はTemplateMethodパターンです。

&nbsp;

[after_intro]
<pre><code class=""language-ruby"">
class Report
  def initialize
    @title = 'Monthly Report'
    @text = ['THings are going', 'really, really well']
  end
  
  def output_report 
    output_start
    output_head
    output_body_start
    output_body
    output_body_end
    oputput_end
  end
  
  def output_body
    @text.each do |line|
      output_line(line)
    end
  end
  
  def output_start
  end
  
  def output_head
    output_line(@title)
  end
  
  def output_line(line)
    raise  'Called abstract method: output_line'
  end
  
  def output_body_end
  end
  
  def output_end
  end
end
</code></pre>
先にコードをのせてしまいましたが、Template Methodパターンではこのような抽象クラスを定義して、このReportクラスのようなクラスを継承した具象クラスでメソッドをオーバーライドして実装していきます。

このデザインパターンのミソはこのコードでいうと<strong>ouput_report</strong>メソッドになります。このメソッド内で実行する処理の順番などを定義して、そこに定義された分割されたメソッドの実際の挙動はサブクラスで定義していくというような実装になります。

サブクラスでは、<strong>サブクラスでそのサブクラス特有の処理だけ実装すればよくなる(output_reportのようなメソッドは共通処理なので抽象クラスに実装しておくだけですむ)</strong>ので、全体としてコードの重複をさけて記述量を減らすことができます。

&nbsp;
<h2>Template Methodで適用する例</h2>
&nbsp;

先ほど紹介したデザインパターンの例を引用しますが、ある日月次のレポートとしてHTMLでのレポートを作成する必要がありそれを実装することになった場合を考えます。

&nbsp;
<pre><code class=""language-ruby"">class Report
  def initialize
   title = 'Monthly Report'
   @text = [ 'Things are going', 'really, really well.' ]
  end

  def output_report
    puts('&lt;html&gt;')
    puts('  &lt;heade&gt;')
    puts('    &lt;title&gt;#{@title}&lt;/title&gt;')
    puts('  &lt;/head&gt;')
    puts('  &lt;body&gt;')
    @text.eah do |line|
      puts('    &lt;p&gt;#{line}&lt;/p&gt;')
    end
    puts('   &lt;/body&gt;')
    puts('&lt;/html&gt;')
  end
  
end</code></pre>
HTMLを出力するだけなので、このよな実装をしたとします。しかし、後からテキスト形式でも出してほしいといったときにこまってしまいます。

ここで付け焼き刃的な実装をするとこんな感じになってしまいます。
<pre><code class=""language-ruby"">class Report
  def initialize
    @title = 'Monthly Report'
    @text = ['Things are going', 'really, really well']
  end
    
  def output_report(format)
    if format == :plain
      puts('*** #{@title{} ***')
    elsif format == :html
      puts('&lt;html&gt;')
      puts('  &lt;heade&gt;')
      puts('    &lt;title&gt;#{@title}&lt;/title&gt;')
      puts('  &lt;/head&gt;')
      puts('  &lt;body&gt;')
    else
      raise ""Unknown format: #{format}""
    end

    @text.eah do |line|
    if format == :plain  
        puts('    &lt;p&gt;#{line}&lt;/p&gt;')
      else
        puts('    &lt;p&gt;#{line}&lt;/p&gt;')
      end
    end
    puts('   &lt;/body&gt;')
    puts('&lt;/html&gt;')
  end
end</code></pre>
&nbsp;

うーん、動きはしそうですが、if文が多くてなかなか読みづらいですね。しかも、こんどは別のcsv形式で出力してほしいとなった場合にまたif文が増えて辛くなりそうな気しかしないです。

こういうときにTemplate Methodパターンで実装をすると、一番最初に紹介したReportクラスを継承する形でHTMLReportクラスとTextReportクラスを実装するとだいぶ楽になります。

&nbsp;

<strong>HTMLReport.rb</strong>
<pre><code class=""language-ruby"">class HTMLReport &lt; Report
  def output_start
    puts('&lt;html&gt;')
  end
  
  def output_head
    puts('  &lt;head&gt;')
    puts(""    &lt;title&gt;#{@title}&lt;/title&gt;"")
    puts('  &lt;/head&gt;')
  end
  
  def output_body_start
    puts('&lt;body&gt;')
  end
  
  def output_line(line)
    puts(""  &lt;p&gt;#{line}&lt;/p&gt;"")
  end
  
  def output_body_end
    puts('&lt;/body&gt;')
  end
  
  def output_end
    puts('&lt;/html&gt;')
  end
end</code></pre>
<strong>TextReport</strong>
<pre><code class=""language-ruby"">class TextReport &lt; Report
  
  def output_head
    puts(""*** #{@title} ***"")
    puts
  end
    
  def output_line(line)
    puts(line)
  end
  
end
</code></pre>
このようにそれぞれの出力フォーマットをReportクラスのサブクラスとして切り出すことによってすっきりとしたコードになりました。

これらのクラスを使う場合は、出力したいフォーマットにあわせて

&nbsp;
<pre><code class=""language-ruby""># HTML出力する場合
HTMLReport.new.output_report

# Text出力する場合
TextReport.new.output_report</code></pre>
&nbsp;
<h2>まとめ</h2>
&nbsp;

ここまでで、TemplateMethodパターンの紹介は以上です。デザインパターンはなかなか覚えるのに時間かかかるのですが、実装前の段階でデザインパターンを知っているか知らないかで実装の簡潔さや変更の容易さがかわってきて知っていると本当に便利です。

最初にもちょっと触れましたが、TemplateMethodパターンの肝は<strong>抽象クラスのそれぞれのメソッドを呼び出す親メソッド（Reportクラスのoutput_reportメソッド）</strong>と<strong>サブクラスでの実装を強制するメソッド
</strong>です。

親メソッドというか<strong>テンプレートメソッド</strong>が<strong>どういう順番で個別のメソッドを呼び出すかというのを定義して、それに合わせてサブクラスでメソッドをオーバライドしていく</strong>ので当然このテンプレートメソッドがクラス設計の重要な部分になってきます。設計時にはどういうパターンが今後の変更などを加味してどういうメソッドにするのかというのを決めていきましょう。

また、Reportクラスではoutput_lineではメソッド内で例外をなげるように実装することで子クラスでオーバーライドされない場合にはエラーで処理を止めるように実装しています。一方その他のメソッドはデフォルトで返却する値（もしくは何もしない）を決めているのでサブクラスで固有の処理がない場合はそのままReportクラスのメソッドを実行するようにして、コードの重複を減らしています。

この大きくわけて二つのテンプレートメソッドと、オーバライド必須のメソッドを覚えておけばわりとするっと実装できるのが TemplateMethodパターンです。

ぜひ実務や個人開発でもTemplateMethodパターンが適用できないかどうか考えて実装してきれいなコード書いていきましょう。"
"498","2017-07-08 18:10:24","2017-12-22 22:51:26","一億総かっこいい!!給料BANKが面白い。あなたの職業はどんなイメージ？？","salary-bank","http://ver-1-0.net/wp-content/uploads/2017/07/29f59c8806d5adb39ad0963d15f4a932_s.jpg","%e6%9c%ac%e6%a3%9a","&nbsp;

&nbsp;

こんにちは、
二日酔いの<a href=""https://twitter.com/version1_2017"">@version1_2017</a>です。

最近私のwebサイトがあるので、
それが<strong>給料BANK</strong>というサイトです。

結構話題になっていたりもするので、
すでに知っている方もいらっしゃるかと
思うのですが、
世間の職業のイメージをイラストにして
描いて紹介しています。

&nbsp;

&nbsp;

<a href=""https://kyuryobank.com/"">https://kyuryobank.com/</a>

<a href=""http://amzn.to/2uVbcSk"">日本の給料&amp;職業図鑑 </a>
<a href=""https://www.amazon.co.jp/%E6%97%A5%E6%9C%AC%E3%81%AE%E7%B5%A6%E6%96%99-%E8%81%B7%E6%A5%AD%E5%9B%B3%E9%91%91-%E7%B5%A6%E6%96%99BANK/dp/4800250005/ref=as_li_ss_il?ie=UTF8&amp;linkCode=li3&amp;tag=llg01-22&amp;linkId=1a5888c416267bd1e1f163e9f66e9be6"" target=""_blank"" rel=""noopener noreferrer""><img src=""//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=4800250005&amp;Format=_SL250_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=llg01-22"" border=""0"" /></a><img style=""border: none !important; margin: 0px !important;"" src=""https://ir-jp.amazon-adsystem.com/e/ir?t=llg01-22&amp;l=li3&amp;o=9&amp;a=4800250005"" alt="""" width=""1"" height=""1"" border=""0"" />

欲しい。。

&nbsp;

&nbsp;
<h2 class=""chapter"">給料BANKのかっこいい所 その1 カッコイイイラスト</h2>
&nbsp;

&nbsp;

このページでは、
各職種を<strong>「RPG化」</strong>して、
さまざまな職種を<strong>RPG</strong>のキャラクターさながらの
<b>かっこいい</b>イラストが載せられています。

&nbsp;

&nbsp;

イラストは載せられないですが、
元サイトか本を買うかしてみて見てください。

&nbsp;

ぜひ、
自分の職業を調べてみるのがオススメなのですが、
<h4>「ちょっw 私の仕事こんなかっこよくて良いのかな・・・」</h4>
という感じになります。笑

&nbsp;

&nbsp;
<h2 class=""chapter"">給料BANKのかっこいい所 その1 優れた網羅性</h2>
&nbsp;

&nbsp;

こちらは職業の網羅性もすごくて、
プロブロガー、Youtuber、専業アフィリエーター、コスプレーヤー
など最近の仕事なども網羅さえれています。

プロブロガー
<a href=""https://kyuryobank.com/geino/problogger.html"">https://kyuryobank.com/geino/problogger.html</a>

Youtuber
<a href=""https://kyuryobank.com/geino/youtuber.html"">https://kyuryobank.com/geino/youtuber.html</a>

専業アフィリエーター
<a href=""https://kyuryobank.com/geino/youtuber.html"">https://kyuryobank.com/geino/youtuber.html</a>

もちろん、
私の職業であるwebエンジニアもありますよ。
<a href=""https://kyuryobank.com/it/webprogramer.html"">https://kyuryobank.com/it/webprogramer.html</a>

調べてみたら400職種くらいあるみたいですね。
せっかく調べたので末尾に一覧載せておきます。

&nbsp;

&nbsp;
<h2 class=""chapter"">給料BANKのかっこいい所 その2 カッコイイ決めゼリフ</h2>
&nbsp;

&nbsp;

各イラストでは、
各職業の決めゼリフが書かれているのですが、
私の仕事であるエンジニアは
webプログラマー
<h3>「プログラミングはシンフォニーを作曲するようなものです。」</h3>
システムエンジニア
<h3>「全ての開発は私の仕様書にかかっているのだ」</h3>
こんなこと考えたことない笑
そもそもシンフォニーが何かわからないし。
シンフォニーわかってないとwebプログラマーにはなれないのか。

&nbsp;

今度決め台詞まとめて
ランキングにしてみようかな。

&nbsp;
<h2 class=""chapter"">給料BANKのかっこいい所 まとめ</h2>
&nbsp;

&nbsp;

他にももちろん、
システムエンジニアになるには？
や
どういう仕事をするのかなどもサイトに書かれていて、
イラストだけに止まらず
かなりしっかり作られています。

&nbsp;

&nbsp;

ぜひ、自分の職業を調べてみてください。
書籍版もあるのでこちらもどうぞ。

&nbsp;
<div class=""cstmreba""><div class=""booklink-box""><div class=""booklink-image""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4800250005/llg01-22/"" target=""_blank"" rel=""nofollow"" ><img src=""https://images-fe.ssl-images-amazon.com/images/I/61osTfSmnOL._SL320_.jpg"" style=""border: none;"" /></a></div><div class=""booklink-info""><div class=""booklink-name""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4800250005/llg01-22/"" target=""_blank"" rel=""nofollow"" >日本の給料&職業図鑑</a><div class=""booklink-powered-date"">posted with <a href=""https://yomereba.com"" rel=""nofollow"" target=""_blank"">ヨメレバ</a></div></div><div class=""booklink-detail"">給料BANK 宝島社 2016-01-09    </div><div class=""booklink-link2""><div class=""shoplinkamazon""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4800250005/llg01-22/"" target=""_blank"" rel=""nofollow"" >Amazonで購入</a></div><div class=""shoplinkkindle""><a href=""http://www.amazon.co.jp/gp/search?keywords=%93%FA%96%7B%82%CC%8B%8B%97%BF%26%90E%8B%C6%90%7D%8A%D3&__mk_ja_JP=%83J%83%5E%83J%83i&url=node%3D2275256051&tag=llg01-22"" target=""_blank"" rel=""nofollow"" >Kindleで購入</a></div><div class=""shoplinkrakuten""><a href=""https://hb.afl.rakuten.co.jp/hgc/163854b7.d97e8d5b.163854b8.3c41ae34/?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F13521619%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F"" target=""_blank"" rel=""nofollow"" >楽天ブックスで購入</a></div><div class=""shoplinkseven""><a href=""https://px.a8.net/svt/ejp?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2&a8ejpredirect=http%3A%2F%2F7af-ent.omni7.jp%2Frelay%2Faffiliate%2FentranceProcess.do%3Furl%3Dhttp%253A%252F%252F7net.omni7.jp%252Fsearch%252F%253FsearchKeywordFlg%253D1%2526keyword%253D4-80-025000-1%252520%25257C%2525204-800-25000-1%252520%25257C%2525204-8002-5000-1%252520%25257C%2525204-80025-000-1%252520%25257C%2525204-800250-00-1%252520%25257C%2525204-8002500-0-1"" target=""_blank"" rel=""nofollow"" >7netで購入</a><img border=""0"" width=""1"" height=""1"" src=""https://www17.a8.net/0.gif?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2"" alt=""""></div>            	  	  	  	</div></div><div class=""booklink-footer""></div></div></div>


<div class=""cstmreba""><div class=""booklink-box""><div class=""booklink-image""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4800264375/llg01-22/"" target=""_blank"" rel=""nofollow"" ><img src=""https://images-fe.ssl-images-amazon.com/images/I/61v8pwIK4oL._SL320_.jpg"" style=""border: none;"" /></a></div><div class=""booklink-info""><div class=""booklink-name""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4800264375/llg01-22/"" target=""_blank"" rel=""nofollow"" >女子の給料&職業図鑑</a><div class=""booklink-powered-date"">posted with <a href=""https://yomereba.com"" rel=""nofollow"" target=""_blank"">ヨメレバ</a></div></div><div class=""booklink-detail"">給料BANK 宝島社 2017-02-17    </div><div class=""booklink-link2""><div class=""shoplinkamazon""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4800264375/llg01-22/"" target=""_blank"" rel=""nofollow"" >Amazonで購入</a></div><div class=""shoplinkkindle""><a href=""http://www.amazon.co.jp/gp/search?keywords=%8F%97%8Eq%82%CC%8B%8B%97%BF%26%90E%8B%C6%90%7D%8A%D3&__mk_ja_JP=%83J%83%5E%83J%83i&url=node%3D2275256051&tag=llg01-22"" target=""_blank"" rel=""nofollow"" >Kindleで購入</a></div><div class=""shoplinkrakuten""><a href=""https://hb.afl.rakuten.co.jp/hgc/163854b7.d97e8d5b.163854b8.3c41ae34/?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F14666233%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F"" target=""_blank"" rel=""nofollow"" >楽天ブックスで購入</a></div><div class=""shoplinkseven""><a href=""https://px.a8.net/svt/ejp?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2&a8ejpredirect=http%3A%2F%2F7af-ent.omni7.jp%2Frelay%2Faffiliate%2FentranceProcess.do%3Furl%3Dhttp%253A%252F%252F7net.omni7.jp%252Fsearch%252F%253FsearchKeywordFlg%253D1%2526keyword%253D4-80-026437-4%252520%25257C%2525204-800-26437-4%252520%25257C%2525204-8002-6437-4%252520%25257C%2525204-80026-437-4%252520%25257C%2525204-800264-37-4%252520%25257C%2525204-8002643-7-4"" target=""_blank"" rel=""nofollow"" >7netで購入</a><img border=""0"" width=""1"" height=""1"" src=""https://www17.a8.net/0.gif?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2"" alt=""""></div>            	  	  	  	</div></div><div class=""booklink-footer""></div></div></div>

&nbsp;

<h2 class=""chapter"">給料BANKのかっこいい所 その1 優れた網羅性　付録: 職種一覧</h2>
<pre><code>
アイドル【地下アイドル】
アイリスト
アクチュアリー
AD（アシスタントディレクター）
アスレティックトレーナー（スポーツトレーナー）
アートディレクター
アナウンサー
アニメーター
専業（トップ）アフィリエイター
海女(海人）
アロマセラピスト
あん摩マッサージ指圧師
石工
イタコ
板前
いちご農家
一級建築士
一般事務・経理
鋳物工
イラストレーター（絵師）
医療事務
医療ソーシャルワーカー
医療秘書
インテリアコーディネーター
インテリアデザイナー
ウェイトレス・ウェイター
ウエディングプランナー
ウェブ解析士（Webアナリスト）
webディレクター
ウェブデザイナー
WEBプログラマー
WEBプロデューサー
鵜飼い
歌い手（ニコニコ動画）
宇宙飛行士
うどん職人（讃岐）
占い師
映画監督
営業職
栄養士
駅長
エステティシャン
NTTドコモ
NPO
F１レーサー
MR
演歌歌手
オートレース選手
おでん屋【屋台】
オペラ歌手
お坊さん（住職、僧侶）
音楽療法士
音楽プロデューサー・ボカロＰ
外交官
介護事務
介護福祉士（ケアワーカー）
海事代理士
海上保安庁
海上自衛隊
快眠セラピスト
回路設計士
カイロプラクター
画家
鍵師（錠前師）
科捜研（科学捜査研究所）
学芸員
学童保育指導員
型枠大工
学校事務
カツオ漁師
カーデザイナー
カニ漁船漁師
歌舞伎役者
カメラマン
カラーコーディネーター
眼科医
環境コンサルタント
環境測量士（環境計量士）
看護師
看護助手
神主・宮司（神職）
看板持ち・プラカード持ちバイト
管理栄養士
企画・経営職
起業家
義肢装具士
気象予報士
喫茶店オーナー
機動隊
脚本家
キャディ
cadオペレーター
キャバクラ嬢
キャビンアテンダント（CA）
キャリアコンサルタント
救急救命士
給食センター（給食のおばちゃん）
行司
行政書士
競艇選手（ボートレーサー）
空間デザイナー（スペースデザイナー）
区議会議員
汲み取り屋さん（バキュームカー）
クラシック作曲家
グラフィックデザイナー(CG)
クラブDJ
グランドスタッフ
グランドホステス
クリエイティブディレクター
クリーニング師
クレーン運転士
ケースワーカー
ケアマネージャー（ケアマネ）
経営コンサルタント
警察官
警察事務
芸能人（芸人）マネージャー
競馬調教師（厩務員）
警備員
刑務官
競輪選手（ガールズ競輪）
ゲーム音楽作曲家
ゲームクリエイター
ゲームデザイナー
ゲームプランナー
ゲームプロデューサー
ゲームプログラマー
外科医
劇団四季
検疫官
健康運動指導士
言語聴覚士
検察事務官
検事（検察官）
研修医
建設コンサルタント
現場監督
原発作業員
校閲部
航海士
工業デザイナー（インダストリアル）
皇宮護衛官
航空自衛隊
航空管制官
航空整備士
広告代理店
高速道路料金所スタッフ（収受係）
公認会計士
広報
国税専門官
国立大学助教授（准教授）
国連職員
コスプレイヤー
国会議員
国境なき医師団
コピーライター
ごみ収集（じんかい収集）
コメ農家
コールセンター（テレホンオペレーター）
コンシェルジュ
コンパニオン
コンビニ店長
裁判官
裁判所職員
細胞検査士
財務専門官
サウンドプログラマー
左官
作業療法士
作詞家
作家（小説家）
サッカー審判員
雑貨デザイナー
茶道家・茶人（家元）
産婦人科医
小児科医
料理人（シェフ)
歯科医
歯科衛生士
歯科技工士
歯科助手
市議会議員
指揮者
se（システムエンジニア）
システム監査技術者
自動車学校教官（指定自動車教習所指導員）
視能訓練士
司法書士
社会教育主事
ジャーナリスト
ジャイカ（jica）
社会人野球選手
社会福祉協議会
社会福祉士（ソーシャルワーカー）
市役所職員
社労士（社会保険労務士）
獣医
臭気判定士
柔道整復師
出版社編集長
ジュエリーデザイナー
樹木医
出版社
主筆
手話通訳士
食品衛生監視員
騎手（ジョッキー）
書店員
小学校教諭
証券アナリスト
商工会議所
消防士
照明技師
食育インストラクター
職業訓練指導員
ショコラティエ
助産師
ショップ店員
書道家
私立・公立高校教師
鍼灸師
人事部
新聞記者
新聞配達員
診療情報管理士
スクールカウンセラー
スタントマン
スーパーバイヤー
精神科医
精神保健福祉士
青年海外協力隊
整備士
声優・ナレーター
声優
税理士
セキュリティポリス（SP）
専業主婦
戦場カメラマン
潜水士
専門看護師
造園業
葬儀屋
総務
相続診断士
測量士
ソーシャルメディアプランナー
速記士
ソムリエ
体操審判員
大学教授
大使館職員
大道芸人
鷹匠
宝塚女優
タクシードライバー【運転手】
宅地建物取引士
殺陣師
たばこ屋の店主
ダンサー
探偵
治験コーディネーター（CRC）
知事
中小企業診断士
調剤薬局事務
調理師
ツアープランナー
通関士
通訳案内士
テレビプロデューサー（番組プロデューサー）
ディスパッチャー（運航管理者）
デイトレーダー・専業トレーダー
データサイエンティスト（データアナリスト）
テーブルコーディネーター
テキ屋
鉄筋工
TVディレクター（番組ディレクター）
テレビ局AD
電気工事士
電車運転士
添乗員
陶芸家
動物園飼育員
動物看護師（看護士）
登録販売者
読者モデル（読モ）
特殊清掃
登山家（アルピニスト）
図書館司書
塗装屋
土地家屋調査士
ドッグトレーナー
都道府県議会議員
鳶職
土方（土木作業員）
トマト農家
トラック運転手
トリマー
ドローン操縦士
内科医
仲居
ナニー
南極観測隊
二級建築士
日本語教師
入国警備官
庭師
塗師（塗り師）
ネイリスト
ネットワークエンジニア
納棺士
農家（専業農家・兼業農家）
農協職員
バーテンダー
配管工
胚培養士
俳優
バスガイド
パタンナー
パチンコライター
パチスロライター
パチンコライター
発破技士
パティシエ
花火師
花屋
バリスタ
バレーボール選手
パン屋
半導体エンジニア
ピザ職人（ピッツァイオーロ）
ピアニスト（ジャズ・バレエ・ブライダル）
ピアノ調律師
秘書
ビール醸造家
非常勤講師
ビューティーアドバイザー
美容師
美容整形外科医
美容部員
ひよこ鑑定士
FP(ファイナンシャルプランナー）
ファッションデザイナー
副知事
フードコーディネーター
福祉住環境コーディネーター
不動産鑑定士
ブライダルコーディネーター
プライベートバンカー
フラワーデザイナー（フラワーアレンジメント）
プラントハンター
フリーランス
振付師
プロ棋士（将棋）
プロゲーマー
プロゴルファー
プロスケート選手（フィギュア）
プロブロガー
プロボウラー
プロボクサー
プロ野球選手
弁護士
編集者
弁理士
便利屋（なんでも屋）
保育士
法医学医
貿易事務
冒険家
放射線技師（レントゲン技師）
宝飾デザイナー
ポーカー選手
宝石バイヤー
ポケモントレーナー
ポータルサイター
ホームヘルパー
牧師（神父）
保険外交員
保険会社社員（セールスレディ）
保健師
ホステス（銀座）
ホスト
研究者（ポスドク）
ホテルマン
彫師
翻訳コーディネーター
舞妓さん
マグロ漁師
マジシャン
マーシャラー（グランドハンドリング）
麻酔科医
マタギ（猟師）
麻薬取締官・麻薬取締員
マンション管理士
巫女（助勤）
宮大工
無線通信士
メイクアップアーティスト
メイドカフェ店員
モデル（女性・メンズ）
盲導犬訓練士
八百屋
野球審判員
薬剤師
ヤクルトレディ
野菜ソムリエ
youtuber
郵便局員
養護教諭
溶接工
幼稚園教諭
養豚家
養蜂家
ヨガインストラクター
予備校講師
ライター
噺家・落語家
酪農家
ラグビー選手
ラジオdj
 ラノベ作家
理学療法士
力士（横綱）
陸上自衛隊
理容師
旅行代理店
臨床検査技師
臨床工学技士
レコーディングエンジニア
臨床心理士
レーシングドライバー
レースクイーン
レスリング選手
労働基準監督官
ワイン醸造家
和菓子職人
私立大学職員
国立大学職員
衆議院事務局
参議院事務局
国会図書館職員
防衛省専門職員
国会職員
東宝
豆腐屋（とうふや）
</code></pre>"
"894","2017-10-23 20:12:45","2018-11-08 18:29:42","フリーランスの方や在宅作業の方におすすめ。一人Slack","self-slack","http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-23-at-17.35.48.png","freelance","&nbsp;

どうも、
みなさんSlackってご存知でしょうか？
最近色々な会社で使われ初めていてなかなか有名な方
のチャットツールではあると思います。

このSlackというツール
会社内で使うだけでも相当便利なツールなのですが
個人で利用するのもおすすめなので記事にしてみました。

&nbsp;
[adsense_double_rect]
&nbsp;
<h2 class=""chapter"">Slackって？</h2>
&nbsp;

&nbsp;

Slackとは、<a href=""#"" rel=""attachment wp-att-895""><img class=""alignnone size-large wp-image-895"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-23-at-17.35.48-1024x570.png"" alt=""slack紹介"" width=""700"" height=""390"" /></a>

&nbsp;

&nbsp;

エンジニア界隈やスタートアップなどで
よく使われているチャットツールです。
<a href=""https://slack.com/"">https://slack.com/</a>

&nbsp;

&nbsp;

日本ですとチャットワークなどのチャットツールもありますが、
それと同じような用途でチームのコミュニケーションや
情報共有に利用されるアプリケーションです。
PCやスマートフォンからも利用でき、
移動先などでも使えるツールです。

&nbsp;

&nbsp;

ファイルの転送やリンクの共有。
はたまた、マークダウン形式のような記法がサポートされていたりして
かなり便利です。

&nbsp;

&nbsp;
<h2 class=""chapter"">チームで使うSlackを一人で利用？</h2>
&nbsp;

&nbsp;

Slackではもちろん、
他のチームメンバーとのコミュニケーションのためのツールで、
テレビ会議に使われたりして、
他者とのコミュニケーションツールとして利用されていますが、
Slackには他の使われ方をしている部分も多いです。

&nbsp;

Slackには自分が考えていることや詰まっていること、リマインド
などを自由に書き込みできるので、
私の会社ではエンジニアが一人一つチャンネルを持っていて、
皆勤務時間中は思い思いに人それぞれtwitterのような感覚で、
今日のタスクや備忘録、詰まっているところ、メモ
のような内容をチャンネルに書いていきます。

&nbsp;

普段このように、
自分のチャンネルに様々なことを呟きながら
仕事を進めているのですが、
一度チームを離れて休日など自宅で一人で作業をする際に
なぜか上手いこと作業が進みません。。
<h5>「なぜだ・・・・・。自宅にいるからやはり甘えがでているのか？」</h5>
<h5>なんて思いながら、
職場との違いを考えていると</h5>
<h4>「そうか！普段仕事でやっているようにSlackを使ってTo DOとか備忘を呟かないから」</h4>
ということに気づきました。
そこに気がつき一人でSlackを利用している人が
いないか検索もかけてみましたが、
みなさん思いの外一人Slackを利用されているそうです。

他のアプリとの連携（RSSフィードを通知するなど）
が一人Slackの面白いところではあるようですが、
標準機能だけでも随分生産性工場に寄与する部分があると思うので、
ひとまずこの記事では標準の機能としての活用方法を紹介してみます。
（別アプリとの連携は別記事で。。機会あれば）

&nbsp;

&nbsp;

&nbsp;
<h2 class=""chapter"">使い方その1 Twitterの代わりとして使ってみる</h2>
&nbsp;

&nbsp;

slackではチャンネルと言って、
自分で好きなチャットルームの部屋を作ることができます。
<a href=""http://ver-1-0.net/2017/10/23/%e3%83%95%e3%83%aa%e3%83%bc%e3%83%a9%e3%83%b3%e3%82%b9%e3%81%ae%e6%96%b9%e3%82%84%e5%9c%a8%e5%ae%85%e4%bd%9c%e6%a5%ad%e3%81%ae%e6%96%b9%e3%81%ab%e3%80%82%e4%b8%80%e4%ba%baslack/screen-shot-2017-10-23-at-18-51-31/"" rel=""attachment wp-att-897""><img class=""alignnone size-full wp-image-897"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-23-at-18.51.31.png"" alt=""slackチャンネルの例"" width=""440"" height=""352"" /></a>

&nbsp;

ここで、
自分の呟く用の部屋を作って
自由に呟くということができます。

フリーランスの方とかだとクライアントの
作業内容などなどが入っている内容とかってSNSでは自由に呟けないですよね。。。

ただこの個人Slackなら誰も見ていないので
つぶやき放題です。

他にも、
仕事をしていて頭の中だけで考えて
ごちゃごちゃしている時に、
整理するために、
メモ書きのように自分が考えていることを
書きなぐるというのもいいかもしれません。

一度頭の外に出してみると、
案外スッキリして作業の見通しがたったり、
頭の中がシンプルに整理されたりします。

仕事中にモヤモヤすることがあれば、
Slackに一度吐き出してみてはいかがでしょうか。

&nbsp;
<h2 class=""chapter"">使い方その2 To Do リストにしてみる</h2>
&nbsp;

To Doって続かないですよね。
（あれって無限に増えていくじゃないですか。。作業中に増えていったりもするし）

しかも、
他のアプリと連動していないで、別で起動しないといけなかったり
してついつい億劫になってしまったり、忘れ去られたりしますよね。

なので、
私は、毎日見る自分のチャンネルにやらないと行けないなーということや
忘れずにやらないと行けないことをガンガンつぶやいていきます。
（下記は例です。こんなことTo Doに書く人いないと思いますけど・・・）

<a href=""http://ver-1-0.net/2017/10/23/%e3%83%95%e3%83%aa%e3%83%bc%e3%83%a9%e3%83%b3%e3%82%b9%e3%81%ae%e6%96%b9%e3%82%84%e5%9c%a8%e5%ae%85%e4%bd%9c%e6%a5%ad%e3%81%ae%e6%96%b9%e3%81%ab%e3%80%82%e4%b8%80%e4%ba%baslack/screen-shot-2017-10-23-at-19-14-36/"" rel=""attachment wp-att-900""><img class=""alignnone size-full wp-image-900"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-23-at-19.14.36.png"" alt=""slackでのToDoList"" width=""830"" height=""332"" /></a>

&nbsp;

また、slackではスニペットという機能を
使って文字を装飾できるので、
タスクが終わったら取り消し線を入れることができます。
<a href=""http://ver-1-0.net/2017/10/23/%e3%83%95%e3%83%aa%e3%83%bc%e3%83%a9%e3%83%b3%e3%82%b9%e3%81%ae%e6%96%b9%e3%82%84%e5%9c%a8%e5%ae%85%e4%bd%9c%e6%a5%ad%e3%81%ae%e6%96%b9%e3%81%ab%e3%80%82%e4%b8%80%e4%ba%baslack/screen-shot-2017-10-23-at-19-16-36/"" rel=""attachment wp-att-901""><img class=""alignnone size-large wp-image-901"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-23-at-19.16.36-1024x248.png"" alt="""" width=""700"" height=""170"" /></a>

<a href=""http://ver-1-0.net/2017/10/23/%e3%83%95%e3%83%aa%e3%83%bc%e3%83%a9%e3%83%b3%e3%82%b9%e3%81%ae%e6%96%b9%e3%82%84%e5%9c%a8%e5%ae%85%e4%bd%9c%e6%a5%ad%e3%81%ae%e6%96%b9%e3%81%ab%e3%80%82%e4%b8%80%e4%ba%baslack/screen-shot-2017-10-23-at-19-18-24/"" rel=""attachment wp-att-902""><img class=""alignnone size-large wp-image-902"" src=""http://ver-1-0.net/wp-content/uploads/2017/10/Screen-Shot-2017-10-23-at-19.18.24-1024x229.png"" alt=""slack取り消し線"" width=""700"" height=""157"" /></a>

（ ""~""で文字を囲むとその間を取り消し線で表示できます。)
朝を起きるになってる。。

&nbsp;

また、
投稿した文章は後からでも編集可能なので、
後からTo Doを追加したり、
順番を変更したりすることも可能です。
編集可能なので消してしまってもいいのですが、
一日の終わりに今日何やったかな？とか見返せるので私の場合は、
特に消したりはしないです。

このやり方は、
Slackとして他に必要な機能とまとめて、
To DOをまとめたり、自分の自由なフォーマットで
作業をリスト化できるので気に入っています。

&nbsp;
<h2 class=""chapter"">まとめ</h2>
&nbsp;

ここでは、
Slackの標準の機能でできることしか紹介しませんでしたが、
他のアプリと連携させると、
天気予報を表示したり、サーバーの容量を表示したり、
Google アナリティクスの内容を表示したりより自分好みのスペース
にカスタマイズできるみたいです。

&nbsp;

併せて、
参考になりそうなURLも貼っておきます。
<a href=""https://qiita.com/saitotak/items/ac0eb7ddc0d8d83cbe91"">個人 Slack のススメ</a>

一人で煮詰まる自分にサヨナラを告げる！在宅ワークを効率化する「ひとりSlack」が最強すぎる

以上です！！
"
"488","2017-07-03 21:47:02","2018-08-26 11:51:57","サーバーエンジニアがデザインを勉強してみた。HTML5・CSS3モダンコーディング","server-enginner-learn-design","http://ver-1-0.net/wp-content/uploads/2017/07/screencapture-file-Users-admin-prototype-index-html-1499079551933.png","%e3%81%8a%e3%81%99%e3%81%99%e3%82%81%e8%a8%98%e4%ba%8b","&nbsp;

&nbsp;

普段仕事では
サーバーサイドエンジニア
をやっていますが、
趣味で自分でもアプリケーションなんかを
作ります。

&nbsp;

もちろん、
htmlやcssの最低限の知識とかはあって、
簡単なレイアウトくらいなできます。

が・・・

なぜか自分でサイトをデザインすると
すごい野暮ったいというか
イケてないデザインになります。

&nbsp;

[after_intro]

という訳で本を買って勉強しました。

<a href=""http://amzn.to/2tHWHET"">HTML5/CSS3モダンコーディング フロントエンドエンジニアが教える3つの本格レイアウト スタンダード・グリッド・シングルページレイアウトの作り方 (WEB Engineer’s Books)</a>

&nbsp;

まだまだイケてるデザイン
とまではいかないものの
この本のサンプルを写経したら
ちょっと垢抜けたデザインができるようになりました！！

&nbsp;

&nbsp;

個人的にかなり感激です。
ここに成果を記しておきます。
<img class=""alignnone size-large wp-image-490"" src=""http://ver-1-0.net/wp-content/uploads/2017/07/screencapture-file-Users-admin-prototype-index-html-1499079551933-844x1024.png"" alt=""モダンコーディング成果"" width=""700"" height=""849"" />

&nbsp;

そんな訳で結論から言うと、
すごい為になりました！！

と言うことでオススメします。

どうでしょう？？
個人的にかなり進歩したと思いますが (^ ^;)

&nbsp;

&nbsp;
<h2 class=""chapter"">実例を使ってモダンなデザインを体感できる</h2>
本書は、
以下３つのレイアウトのパターンを
<ul>
 	<li>スタンダードレイアウト・・・ブログなどでよくある。ヘッダー・サイドバー・メインコンテンツのレイアウト</li>
 	<li>グリッドレイアウト・・・画面のサイズにより表示されるカラムの数が変わるレスポンシブなレイアウト</li>
 	<li>シングルページレイアウト・・・個人のポートフォリオサイトや商用のランディングページで見られる一枚構成のレイアウト</li>
</ul>
サンプルとして
コーディングを進めながら
解説をはさみ進んでいきます。

本書全体を通して、
読むだけではあまり身にならないので、
実際に自分でコードを打って見て、
都度表示を確認しながら読み進めて行くというのが
一番身になるかと思います。

&nbsp;

&nbsp;

以下は本書での気づきを記しておきます。
<h2 class=""chapter"">リセットcssを利用する。</h2>
&nbsp;

お恥ずかしい話知らなかったのですが、
htmlにはデフォルトのスタイルが指定してあるようで、
一行のcssでも装飾されていないhtmlがある程度見やすく
表示されるようになっているいるようです。

しかし、
実際にcssでコーディングして行く時にこれらのデフォルトのスタイル指定
が邪魔になる時があります。

&nbsp;

&nbsp;

h1タグは文字サイズが大きくて太字pタグの上下には必ずパディングが入るなどなど。

そのため、現場でよく使われるのが
リセットCSSと呼ばれるものでこれらの
デフォルトのスタイルをリセットする機能を持っています。

実際は自分でどのリセットCSSを使うかなど
決める必要がありますが
本書では、webサイトからダウンロードしたものを使用して
スタイルしていきます。

&nbsp;

確かに言われてみれば、
h1タグとか、pとかいちいちスタイルを打ち消す
属性を渡すの面倒臭いですよね。

上にも書いたようにリセットCSSをあらかじめ読み込んでいれば
これらの手間が省けます。

&nbsp;

&nbsp;
<h2 class=""chapter"">html要素にフォントのサイズを指定する。</h2>
&nbsp;

次にhtml要素のフォントサイズを指定するですが、
これが今まで自分のデザインした
（デザインと言うとかっこ良さげですが）
サイトが野暮ったくなる一番の理由だったのでは
と思っています。

&nbsp;

HTMLのデフォルトでは
文字サイズは通常皆が見ているサイトより大分大きく設定
されています。

そんな中でそのままの文字サイズで
サイトをデザインしようとするとかなり
文字が大きくなり、
野暮ったいサイトができ上がります。

&nbsp;

&nbsp;

しかし、
html要素に
次のように指定すると
サイト全体のフォントサイズが
ちょうど良い感じになります。
<pre><code class=""language-css"">html {
  font-size: 62.5%;
}
</code></pre>
ぜひお試しください。

&nbsp;

&nbsp;
<h2 class=""chapter"">配色パターンを意識する。</h2>
&nbsp;

&nbsp;

直接本の中に書かれている訳ではないのですが、
自分がこの本を
読んで実践（先ほど見せた成果のサイトです。）した
際に気づいたことです。

&nbsp;

&nbsp;

なんか自分が色選ぶとちぐはぐに
なるよなというのは常日頃感じていて
「何か基本を外しているのだろうな」
と言う思いにかられていました。

しょうがないの検索をかけてみると
こんなサイトが見つかりました。

<a href=""http://colorhunt.co/"">http://colorhunt.co/</a>

ここでは様々な色の組み合わせが紹介
されているので、
自分の使いたい配色パターンを選んで
サイトに反映させてみると
実にしっくり来ると思います。

&nbsp;

&nbsp;
<h2 class=""chapter"">まとめ</h2>
&nbsp;

&nbsp;

以上、
自分の気づきをまとめてみました。
本当にお世辞抜きでこの本きっかけで
垢抜けたサイトが作ることが
できるようになったと思います。

今までサーバサイドばかり触っていたけれど、
俺も！私も！フロントとかデザインとか
勉強してイケてるアプリ作りたい！！
とか言う人の最初のきっかけにはとても良い本だと思います。

オススメです。

&nbsp;

&nbsp;

<div class=""cstmreba""><div class=""booklink-box""><div class=""booklink-image""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4798141577/llg01-22/"" target=""_blank"" rel=""nofollow"" ><img src=""https://images-fe.ssl-images-amazon.com/images/I/51R4sqEpwAL._SL320_.jpg"" style=""border: none;"" /></a></div><div class=""booklink-info""><div class=""booklink-name""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4798141577/llg01-22/"" target=""_blank"" rel=""nofollow"" >HTML5/CSS3モダンコーディング フロントエンドエンジニアが教える3つの本格レイアウト スタンダード・グリッド・シングルページレイアウトの作り方 (WEB Engineer’s Books)</a><div class=""booklink-powered-date"">posted with <a href=""https://yomereba.com"" rel=""nofollow"" target=""_blank"">ヨメレバ</a></div></div><div class=""booklink-detail"">吉田 真麻 翔泳社 2015-11-03    </div><div class=""booklink-link2""><div class=""shoplinkamazon""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4798141577/llg01-22/"" target=""_blank"" rel=""nofollow"" >Amazonで購入</a></div><div class=""shoplinkkindle""><a href=""http://www.amazon.co.jp/exec/obidos/ASIN/B0176GNY26/llg01-22/"" target=""_blank"" rel=""nofollow"" >Kindleで購入</a></div><div class=""shoplinkrakuten""><a href=""https://hb.afl.rakuten.co.jp/hgc/163854b7.d97e8d5b.163854b8.3c41ae34/?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F13401310%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F"" target=""_blank"" rel=""nofollow"" >楽天ブックスで購入</a></div><div class=""shoplinkseven""><a href=""https://px.a8.net/svt/ejp?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2&a8ejpredirect=http%3A%2F%2F7af-ent.omni7.jp%2Frelay%2Faffiliate%2FentranceProcess.do%3Furl%3Dhttp%253A%252F%252F7net.omni7.jp%252Fsearch%252F%253FsearchKeywordFlg%253D1%2526keyword%253D4-79-814157-2%252520%25257C%2525204-798-14157-2%252520%25257C%2525204-7981-4157-2%252520%25257C%2525204-79814-157-2%252520%25257C%2525204-798141-57-2%252520%25257C%2525204-7981415-7-2"" target=""_blank"" rel=""nofollow"" >7netで購入</a><img border=""0"" width=""1"" height=""1"" src=""https://www17.a8.net/0.gif?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2"" alt=""""></div>            	  	  	  	</div></div><div class=""booklink-footer""></div></div></div>
&nbsp;"
"388","2017-05-28 13:44:47","2017-12-22 22:53:22","「多動力」を読んでみた感想","tado-ryoku","http://ver-1-0.net/wp-content/uploads/2017/05/jonathan-simcoe-227321.jpg","%e6%9c%ac%e6%a3%9a","&nbsp;

昨日からKindleで
配信された堀江貴文さんの

<strong>「多動力」</strong>

を読んでみました。

「ゼロ」から始まり、堀江さんの本は何冊か読ませて頂いていますが、

「結局これまで堀江さんが発信してきたことがまとめて書かれているだけなんだろうなぁ」ということを考え、買うかどうか迷いましたが結局配信初日に買ってしまいました。

印象に残った点を何点か

&nbsp;
<h2 class=""chapter"">三つの肩書きをもてばあなたの価値は1万倍になる</h2>
この章では、一つの肩書きで終わる人生を否定し、三つ以上の肩書きを持つことを勧めています。

&nbsp;

元リクルートの藤原和博さんの「レアカードになる方法」を引用し、一つ一つの肩書きを掛け算し、レアな人材になることを説いています。

&nbsp;

私も「エンジニア×英語」は意識してきましたがまだまだみたいですね笑。

また本文には、似通った分野よりもかけ離れた分野を掛け合わせることがポイントでもありそれをすることで希少性も増すというのもあるようですね。

休日にやっている好きなことをもっと突き詰めてみると良いかもしれないですね。日本酒とか製造方法とかを歴史から一度しっかり勉強してみるとか

&nbsp;

&nbsp;
<h2 class=""chapter"">世の中には2種類の人間がいる。それは「原液」を作る者と「原液」を薄める者だ。</h2>
&nbsp;

堀江さんは、本の中で自分にしかできないアイデアや自分にしかできない発言をすることで「原液」を作れるということを言っていて、それを作ることに集中すれば、フォロワーやメディアが自分の分身となり情報を広めてくれ、想像もつかない仕事量を可能にしてくれると言っていました。

&nbsp;

「原液」という表現がいまいちハラオチしなかったのですが
章末のJust Do It（章末のチェックリスト）に
<strong>「一番わかりやすいのは、あなたが会議でした発言が一人歩きして、多くの人間を動かしているか？」ということだ」</strong>
というとてもわかりやすい表現がありました。

また、この「原液」を作るには「教養」が必要で、「教養」とは歴史などを辿ることで得られる知識で、そのシステムの本質や歴史の変遷に関する理解のことであるとされています。

&nbsp;

自分にしかできない発言、自分にしかできない仕事というのは上に書いた
「レアカード」になっておくとよりやりやすく、というか自然に出てくるような気がしています。

というか、この記事を書いている時点で今絶賛カルピス薄め中ですね笑

&nbsp;

&nbsp;
<h2 class=""chapter"">資産が人をダメにする</h2>
&nbsp;

本章ポイントに
<blockquote>手持ちのカードを捨て「やりたいこと」に最短距離で行こう。</blockquote>
とある。

&nbsp;

やはり、この「今自分にあるもの」は多動力の足かせになるよう。

確かに、どうしても「今の資格を生かして」「経験を生かして」とかすると
自分の陣地の近場からしか攻めれなそうで、目的地にいかにはものすごい時間が要りそう。

&nbsp;

&nbsp;
<h2 class=""chapter"">まとめ</h2>
&nbsp;

本書は、ちょうど良い長さで最後まで飽きずに読み終えられました。

&nbsp;

「君の名は。。」ヒットの要因を語るパートで、今の若者はスマホ世代で空き時間の単位が時間単位から分単位になっていると指摘されていますが、それと同様本書も無駄な部分がなく飽きずに読み進められました。

&nbsp;

印象に残った点をあげさせてもらいましたが、他の部分も堀江さん独自の考えが書かれていて読んで面白いものだと思います。

&nbsp;

「多動力」をテーマにこれまでの堀江さんの発言を無駄なくまとめた本になっていると思います。

興味があればどうぞ。
<div class=""cstmreba""><div class=""booklink-box""><div class=""booklink-image""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4344031156/llg01-22/"" target=""_blank"" rel=""nofollow"" ><img src=""https://images-fe.ssl-images-amazon.com/images/I/51of-IcKWRL._SL320_.jpg"" style=""border: none;"" /></a></div><div class=""booklink-info""><div class=""booklink-name""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4344031156/llg01-22/"" target=""_blank"" rel=""nofollow"" >多動力 (NewsPicks Book)</a><div class=""booklink-powered-date"">posted with <a href=""https://yomereba.com"" rel=""nofollow"" target=""_blank"">ヨメレバ</a></div></div><div class=""booklink-detail"">堀江 貴文 幻冬舎 2017-05-27    </div><div class=""booklink-link2""><div class=""shoplinkamazon""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4344031156/llg01-22/"" target=""_blank"" rel=""nofollow"" >Amazonで購入</a></div><div class=""shoplinkkindle""><a href=""http://www.amazon.co.jp/exec/obidos/ASIN/B072HVZ9RF/llg01-22/"" target=""_blank"" rel=""nofollow"" >Kindleで購入</a></div><div class=""shoplinkrakuten""><a href=""https://hb.afl.rakuten.co.jp/hgc/163854b7.d97e8d5b.163854b8.3c41ae34/?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F14918400%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F"" target=""_blank"" rel=""nofollow"" >楽天ブックスで購入</a></div><div class=""shoplinkseven""><a href=""https://px.a8.net/svt/ejp?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2&a8ejpredirect=http%3A%2F%2F7af-ent.omni7.jp%2Frelay%2Faffiliate%2FentranceProcess.do%3Furl%3Dhttp%253A%252F%252F7net.omni7.jp%252Fsearch%252F%253FsearchKeywordFlg%253D1%2526keyword%253D4-34-403115-9%252520%25257C%2525204-344-03115-9%252520%25257C%2525204-3440-3115-9%252520%25257C%2525204-34403-115-9%252520%25257C%2525204-344031-15-9%252520%25257C%2525204-3440311-5-9"" target=""_blank"" rel=""nofollow"" >7netで購入</a><img border=""0"" width=""1"" height=""1"" src=""https://www17.a8.net/0.gif?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2"" alt=""""></div>            	  	  	  	</div></div><div class=""booklink-footer""></div></div></div>"
"366","2017-05-18 07:47:37","2017-12-22 22:36:44","Macは海外で使える？海外にPCを持っていくときの素朴な疑問","take-mac-to-abroad","http://ver-1-0.net/wp-content/uploads/2017/01/IMG_2562.jpg","colum","&nbsp;

&nbsp;

&nbsp;

題名の通りですが、
Macは海外で使えるのでしょうか？

早速回答ですが、
<h1>使えます！</h1>
はい、
以上。
[adsense]

&nbsp;

&nbsp;

とこれではさすがに不親切なので、、、

お気に入りのMacが
海外の旅行先、出張先で大破みたいな
のは避けたいですよね。

大破までいかなくとも、
充電できず、
ただの荷物になるというのも避けたいですよね。

&nbsp;

&nbsp;

私の経験上には、
なりますがモンゴル、インドネシアで普通に
電源を繋げて使えているので、
だいたいどこの国でも使えるのではないでしょうか。

&nbsp;

&nbsp;

また、経験談だけでは信用できないと思うのでちょっと調べてみると

こちらAppleのサイトより
https://www.apple.com/jp/macbook-pro/specs/

&nbsp;
<h3><span style=""text-decoration: underline;"">MacBookPro</span></h3>
<blockquote>電力条件と動作環境
電源電圧：100V～240V AC
電源周波数：50Hz〜60Hz
動作時温度：10°〜35°C
保管時温度：–25°〜45°C
相対湿度：0%〜90%（結露しないこと）
動作高度：3,048 mまでテスト済み
最高保管高度：4,572 m
最高輸送高度：10,668 m</blockquote>
&nbsp;
<h3><span style=""text-decoration: underline;"">MacBookAir</span></h3>
<blockquote>電源電圧：100〜240V AC
電源周波数：50Hz〜60Hz
動作時温度：10°〜35°C
保管時温度：-25°〜45°C
相対湿度：0%〜90%（結露しないこと）
動作高度：3,048 mまでテスト済み
最高保管高度：4,572 m
最高輸送高度：10,668 m</blockquote>
&nbsp;
<h3><span style=""text-decoration: underline;"">MackBook</span></h3>
<blockquote>電源電圧：100V〜240V AC
電源周波数：50Hz〜60Hz
動作時温度：10°〜35°C
保管時温度：-25°〜45°C
相対湿度：0%〜90%（結露しないこと）
動作高度：3,048 mまでテスト済み
最高保管高度：4,572 m
最高輸送高度：10,668 m</blockquote>
MacBook,MacBook Air, MakBookどれも同じですね。

&nbsp;

&nbsp;
<h4>ポイントは電源電圧で、
どのモデルも<strong>100 ~ 240V</strong> となっていることです。</h4>
世界の国のほとんどが
この範囲内におさまるためだいたい
どこの国でも使用可となるようです。

ちなみに,
iPhoneも付属している充電器が
100-240Vの電圧に対応しているため。
海外でもコンセントの差込口が合えば、
問題なく使えるようです。

以上、さすがMacで
海外どこでも変圧器など利用せずに使用できるようです！
[adsense]"
"1951","2018-03-22 22:59:16","2018-09-02 13:09:21","フリーランスは相対取引が自由に働ける道？","trade-of-market-and-direct","https://ver-1-0.net/wp-content/uploads/2018/03/concept-1868728_1280.jpg","freelance","&nbsp;

久しぶりの更新になりました。できるだけ週一回ほど活動報告のような形で更新したかったのですが、結果的に2,3週間ほど時間があいてしまいました。

今まで活動報告として週1くらいで更新していましたが、活動報告を書いていても所感の部分の方が書いていて楽しいし、自分の思考の結果のアウトプットにもなるのでコラムとして投稿していくことにしました。

[after_intro]

&nbsp;
<h2>相対取引と市場取引について</h2>
今回はこんなテーマでいきます。タイトル自体は難しそうですが、なんてことはないです。

市場取引とは、字面通り市場で行われるよりオープンな取引で、相対取引（あいたいとりひき）とはいわゆる「コネ」とか「知り合いの紹介」とかのよりクローズドな関係での取引になります。

この言葉は、ちきりんさんの<a href=""http://amzn.to/2FHiXW8"">マーケット感覚を身につけよう---「これから何が売れるのか?」わかる人になる5つの方法</a>で語られていて、これにインスパイアされています。

このマーケット感覚を身につけようでは、就活市場を例にとってこの二つの取引の違いを示しています。以前は学校の先輩が就職しているからそのコネで企業に就職するような「相対取引」で多くの人たちが就職していましたが、インターネットの登場に伴いリクナビ、マイナビなど大手就職情報サイトが出現し「コネ」のない大企業にもリーチできるようになり、就職活動のほとんどが市場取引により行われるようになったとされています。

この就活市場の相対取引から市場取引への変化は、様々な分野で同様の現象がおきており、クラウドワークスは自分の得意分野を生かしたいフリーランスとアウトソーシングをしたい企業をマッチングさせ、メルカリは中古でも良いから特定の商品が欲しい人と使わなくなった商品を売りにだしたい人をマッチングさせ、従来であればオープンな場所で取引されることのなかった品物を市場で取引できるようにしました。

<a href=""http://amzn.to/2FHiXW8"">マーケット感覚を身につけよう---「これから何が売れるのか?」わかる人になる5つの方法</a>には、インターネットであらゆるものが市場取引になった結果、「何が売れるのか」「何が価値あるものか」という見極める能力が大事ですよというようなことが書かれていますが、今回私はこの相対取引と市場取引という考え方が大変面白いなとおもいました。

&nbsp;
<h2>市場取引と相対取引の違い</h2>
&nbsp;

市場取引と相対取引の違いはその<strong>オープン性だと考えています。</strong>市場では、誰もがそれぞれのモノの価格を一覧で確認できるので一物一価が原則ですが、相対取引では個人間での取引になるのでそうはなりません。

一物一価というのは、タクシーの初乗りの料金が東京駅で乗っても、渋谷駅でのっても変わらないというように、一つのモノに足して、一つの値段しかつかないということです。転職市場でも同年齢、同経験の人であれば市場での価値はだいたい一つにきまりますよね。

生まれてからずーっと日本にいるとこの一物一価は割と当たり前に感じますが、<strong>東南アジアなんかを旅行してみると意外に一つのモノに複数の値段がつくことが多くあります。</strong>

さきほどは都内でのタクシーの初乗り運賃を例にとりましたが、インドネシアなんかだと乗せてもらうタクシーの運転手によって値段が違うなんてことはしょっちゅうあります。お土産を買おうとして露天で買い物したりする時はモノに値札が付いてないので、値段を聞いて交渉をしてということも多いです。

このインドネシアでの運賃が運転手によって値段が違うというのは、取引の種別が市場取引ではなく、相対取引だからです。タクシーがメーターで管理されたり「このモノの値段がいくらの価値があるか」という情報が広く行きとどいているとだいたい価格は一つに収束していきますが、メーターのない運転手や、値札のついていないモノを売っている出店の定員にお金を払うときは、交渉する相手によって値段が違います。

このように相対取引と市場取引の値段の決まり方をみていくと、市場取引では市場の参加者が考える価格の平均が価格となり、相対取引では取引相手と自分の間での価格が取引の価格になります。つまり市場取引は多数の価格の平均値、相対取引では二者間で合意が取れる価格がそれぞれの取引での価格となります。

&nbsp;
<h2>エンジニアへの需要増加でフリーランス市場が高度に市場化！？</h2>
&nbsp;

こうやって思考を進めているとふとフリーランスの市場はどうなんだろう？と考え始めます。昨今フリーランスのエージェントサービスも多く出現して、エンジニアも供給不足などと言われて以前にもましてフリーランスとして働き始めることが楽になっているように思います。

フリーランスエージェントさん方は業界に根ざした広いネットワークを使って、案件を獲得したいエンジニアに案件を提供しますし、エンジニアの供給不足や働き方改革などの世間の煽りにのりエージェントは今後も増えていくでしょう。ただ、このままフリーランスとしての働き方が一般化してくると世の中にある案件と<strong>フリーランスとして働きたいエンジニアが市場に出揃ってきて、「これぐらいのスキルだったらいくら」という相場が固まってくる</strong>のではなんて考えています。

そうなるとフリーランスの案件紹介サービスもリクナビやマイナビのフリーランス版のような均一的な求人になり、フリーランスだけど常駐が必須のような<strong>正社員よりは契約の自由度はあるけど、フリーランスの中では不自由</strong>というような求人も増えてくるでしょう。

このような状況になると<strong>「自由な働き方をしたいからフリーランスになったけど、お客様先で働いているし、働く時間も9時-17時でなんか違う・・」</strong>という人がそれなりにでてきそうです。

フリーランス界隈では、エージェントを挟むとマージンが取られるからクライアントとの直接契約が良いという話がありますが、直接契約メリットはなにも金銭的なところだけではありません。直接契約だと働く場所や働く時間、週の稼働時間なども自由に決められます。（交渉次第では勤務時間を午後からとか常にリモートワークなどの条件も選択できるでしょう）

エージェント側だって、リモートワークの案件や週2,3日の案件をまとめて紹介することもできるのでは？という反論もありそうですが、エージェントも複数のクライアントやフリーランスを相手にしている以上、リソースの問題である程度パッケージのような形でクライアントと交渉するほかないのではないでしょうか？

このように、フリーランス市場もほとんどがオープンな形で労働力が取引されるようになると<strong>やはりフリーランスが今後も自由に働いていくには相対取引を大事にしていかないといけないよね。</strong>という結論になります。

&nbsp;
<h2>どのように相対取引の場を作り出すのか？</h2>
&nbsp;

ここまで、フリーランスがより一般的になって市場でのオープンな取引が増えてくるとその分自由度が減るので、相対（あいたい）取引的なクライアントとの直接契約がより自由度の高い働き方ができるでは？ということを書いてきましたが

<strong>じゃあどうやって、相対取引の機会をつくるのか？</strong>

という話になりますよね。

これが面白いところでネットは市場での取引を進めましたが、同時に相対取引の場も同時に提供したのではなんて思っています。

TwitterやFacebook、ブログでは、今でも結構ゆるい形で人を募集をしていたり、ブログやTwitterでの発言・プロフィールをもとに仕事の依頼をしたり、SNS経由で転職したりなんていう形で興味のある個人や団体になんのつながりもなくてもコンタクトが取れるようになりました。

ここまで話をしてある程度わかるとは思うのですが、平たくいうとブログ書いたり、つぶやいたり、SNSで発信して仕事の依頼を受けよう。ということです。ほかにも、自分の興味ある情報を呟いている人がエンジニア不足で困っていたら、「仕事やりましょうか？」なんて声をかえてみるのもいいんではないでしょうか？

リアルも良いですが、個人としてはWeb上の方が多くの人にリーチできるのでそちらに力いれていきたいです。とはいえ、リアルはリアルでWebに流れない情報が落ちているので、自分のクライアントになりそうな人がいそうな場所にいくというのはぜんぜんありですね。

&nbsp;
<h2>まとめ</h2>
&nbsp;

ここまでのまとめです。
<ul>
 	<li>エージェントはエージェントで均一的な案件が集まる。</li>
 	<li>マッチングプラットフォーム以外で相対取引（あいたいとりひき）のクライアントに接触できる仕組みをつくる。</li>
 	<li>相対取引（あいたいとりひき）を狙うフィールドはWeb上が多くの人にリーチできるのでよさそうだけどリアルのつながりもぜんぜんあり</li>
</ul>
色々と書きましたが、ここらへんがポイントではないでしょうか？この記事で言いたいことは、フリーランスになるには、エージェントさんなどの動きが活発になってきて需要もあるから割と難しくないけど、そういう志向のエンジニアが市場に出揃ってきて相場もかたまりつつあるから、<strong>理想の働き方や年収を実現するには、圧倒的に高度なスキルか一工夫必要だよということです。</strong>

私がこうしてブログを書いているのもこれによるところが多いですね。ネットに投稿していくことが資産になるとおもっているので、偉そうに語りましたが自分の戒めにもまとめてみました。

&nbsp;

最後まで読んで頂きありがとうございました。

&nbsp;"
"580","2017-08-27 16:26:42","2018-08-26 11:44:04","WordPressの記事をTwitter投稿するときにサムネイルが表示さるようにした。| Twitter Cards","twitter-cards","http://ver-1-0.net/wp-content/uploads/2017/06/19cb5fd445481b1337387866670d094f_s.jpg","engineering::::for-beginner","&nbsp;

&nbsp;

一人でも多くの人に
このサイトに訪れていただけるように
時々リンクをtwitterで呟くのですが、
<h3></h3>
<h3>自分のtweetだけなぜかサムネイルが表示されない・・・</h3>
&nbsp;

ということで少し調べて、
サムネイルが表示されるようにしました。
(早速いいねいただけました！！）

&nbsp;

<img class=""alignnone size-full wp-image-581"" src=""http://ver-1-0.net/wp-content/uploads/2017/08/スクリーンショット-2017-08-27-15.46.57.png"" alt=""tweeterCards"" width=""648"" height=""527"" />
[after_intro]
<h2 class=""chapter"">Twitter Cardsというのをやるとどうやら表示されるらしい</h2>
&nbsp;

&nbsp;

題名の通り
Twitter Cards
というのを導入すると
写真や動画などのリッチメディアを
ツイートに添付してウェブサイトへのトラフィックを
促進できるそうです。

まー、上にあるようにLINEとかでお店のリンクとか
投稿すると画像のサムネイルも合わせて自動で表示されますよね？

あれと同じで、
サイトのサムネイルを表示してユーザの興味を引けるというやつです。

では、
早速導入していきましょう。

&nbsp;
<h2 class=""chapter"">早速Twitter Cards導入</h2>
導入については
<a href=""http://wispyon.com/facebook-ogp-twittercards/"">http://wispyon.com/facebook-ogp-twittercards/</a>
こちらを参考にしました。

上のリンクのページ最後のコードを
wordpressのー＞「外観」ー＞「テーマの編集」ー＞header.phpを編集で、
headタグの中に書いて保存してあげればOkです。

ちなみに、
こういう記載がありますが今回は関係ないので消しました。
<pre><code class=""languaga-markup"">&lt;meta property='fb:admins' content='【上で取得したfb:adminsの15桁ID】'&gt;
&lt;meta property='article:publisher' content='【FacebookページがあればそのURL】' /&gt;</code></pre>
あと、descriptionのところで
<pre><code class=""languaga-markup"">&lt;meta property='og:description' content='&lt;?php echo mb_substr(get_the_excerpt(), 0, 100) ?&gt;'&gt;</code></pre>
こういうのがあったのですが
私のサイトですと関連記事の部分が
descriptionに埋め込まれる感じになってしまったので、
get_the_excerpt()を$post-&gt;$post_contentに変えました。

導入はこれで以上です。
次は確認をしましょう。

&nbsp;
<h2 class=""chapter"">ちゃんとTwitterCardsでサムネイルが表示されるか確認</h2>
&nbsp;

<a href=""https://cards-dev.twitter.com/validator"">Card validator</a>

どういうように投稿されるかは
上のリンクで事前に確認できます。

表示させたいページのURLを画面左側のテキストボックスに
貼り付けてPreview Cardを押しましょう。

エラーが出ていなければOKです。

<img class=""alignnone size-large wp-image-582"" src=""http://ver-1-0.net/wp-content/uploads/2017/08/スクリーンショット-2017-08-27-16.19.49-1024x553.png"" alt=""CardsValidator"" width=""700"" height=""378"" />

"
"1355","2017-11-21 16:28:57","2017-12-02 15:23:56","海外旅行でUber使うと目的地も支払いも先に決められて便利という話","uber-taiwan","https://ver-1-0.net/wp-content/uploads/2017/11/uber-taiwan-icatch.jpg","colum","<h2 class=""chapter"">台湾（台北）に行ってきました</h2>
&nbsp;

家にいるとついついPC触ってネットの世界に浸ってしまうので、
気分を転換も兼ねて10月の終わり頃に台湾にふらっと
行ってきました。

台湾のここに行きたい！！
というよりは、
日本にいると日本が普通という感覚になったり、
<strong>海外のちょっと違う雰囲気に触れて刺激を得たい</strong>
という目的があったので、
<strong>気軽で安くいける台湾</strong>を選択しました。

今回が初台湾だったので、
二泊三日で一通りの有名所を回ろうという
感じで旅行してきました。

以下現地で撮った写真です。

&nbsp;
<h3>九份</h3>
日本人が大好き九份。
スマホじゃ綺麗に取るのは難しいですね。。

<a href=""https://ver-1-0.net/2017/11/21/uber-taiwan/s_img_3133/"" rel=""attachment wp-att-1370""><img class=""alignnone size-full wp-image-1370"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/s_IMG_3133.jpg"" alt=""日本人が大好き九份のあの景色"" width=""640"" height=""480"" /></a>

&nbsp;
<h3><strong>中正記念堂。</strong></h3>
工事中で、外装が見えなかった。。。
けど、
広場が広大で衛兵の交代式も見れて満足でした。

&nbsp;

<img class=""alignnone size-full wp-image-1371"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/s_IMG_3167.jpg"" alt=""中正記念堂の本堂"" width=""640"" height=""480"" />

&nbsp;
<h3><strong>行天宮</strong></h3>
みんな大好き三国志の<strong>「関羽」が</strong>奉らわれている廟。
五倫八徳を真摯に守り抜いた関羽は商業の神として奉らわれています。

お仕事が上手く行くようにお参りして、
おみくじを引いてきました。
が、肝心のおみくじが読めず。。
<strong>「上吉」</strong>とか書かれていたのは読めたので上々ということでしょう!

&nbsp;

<img class=""alignnone size-full wp-image-1372"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/s_IMG_3180.jpg"" alt=""行天宮の本堂"" width=""640"" height=""480"" />

&nbsp;

他にも、
故宮博物院やら夜市なども行ってきました。
下は小籠包

<img class=""alignnone size-full wp-image-1376"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/s_IMG_3192.jpg"" alt=""台北のお店で食べた小籠包"" width=""640"" height=""480"" />

&nbsp;

魯肉飯。
個人的にこれか夜市で食べた鶏排（ジーパイ)が
一番おいしかったです。

<img class=""alignnone size-full wp-image-1377"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/s_IMG_3195.jpg"" alt=""台北のお店で食べた魯肉飯"" width=""640"" height=""480"" />

&nbsp;

&nbsp;

楽しかったです。

[after_intro]
と、これで終わってはただ台湾満喫しただけなので、
今回の台湾旅行で得た教訓をシェアしたいと思います。

&nbsp;

&nbsp;
<h2 class=""chapter"">海外旅行でのUber利用が便利！！</h2>
&nbsp;

今回の台湾旅行で私が伝えたいことは
この一言です。
<h3>「海外でUber使うと便利！！」</h3>
&nbsp;

Uberとは、
<strong>アメリカ発祥のタクシー配車サービス</strong>で、
専用にアプリから自分の目的地を選択して、配車ができるサービスになっています。

&nbsp;

そんなUberを海外で利用する場合に便利な点をあげると
<ul>
 	<li>先に価格がわかる</li>
 	<li>地図で目的地を指定できる</li>
 	<li>クレジットカードで決済できる</li>
 	<li>英語が通じる</li>
</ul>
ということです。

この三日間で、
台北市内ホテル〜九份（1時間ちょっと）、
ホテル〜故宮博物院（20~30分くらい）、
ホテル〜中生記念堂（10 ~ 20分）

などたくさん移動しましたが、
ほとんどの移動でUberを利用しました。

実際に利用してみて感じた良い点と、
使い方を書いて行きます。

&nbsp;

&nbsp;
<h2 class=""chapter"">Uberの使い方</h2>
&nbsp;
<ol>
 	<li style=""margin-top: 15px;"">Uberのアプリを<strong>日本にいるうちに</strong>
<strong> インストール</strong>しておき(電話認証などがあるため）、
現地でGoogle Mapで目的地を検索。</li>
 	<li style=""margin-top: 15px;"">道案内で公共交通機関のタブ（電車のマーク）をタップして、
<strong>一番下までスクロールすると、Uberの案内が表示</strong>される。</li>
 	<li style=""margin-top: 15px;"">案内をタップして<strong>車種と料金を選択、</strong>
<strong> ピックアップしてもらう場所を地図上から選択</strong>すると
あと何分で迎えにきますという案内が表示される</li>
 	<li style=""margin-top: 15px;"">指定した場所でピックアップしてもらう。
（<strong>車のナンバーが画面に表示される</strong>ので、それで迎えの車を
特定できます。）</li>
 	<li style=""margin-top: 15px;"">支払いはカードで済んでいるので、目的地についたら降ろしてもらう。
(現金決済もできるようですが、カード決済が便利です。)</li>
</ol>
&nbsp;
<h2 class=""chapter"">Uber便利な理由その1 先に価格がわかる</h2>
&nbsp;

別のアジアの国などでもそうなのですが、
地球の歩き方など、
旅行ガイドなどでもメーター付きのタクシーに乗ることを
進められます。

日本で生活していると
あまり実感していないのですが、
日本以外のアジア圏ですと
メーターがなく、乗る前に値段交渉を行ったりする
タクシーがあります。

経験的に、
こう行ったタクシーというのは相手が
日本人だということがわかっているので、
少し高めの料金を要求されたりします。

はたまた、
メーター付きのタクシーに乗っても回り道されたり、
迷子になったり、渋滞にはまったりということで、
料金が思ったより高くなってしまうことが多々あります。

これらの問題を解決するのがUberで、
先に価格を合意して決済を行うので、
移動中に価格のことを心配したり、運転手がちゃんと目的地に
向かっているかなどのことを心配して変な体力を使う必要が無くなります。
台北では価格もタクシーと同程度のようなので、
そちらも気にせずUberを使えると思います。

&nbsp;
<h2 class=""chapter"">Uber便利な理由その2 先に目的地を決められる</h2>
&nbsp;

現地でタクシーに乗ると、
ドライバーに言葉が伝わらなかったり、現地での目的地の読み方がわからない、
などなど正しく目的地を伝えるために苦労することが
結構あります。

そんな時でもUberが便利で、
あらかじめGoogle Mapで目的地を伝えられるので、
これらの苦労をしなくてすみます。

時間が限られている旅行では、
なるべく時間を節約して、効率的に観光スポットを回りたいですよね。
これなら迷子や目的地が間違っていたなどで時間を無駄にする
リスクを排除できます。

だいたい運転手さんはあらかじめ指定した目的地への
経路を自分のスマホで確認しながら
運転してくれます。

&nbsp;
<h2 class=""chapter"">Uber便利な理由その3 カードで決済できる</h2>
&nbsp;

現地で現金が無くなるのって結構不安ですよね。
なので、
なるべく現金は使わないでおきたい。
という時もカードで決済できるのでそれらの心配をしなくて
すみます。

&nbsp;
<h2 class=""chapter"">Uber便利な理由その4 英語が伝わる</h2>
&nbsp;

これはその国の言語がさっぱりな状態の時になるのですが、
英語を母国語としない国のドライバーさんには英語が
通じないことが多いですが、
さすがにアメリカ発祥のサービスだからかUberのドライバーさん方は
英語が通じることが多いです。

&nbsp;

&nbsp;
<h2 class=""chapter"">まとめ - Uberってメリットしかないの？ -</h2>
&nbsp;

最後まとめになりますが、
とても便利なUberですが<strong>メリットしかない訳ではない</strong>です。

アメリカでは<strong>Uberドライバーの暴行事件</strong>なども
発生しているようで、
知らない人の車に乗るという点で警戒する部分は
あるようです。

対策としては、
<strong>複数人でUberを利用する</strong>や<strong>車内で寝てしまったり</strong>
<strong> 無警戒な行動を慎む</strong>というところでしょうか。

個人的な意見としては、
現地の個人タクシーなどを利用するよりは、
そういった被害にあうリスクや犯罪の被害にあった場合の
追跡・責任が明確なUberを利用した方が良いのではというもの
もあります。

こういうデメリットをどこまで許容できるか
というのもありますが、
上手くUberを使いこなせれば、
<strong>移動中にちゃんと目的地につくかハラハラしながらタクシーに乗ったり</strong>、
<strong>迷子やドライバーとのトラブルなどで限られた旅行の時間を</strong>
<strong> 無駄にしたり</strong>することなく、
<strong>効率的に時間を使った楽しい旅行</strong>を実現できるはずです。

また、
個人的に新しいサービスを使うというのも
新しい刺激になってワクワクするので、
おすすめです。

以上、
Uberの便利さと簡単な台湾旅行記をお伝えしました。

&nbsp;

[after_article]"
"1791","2018-01-01 13:11:24","2018-11-08 18:28:41","Udemyでクーポンを利用して、気になるコースをお得に利用する方法","udemy-coupon","https://ver-1-0.net/wp-content/uploads/2017/11/Udemy-Top.png","%e3%81%8a%e3%81%99%e3%81%99%e3%82%81%e8%a8%98%e4%ba%8b","今回はUdemyで気になるコースをお得に利用する方法を紹介します。

<a href=""https://px.a8.net/svt/ejp?a8mat=2TVGOQ+BH6WX6+3L4M+691UP"" target=""_blank"" rel=""nofollow noopener"">
<img src=""https://www21.a8.net/svt/bgt?aid=171109178694&amp;wid=004&amp;eno=01&amp;mid=s00000016735001050000&amp;mc=1"" alt="""" width=""244"" height=""150"" border=""0"" /></a>
<img src=""https://www18.a8.net/0.gif?a8mat=2TVGOQ+BH6WX6+3L4M+691UP"" alt="""" width=""1"" height=""1"" border=""0"" />

その方法とは講師の発行するクーポンやクーポンコードを利用して通常の価格よりも<strong>お得に講座を受講できる</strong>方法です。

&nbsp;
<h2>クーポンの見つけ方</h2>
クーポンは講師の方から発行されたり、Udemyから発行されたりするそうです。
（Udemyのリンクは踏むリンクによってコースの値段が違うことがたまにありますがそれもクーポンの一種かもしれません）

今回は、講師から発行されたクーポンの見つけ方のみの紹介ですが、

それは

<strong>講師のFacebookやTwitterのアカウントをさがしてクーポンの告知を行なっていないか確認する</strong>

という方法です。

実際に、フルスタックエンジニアの講座を提供しているUdemy講師の井上博樹さんはご自身のFacebookのページで自身の講座をUdemyの最低価格で受講できるURLを公開しています。

<a href=""https://www.facebook.com/hiroki.inoue.102"">https://www.facebook.com/hiroki.inoue.102</a>
<iframe style=""border: none; overflow: hidden;"" src=""https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2Fhiroki.inoue.102%2Fvideos%2F1504644916282363%2F&amp;show_text=1&amp;width=560"" width=""560"" height=""489"" frameborder=""0"" scrolling=""no"" allowfullscreen=""allowfullscreen""></iframe>

&nbsp;
<h2>Udemyのクーポンって？</h2>
&nbsp;

クーポンとはご存知の通り、割引された商品を購入するためのチケットですが、Udemyのクーポンとは、<strong>URLで提供される</strong>場合と<strong>クーポンコードというパスワードのようなランダムな文字列</strong>として発行されるようです。

URLで提供される場合は、その提供されたURLをクリックして他の講座と同じようにコースを購入すれば良いです。

逆にクーポンコードの場合は、

<a href=""https://ver-1-0.net/2018/01/01/udemy-coupon/coupon-code/"" rel=""attachment wp-att-1792""><img class=""alignnone size-full wp-image-1792"" src=""https://ver-1-0.net/wp-content/uploads/2018/01/coupon-code.png"" alt=""クーポンコード"" width=""364"" height=""489"" /></a>

このようにコースの購入の下に「クーポンをお持ちですか？」という表示があるのでそこをクリックして入力という手続きになるようです。

&nbsp;
<h2>なんでクーポンを発行するの？？</h2>
&nbsp;

このようにお得にコースを受講できるUdemyのクーポンですが、なぜ講師の方々はクーポンを発行するのでしょうか？

理由としては、
<ol>
 	<li>コースにまだ受講者が少ない段階でのユーザ獲得のため</li>
 	<li>クーポン経由の購入の場合講師の報酬が大きくなるため</li>
</ol>
です。

&nbsp;
<h3>コースにまだ受講者が少ない段階でのユーザ獲得のため</h3>
&nbsp;

コース開始当初はあたりまですが、<strong>受講者が少なくユーザの反応もわかりづらいため割引をしてでもコースを受講してもらい感想を聞きたい</strong>というのがあるようです。

そのため講師は最初にコースを作った段階でクーポンを発行することが多いので、自分の勉強したいテーマを多く開講している講師のFacebookやTwitterをフォローして置くと新しい講座が割引して受講できるチャンスも上がるかもしれません。

&nbsp;
<h3>クーポン経由の購入の場合講師の報酬が大きくなるため</h3>
&nbsp;

講師が開講したコースが購入されるとそのうち何%かが手数料でUdemyの報酬になる、残りが講師の報酬となりますが、クーポン経由での購入の場合にはこの割合が変わります。

通常での購入が売り上げの33%が講師の報酬になるのに対して、<strong>クーポンでの購入の場合は、97%が講師の報酬</strong>になるそうです。

クーポンは割引になるので元の値段があまり高くないというのもあると思いますが、このような事情から講師も積極的にクーポンを発行しているようです。

&nbsp;
<h2>気になるコースを見てみる</h2>
これまであまり自分が受講した講座の講師の方や、気になる講座の講師を気にしていないのでしたらぜひチェックして見ることをオススメします。

気になる講師のFacebookページなどを訪れてみると、意外とクーポンでお得に受講できるかもしれません。

<a href=""https://px.a8.net/svt/ejp?a8mat=2TVGOQ+BH6WX6+3L4M+5YRHE"" target=""_blank"" rel=""nofollow"">世界最大級のオンライン学習サイトUdemy</a>
<img border=""0"" width=""1"" height=""1"" src=""https://www10.a8.net/0.gif?a8mat=2TVGOQ+BH6WX6+3L4M+5YRHE"" alt="""">

コースを受けてみた感想はこちらにのっけているので、興味があればどうぞ
<a href=""https://ver-1-0.net/2017/11/12/e-learning-udemy/"">=&gt; Udemy でデザインのコースを受けてみた感想。Udemyで勉強するメリットまとめ</a>
<img src=""https://www17.a8.net/0.gif?a8mat=2TVGOQ+BH6WX6+3L4M+5YRHE"" alt="""" width=""1"" height=""1"" border=""0"" />

[after_article]"
"1446","2017-11-28 16:11:14","2017-11-28 16:11:14","UdemyでiOSアプリからログインしたら、コースが連携されていなかった話。","udemy-ios-combination","https://ver-1-0.net/wp-content/uploads/2017/11/Udemy-Top.png","%e3%81%8a%e3%81%99%e3%81%99%e3%82%81%e8%a8%98%e4%ba%8b","<h2 class=""chapter"">UdemyのiOSアプリに購入したはずのコースがない!!</h2>
&nbsp;

UdemyではApple Storeからお持ちのスマートフォンアプリにログインして、購入したコースを受講することができます。

PCですとレッスン動画をダウンロードして視聴することはできないのですが、<strong>スマートフォンのアプリからなら端末に動画をダウンロードして好きな時間にレッスン動画を視聴することができます。</strong>

Udemyを登録した当初ダウンロードして移動中の電車の中などでレッスンを楽しもうと思い、早速アプリをインストールしてログインしてみました。

<strong>ところが！！</strong>なんと購入したはずの<a href=""https://px.a8.net/svt/ejp?a8mat=2TVGOQ+BH6WX6+3L4M+609HU"" target=""_blank"" rel=""nofollow noopener"">Webデザイン</a><img src=""https://www13.a8.net/0.gif?a8mat=2TVGOQ+BH6WX6+3L4M+609HU"" alt="""" width=""1"" height=""1"" border=""0"" />のコースとイーサリアムブロックチェーンのコースが<strong>見当たりません。。</strong>

慌てて、トラブルシューティングのお問い合わせページを参照すると考えられる原因がいくつか紹介されていました。

&nbsp;
<h2 class=""chapter"">ログインしてもコースが表示されない場合の原因</h2>
&nbsp;

考えられる原因は下記になります。
<ol>
 	<li>コースがアーカイブ済み。</li>
 	<li>モバイル購入商品の紛失</li>
 	<li>複数のメールアカウント</li>
 	<li>メールアドレスのスペルミス</li>
</ol>
それぞれの原因について具体的に説明していきます。

&nbsp;
<h3 class=""section"">コースがアーカイブ済み</h3>
<a href=""https://ver-1-0.net/2017/11/28/udemy-ios-combination/screen-shot-2017-11-28-at-15-25-58/"" rel=""attachment wp-att-1452""><img class=""alignnone size-large wp-image-1452"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/Screen-Shot-2017-11-28-at-15.25.58-1024x268.png"" alt=""Udemyでのコースのアーカイブ解除方法"" width=""700"" height=""183"" /></a>

&nbsp;

どうやらUdemyではコースをアーカイブすることができるようです。

誤って設定してしまった心当たりのある方は、Udemyにログインしたのち

<strong>[マイコース]→[アーカイブ]</strong>

からアーカイブを解除できるそうですので、解除してみてください。

&nbsp;
<h3 class=""section"">モバイル購入商品の紛失</h3>
&nbsp;

Udemyのトラブルシューティングをみてもこのように書いてあるようですので、下記のメールアドレスに連絡をとってコースをアカウントに登録してもらいましょう。
スマホのアプリから購入を行うとアカウントに<strong>購入履歴が反映されない場合がある</strong>ようです。

&nbsp;
<blockquote>モバイルでコースを購入した場合、コースがアカウントに登録されていない可能性があります。購入の領収書をsupport@udemy.comにEメールで送信してください。</blockquote>
&nbsp;
<h3 class=""section"">複数のメールアカウントを作成してしまっている</h3>
&nbsp;

複数のメールアカウントを持っている場合、あなたが思っているメールアドレスとは別のメールアドレスでアカウントを作成しているのかもしれません。

思い当たるメールアドレスでログインできるか試してみましょう。

UdemyはFacebookやGoogleアカウントでログインできるので最初にアカウントを作成するときにそれらのアカウントで登録したか思い出してみるの良いと思います。

また、複数のメールアカウントを作ってしまってもメールアカウントを統合する手続きもできるそうです。2個以上アカウントを作ってしまった場合サポートに連絡することで購入履歴や各コースの進捗状況を統合先のアカウントに引き継ぐことができるそうです。

詳しくはこちらを参照ください。

<a href=""https://support.udemy.com/hc/ja/articles/236097968-%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%81%AE%E7%B5%B1%E5%90%88"">アカウントを統合</a>

&nbsp;
<h3 class=""section"">メールアドレスのスペルミス</h3>
<strong>私の場合こちらのパターンでした。</strong>そそっかしくて自分がいやになります泣。どうやらUdemyではメールアドレスが正しくない場合でもアカウントの作成ができてしまうようです。

私のデスクトップで作ったアカウントのメールアドレスが間違えて入力されており、正しくアドレスの入力されたiOSアプリのアカウント上手く連携できなかったようです。（違うメールアドレスが入力されているんだから当然ですよね汗）

今は、スペルミスしたアドレスでログインして使っています。サポートとやりとりしてアカウント統合したりやりようはありそうですが、特に困らないのでそのまま使っています。

&nbsp;
<h2 class=""chapter"">ログイン後コースが表示されなくても慌てずに</h2>
&nbsp;

スマホのアプリにコースが反映されてない！となっても慌てずに落ち着いて上記のようなことをチェックしてみてください。もしかしたら私のようにメールアドレスのスペルミスなどかもしれません。

&nbsp;

一方で、Udemyサポートのページにもあるように<strong>モバイルで購入した履歴が反映されない</strong>というようなこともあるようなので、どうしてもわからない。腑に落ちない。という場合は直接問い合わせてみていただけると良いと思います。

&nbsp;

私も「また同じコースを買わないといけないのか」と少し慌てましたが今はおかげさまで、PCでもスマートフォンでもレッスン動画を視聴できております。<strong>このPCとスマホの両方を使いこなすと移動中や自宅など本当に時間と場所を選ばずに勉強ができる</strong>ので本当に良いサービスだと思います。
みなさんもコースがない！！ってないとなっても落ち着いて対処しましょう。

&nbsp;

Udemyのコースを受けてみた感想についても書いているので、よかったら覗いてみてください。
<a href=""https://ver-1-0.net/2017/11/12/e-learning-udemy/"">=&gt;勉強したい人集合!!オンライン学習サービスUdemy でデザインのコースを受けてみた</a>

&nbsp;

どんなコースがあるか探したい方はこちらからどうぞ。

<a class=""square_btn"" href=""https://px.a8.net/svt/ejp?a8mat=2TVGOQ+BH6WX6+3L4M+BW8O2&amp;a8ejpredirect=https%3A%2F%2Fwww.udemy.com%2F"" target=""_blank"" rel=""nofollow noopener"">Udemyでコースを探す</a>
<img src=""https://www14.a8.net/0.gif?a8mat=2TVGOQ+BH6WX6+3L4M+BW8O2"" alt="""" width=""1"" height=""1"" border=""0"" />"
"1484","2017-11-29 19:19:55","2018-05-20 22:45:57","Udemyの料金は高くない。勉強したいコースを購入するならセールで買うのが狙い目！！","udemy-sale","https://ver-1-0.net/wp-content/uploads/2017/11/Udemy-Top.png","%e3%81%8a%e3%81%99%e3%81%99%e3%82%81%e8%a8%98%e4%ba%8b","&nbsp;
<h2 class=""chapter"">Udemyのコースは高い？</h2>
&nbsp;

Udemyの一コースの単価って割と高いですよね。UdemyはCtoCの一個人の<strong>講師と生徒（ユーザ）</strong>をマッチングするサービスになるので、個人が自分の詳しい分野について動画を作成してアップロードすることで講師になることもできます。


<a href=""https://px.a8.net/svt/ejp?a8mat=2TVGOQ+BH6WX6+3L4M+6DRLT"" target=""_blank"" rel=""nofollow"">
<img border=""0"" width=""300"" height=""250"" alt="""" src=""https://www22.a8.net/svt/bgt?aid=171109178694&wid=004&eno=01&mid=s00000016735001072000&mc=1""></a>
<img border=""0"" width=""1"" height=""1"" src=""https://www16.a8.net/0.gif?a8mat=2TVGOQ+BH6WX6+3L4M+6DRLT"" alt="""">

&nbsp;

自分がプログラミングができたらプログラミングのコース、デザインができたらデザインのコースというように自分の知識を生かして商品を販売できるプラットフォームになっています。

そのような仕組みになっているので、講師側で自分の商品の価格を決めることができるようで、<strong>2,400円~24,000円</strong>の幅で価格(注1)を設定できるそうです。

注1) 2017年11月28日時点の価格になります。

&nbsp;

オンラインで気軽に勉強を始めてみようというときにそのコースが1万円とか2万円とかだとどんなに勉強したくてもちょっと高くて一瞬迷ってしまいますよね。

<a href=""https://px.a8.net/svt/ejp?a8mat=2TVGOQ+BH6WX6+3L4M+BW8O2&amp;a8ejpredirect=https%3A%2F%2Fwww.udemy.com%2Fcompleteweb2_jp%2F%23instructor-1"" target=""_blank"" rel=""”nofollow” noopener"">【世界で30万人が受講】フルスタック・Webエンジニア講座（2017最新版）</a>
<img src=""https://www12.a8.net/0.gif?a8mat=2TVGOQ+BH6WX6+3L4M+BW8O2"" alt="""" height=""1"" border=""0″ width="" />

<a href=""https://px.a8.net/svt/ejp?a8mat=2TVGOQ+BH6WX6+3L4M+BW8O2&amp;a8ejpredirect=https%3A%2F%2Fwww.udemy.com%2Fweb-design-master%2Flearn%2Fv4%2Foverview"" target=""_blank"" rel=""nofollow noopener"">未経験からプロのWebデザイナーになる！ 400レッスン以上の完全マスターコース</a>
<img src=""https://www10.a8.net/0.gif?a8mat=2TVGOQ+BH6WX6+3L4M+BW8O2"" alt="""" width=""1"" height=""1"" border=""0"" />
これらのようにコース数の多いレッスンは比較的高く販売されることが多いそうです。
他のオンライン学習サイトなどに登録するよりは割安なのでしょうがないとするのも良いかと思いますが、できるだけ安く買いたい！！というかたも多いはずなので、そういった方はUdemy全体で開催されるセール中にまとめ買いするのがオススメです。

&nbsp;

[after_intro]

&nbsp;
<h2 class=""chapter"">Udemyのコースは定期的なセールで買うのが狙い目</h2>
&nbsp;

現在でもブラックフライデーの割引セール中ですが、Udemyでは定期的にセールが行われており過去11月と4月にもセールが実施された実績があるようです。

中でも11月中旬から下旬にかかって行われるブラックフライデーのセールでは、商品が最大<strong style=""font-size: 1.5rem;"">95%割引</strong>されます。

&nbsp;

<strong>ブラックフライデー</strong>とは、アメリカの文化の一つで小売業界で実施される11月第四金曜日のことです。アメリカのフィラデルフィア初の文化で<strong>シリコンバレー発のUdemy</strong>もこれにならって毎年セールを行なっているようです。

セールに買い物客が殺到する様を警官がブラックと呼んだことや小売業が黒字になることにちなんだ名前だそうですが、<strong>95%の割引はさすがに殺到しますよね笑。</strong>

&nbsp;

私も定価24,000円のwebデザインのコースを1,200円で購入して勉強しています。
ほんとコスパが良いです。

受けてみた感想は前回の記事にも書いたので興味があればお読みください。
<a href=""https://ver-1-0.net/2017/11/12/e-learning-udemy/"">=&gt;勉強したい人集合!!オンライン学習サービスUdemy でデザインのコースを受けてみた</a>

&nbsp;
<h2 class=""chapter"">まとめ | コースを買うのはいつが良いのか</h2>
&nbsp;

今年のセールは終了してしまったようですが、<strong>過去4月に</strong>セールが実施されたりしている例もあるので気長にそこまで待って一気に買いだめするとかもありですね。ただ、今私がUdemyのサイトをみている限りでも定価から<strong>75%OFF</strong>くらいで商品が販売されています。

私個人でも探したのですが、この価格がいつまで続くのかはちょっとわかりません。気になっている方は早めに決断されるのが良いかと思います。

&nbsp;

以上、Udemyでコースを買うときはセールの時に買おうという記事でした。何はともあれ、Udemyは何か新しいことをはじめたい！！というときに非常に役立つツールですので、一度利用の検討をしてみるのをおすすめします。

では!!

<a class=""btn btn-large"" href=""https://px.a8.net/svt/ejp?a8mat=2TVGOQ+BH6WX6+3L4M+BW8O2&amp;a8ejpredirect=https%3A%2F%2Fwww.udemy.com%2F"" target=""_blank"" rel=""nofollow noopener"">Udemyでコースを探す</a>
<img src=""https://www14.a8.net/0.gif?a8mat=2TVGOQ+BH6WX6+3L4M+BW8O2"" alt="""" width=""1"" height=""1"" border=""0"" />
[after_article]"
"245","2017-03-05 14:03:12","2018-08-26 12:27:02","Vagrant  コマンドまとめ（前半戦) | vagrant command line interface","vagrant-commands-summary","http://ver-1-0.net/wp-content/uploads/2017/01/スクリーンショット-2017-01-14-21.08.33.png","engineering::::rails::::for-beginner","&nbsp;

ある日vagrantコマンドを引数なしで
叩いてしまったことが
ありました。

&nbsp;

そうするとvagrantコマンドの一覧が出てきました。
コマンドではままあることなので、
驚きはしなかったのですが、
知らないコマンドがままあったので、
調べてまとめてみました。

と思いましたが、
途中で息切れしたので、前半戦だけ。

&nbsp;
<pre><code class=""language-markdown"">box             manages boxes: installation, removal, etc.
connect         connect to a remotely shared Vagrant environment
destroy         stops and deletes all traces of the vagrant machine
global-status   outputs status Vagrant environments for this user
halt            stops the vagrant machine
help            shows the help for a subcommand
init            initializes a new Vagrant environment by creating a Vagrantfile
login           log in to HashiCorp's Atlas
package         packages a running vagrant environment into a box
plugin          manages plugins: install, uninstall, update, etc.
port            displays information about guest port mappings
powershell      connects to machine via powershell remoting
provision       provisions the vagrant machine
push            deploys code in this environment to a configured destination
rdp             connects to machine via RDP
reload          restarts vagrant machine, loads new Vagrantfile configuration
resume          resume a suspended vagrant machine
share           share your Vagrant environment with anyone in the world
snapshot        manages snapshots: saving, restoring, etc.
ssh             connects to machine via SSH
ssh-config      outputs OpenSSH valid configuration to connect to the machine
status          outputs status of the vagrant machine
suspend         suspends the machine
up              starts and provisions the vagrant environment
version         prints current and latest Vagrant version
</code></pre>
全部で25個です。

&nbsp;
<h2>1. vagrant up</h2>


まずは簡単なところから,
vagrantのイメージを起動します。
さらに起動後にprovisionも実行してくれます。

&nbsp;
<h2>2. vagrant halt</h2>


イメージの停止。

&nbsp;
<h2>3. vagrant reload</h2>

イメージの再起動。

&nbsp;
<h2>4. vagrant version</h2>


vagrantのバージョンを標準出力に出力。
<pre><code class=""language-bash"">$vagrant version
Installed Version: 1.9.1
Latest Version: 1.9.2
 
To upgrade to the latest version, visit the downloads page and
download and install the latest version of Vagrant from the URL
below:

  https://www.vagrantup.com/downloads.html

If you're curious what changed in the latest release, view the
CHANGELOG below:

  https://github.com/mitchellh/vagrant/blob/v1.9.2/CHANGELOG.md
</code></pre>
&nbsp;

&nbsp;

&nbsp;
<h2>5. vagrant status</h2>



vagrantイメージの状態（起動/停止)を表示。


<h2>6. vagrant destroy</h2>

イメージの削除。
こうやってサーバを簡単に作ったり、消したり
できるのが良いところですよね。

&nbsp;
<h2>7. vagrant init</h2>


vagrant の初期化。
vagrant init で初期化ファイルを作成してくれる。
ubuntu 16を使いたい時は、
<pre><code class=""language-bash"">vagrant init ubuntu/xenial64</code></pre>
第一引数にをconfig.vm.boxに設定してVagrantfile
を作成してくれる。

--minimalオプションをつけると
最小限の記述のVagrantファイルを作成してくれる。
<pre><code class=""language-bash"">Vagrant.configure(""2"") do |config|
  config.vm.box = ""base""
end
</code></pre>
urlからboxを作成する場合は、
<pre><code class=""language-bash"">$ vagrant init my-company-box https://boxes.company.com/my-company.box
</code></pre>
のようにする。
<h2></h2>
<h2>8. vagrant ssh</h2>

<hr />

ゲストOSにssh接続。
-cオプションをつけると,ssh接続してコマンドを投げられる。
<h2></h2>
<h2>9. vagrant ssh-config</h2>

<hr />

vagrant sshする時のsshの設定を出力。
<pre><code class=""language-bash"">$vagrant ssh-config
Host default
  HostName 127.0.0.1
  User ubuntu
  Port 2222
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile /Users/jo/Vagrant/node/.vagrant/machines/default/virtualbox/private_key
  IdentitiesOnly yes
  LogLevel FATAL</code></pre>

<h2>10. vagrant suspend</h2>



イメージの一時停止。

&nbsp;
<h2>11. vagrant resume</h2>



一時停止されたイメージの再起動。

&nbsp;
<h2>12. vagrant box</h2>

vagrant boxの管理。
box とは、vagrantイメージにインストールする際の
OSのスナップショットのようなもの。
<ul>
 	<li>list　・・・ Vagrant Box の表示。</li>
 	<li>add　・・・ Vagrant Box の追加。</li>
 	<li>remove ・・・ Vagrant Box の削除。</li>
 	<li>outdated ・・・ Vagrant Box が最新かどうか確認。</li>
 	<li>update ・・・ Vagrant Boxを最新にアップデート。</li>
 	<li>repackage ・・・ 指定したイメージをboxにパッケージする。</li>
</ul>
&nbsp;
<h2>13. vagrant global-status</h2>

ホストマシーンのvagrantイメージの状態を確認できます。
runningなbox2を停止させたい場合は、
<strong>vagrant halt a8f6bbc</strong>で停止できる。
<pre><code class=""language-bash"">vagrant global-status
id       name    provider   state    directory                           
-------------------------------------------------------------------------
4a9f8c4  default virtualbox poweroff /Users/version1/Vagrant/box1             
a8f6bbc  default virtualbox running  /Users/version1/Vagrant/box2
a08e8e9  default virtualbox running  /Users/version1/Vagrant/box3
</code></pre>
&nbsp;
<h2>14. vagrant port</h2>


こんな感じで、
ゲストマシーンのホストマシーンにマッピングされた
ポートを確認できる。
<pre><code class=""language-bash"">$vagrant port
The forwarded ports for the machine are listed below. Please note that
these values may differ from values configured in the Vagrantfile if the
provider supports automatic port collision detection and resolution.

    22 (guest) =&gt; 2222 (host)
</code></pre>
&nbsp;
<h2>15. vagrant powershell</h2>

powershellを起動できる模様。
macでやって見たけど、普通にwindowsじゃないとねと言われる。



&nbsp;

&nbsp;

全部まとめようとしましたが、
息切れしてきたので、
前半として一旦区切ります。

調子の良い時に後半戦まとめます。"
"62","2017-01-14 22:10:04","2018-08-26 12:46:33","[Mac] たったの10分!! Vagrantで Ruby on Rails 5 を自動構築","vagrant-rails-5min","http://ver-1-0.net/wp-content/uploads/2017/01/スクリーンショット-2017-01-14-21.08.33.png","engineering::::rails::::for-beginner","&nbsp;

Mac上にVagrantでUbuntuゲストOSを作成して、
その中にRuby on Rails 5を自動で構築します。

うまく行けば<strong>10分かからず</strong>に、
Rails5環境を構築できるかと思います。
（PCのスペック、ネット環境には依存します。）

ちなみに構築した際のホストPCのスペックは
<strong>ホストOS: Mac OS X 10.12.2（メモリ8GB)</strong>です。

[after_intro]
<h2 class=""chapter"">1.Virtual Boxインストール</h2>
ここからMac用のものをダウンロード
<a href=""http://www.oracle.com/technetwork/server-storage/virtualbox/downloads/index.html?ssSourceSiteId=otnjp"" target=""_blank"" rel=""noopener noreferrer"">http://www.oracle.com/technetwork/server-storage/virtualbox/downloads/index.html?ssSourceSiteId=otnjp</a>

&nbsp;
<h2 class=""chapter"">2.Vagrantインストール</h2>
インストールはこちらから
<a href=""https://www.vagrantup.com/"" target=""_blank"" rel=""noopener noreferrer"">https://www.vagrantup.com/</a>
<h4>Downloadをクリック</h4>
<img class=""alignnone size-medium wp-image-64"" src=""http://ver-1-0.net/wp-content/uploads/2017/01/スクリーンショット-2017-01-14-21.08.33-300x192.png"" alt=""Vagrant Top"" width=""300"" height=""192"" />
<h4 style=""padding-left: 30px;"">Macのリンクを選択</h4>
<img class=""alignnone size-medium wp-image-63"" src=""http://ver-1-0.net/wp-content/uploads/2017/01/スクリーンショット-2017-01-14-21.08.56-300x213.png"" alt=""Vagrant ダウンロード画面"" width=""300"" height=""213"" />
<h4 style=""padding-left: 30px;"">ターミナルでインストールされたか確認</h4>
<pre><code> vagrant --version
</code></pre>
エラーが出なければOK

&nbsp;
<h2 class=""chapter"">3.Vagrant Box作成</h2>
適当なフォルダにVagrantフォルダを作成
<code>mkdir ~/Vagrant </code>

Vagrant 初期化
<pre><code class=""language-bash"">vagrant init ubuntu/xenial64</code></pre>

&nbsp;
<h2 class=""chapter"">4.Vagrantfile編集</h2>
vagrant init の後に<strong>Vagrantfile</strong>というのがあるので
それを編集
編集箇所は3箇所
<h4 style=""padding-left: 30px;"">プライベートアドレス設定</h4>
<strong>27行目あたり</strong>
config.vm.networkのコメントアウトを外す
<pre><code class=""language-bash""># Create a private network, which allows host-only access to the machine
 # using a specific IP.
 config.vm.network ""private_network"", ip: ""192.168.33.10""
</code></pre>
<h4 style=""padding-left: 30px;"">メモリの割り当て設定</h4>
4GB程度に設定(お好みで)
あまり低いとインストールに時間がかかるかも
<pre><code class=""language-bash"">   config.vm.provider ""virtualbox"" do |vb|
     # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
     # Customize the amount of memory on the VM:
    vb.memory = ""4096""
   end
</code></pre>
<h4 style=""padding-left: 30px;"">Rails インストールシェルの設定</h4>
ここにRailsをインストールするためのコマンドを書き込む
最後の方の
<strong>""config.vm.provision ""shell"", inline: &lt;&lt;-SHELL""</strong>から
<strong>""SHELL""</strong>の間に以下を書き込む
<pre><code class=""language-bash""># 必要なパッケージをインストール
sudo apt-get update
sudo apt-get install -y build-essential zlib1g-dev libssl-dev
sudo apt-get install -y libreadline-dev libyaml-dev libxml2-dev libxslt-dev
sudo apt-get install -y ruby-dev nodejs
sudo apt-get install -y rbenv
sudo apt-get install libsqlite3-dev
# Railsインストール 
sudo gem install rails
sudo gem install sqlite3 # SQLITE用にインストール
sudo gem install therubyracer

# Railsアプリケーション作成
cd /vagrant  &amp;&amp; rails new myapp
sudo chmwon -R ubuntu:ubuntu /vagrant/myapp
</code></pre>

<h2 class=""chapter"">5.Vagrant起動</h2>
<pre><code class=""language-bash"">vagrant up</code></pre>
初回起動時に上で書いたシェルを実行してくれる。

&nbsp;
<h2 class=""chapter"">できたか確認</h2>
仮想環境にログイン
<pre><code class=""language-bash"">vagrant ssh</code></pre>
Rails アプリをWebRickで動かす
<pre><code class=""language-bash"">cd /vagrant/myapp
rails s -b 0.0.0.0
</code></pre>
エラーなく起動したら http://192.168.33.10:3000
に接続してみる。
<h2 class=""chapter"">6.振り返り</h2>
ここまでスムーズに行けば10分程度でRailsが動くサーバを作成できる。
環境構築は意外と時間がかかるので、
こういう形でどんどん自動化していきたい。

ただ、いきなり環境構築のためのスクリプトを書くのは
不可能なので

<strong>①手動で試行錯誤しながら環境構築</strong>

<strong>②①の手順をVagrantのprovisonシェルに書く</strong>

という流れで自動化していくのが良さそう。"
"86","2017-01-26 23:19:36","2018-08-26 12:40:31","【Vagrant】 Vagrant ssh の設定の変更","vagrant-ssh","http://ver-1-0.net/wp-content/uploads/2017/01/スクリーンショット-2017-01-14-21.08.33.png","engineering","今回はVagrant sshの話です。

Vagrant は vagrantでupした後に
vagrant ssh で 起動したvagrant boxにsshで接続できます。

Virtual Box とかだと、SSH serverはもともとインストールされているので、
問題はないとしても ホストオンリーアダプタの設定とかは
結構面倒臭いですよね。

vagrant だとサーバー起動してからsshでつなぐまで
設定が入りません。

が、 
vagrant ssh をrootでつなぎたい別のユーザでつなぎたいなど
あるかと思います。

そんな時は、
Vagrantfile に設定を書くことで設定を変更することができます。

<pre><code class=""language-bash"">config.ssh.username = ""hoge""
config.ssh.password = ""hoge""
config.ssh.host = """"
config.ssh.port = """"
config.ssh.private_key_path = """"
</code></pre>

これで 
vagrant reload で設定ファイルを読み込んで
vagrant ssh-config
すると設定が変わります。



また、
<strong>vagrant ssh-config >> .ssh/config</strong>
として
ssh のconfigを設定してあげることもできます。


vagrant は設定で色々できそうなので、
時間あるときにもう少し知識つけていきたいですね。"
"546","2017-07-30 22:38:20","2018-08-26 11:47:58","vagrantローカルPCのインスタンスの起動状態を知りたい！vagrant global-statusコマンド","vagrant-status","http://ver-1-0.net/wp-content/uploads/2017/02/6njoebtarec-lee-campbell.jpg","engineering","&nbsp;

&nbsp;

どうも、
今回は久しぶりにvagrantの話題です。

&nbsp;

vagrantって
みなさんいちいちVagrantfileのある
それぞれのイメージの
ルートディレクトリに移動（cd)してから
コマンド叩いていたりしませんか？

&nbsp;

<strong>「え、そんなことない」</strong>

と言う方もいるかもしれませんが、

&nbsp;

上記に当てはまる方に朗報です。

vagrantでは、
ローカルPCに散らばるイメージの稼働状況を
みるコマンドが存在します。

&nbsp;

&nbsp;

それは
<pre><code class=""language-bash"">vagrant global-status</code></pre>
です。

&nbsp;

&nbsp;

これでどのディレクトリにいても、
vagrantの稼働状況を確認します。

実行結果はこんな感じ。
<pre><code class=""language-bash"">$vagrant global-status
id       name    provider   state    directory                           
-------------------------------------------------------------------------
4445c4b  default virtualbox poweroff /Users/admin/Vagrant/hoge                         
4a947f0  default virtualbox poweroff /Users/admin/Vagrant/ubu            
5212b05  default virtualbox poweroff /Users/admin/Vagrant/foo
41ec701  default virtualbox running  /Users/admin/Vagrant/bar
 
The above shows information about all known Vagrant environments
on this machine. This data is cached and may not be completely
up-to-date. To interact with any of the machines, you can go to
that directory and run Vagrant, or you can use the ID directly
with Vagrant commands from any directory. For example:
""vagrant destroy 1a2b3c4d""
</code></pre>
こんな感じで、
<strong>使ってないのに、起動してしまっている</strong>
<strong> サーバ</strong>を確認できます。

&nbsp;

しかも消した時は、
表示されているidを引数に渡して
<pre><code class=""language-bash"">vagrant halt 41ec701</code></pre>
みたいな感じで
狙いを定めてサーバを停止できます。

さらに複数のサーバを停止させたい時は
引数に複数のidを渡してあげれば、
一気にサーバを停止できます。

停止もできるのでもちろん
起動もできるし、
実行結果にもあるようにインスタンスの削除も
可能です。

私のPCではたまに上げっぱなしの
サーバがリソースを食っていたりするので、
この方法でチェックー＞必要なければ停止させるという
ことをやっています。

便利ですよね！
すでに知っている方もいるかとは思いますが
共有まで！！

&nbsp;

&nbsp;
<a href=""http://amzn.to/2eY82uA"">Vagrant入門ガイド</a>
<a href=""https://www.amazon.co.jp/Vagrant%E5%85%A5%E9%96%80%E3%82%AC%E3%82%A4%E3%83%89-%E6%96%B0%E5%8E%9F%E9%9B%85%E5%8F%B8-ebook/dp/B00F418SQ8/ref=as_li_ss_il?ie=UTF8&linkCode=li2&tag=llg01-22&linkId=113f390bb992a0fab201daecb538973c"" target=""_blank""><img border=""0"" src=""//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B00F418SQ8&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=llg01-22"" ></a><img src=""https://ir-jp.amazon-adsystem.com/e/ir?t=llg01-22&l=li2&o=9&a=B00F418SQ8"" width=""1"" height=""1"" border=""0"" alt="""" style=""border:none !important; margin:0px !important;"" />

&nbsp;"
"1162","2017-11-07 00:37:09","2018-01-28 14:55:23","プログラミングを始める前に知っておいて欲しいWebサイトの仕組み","web-structure","https://ver-1-0.net/wp-content/uploads/2017/11/ichach.jpg","engineering::::for-beginner","&nbsp;

&nbsp;

どうも普段は、
割と中級者向けと言うか、
自分が試してみたことを発信していますが、
今回は時間ができたので、
プログラム初学者向けに発信していきたいと思います。

&nbsp;

最近、

&nbsp;

<strong>プログラミングを最初に学ぶ際に一番はじめ</strong>
<strong> に学んでおいておいた方が良いこと</strong>

&nbsp;

を考えていました。
現状の答えとして、
一番最初に学んで欲しいことの一つとしての

<strong>「Webサイトの仕組み」を理解すること</strong>

についてつらつらと書いていきます。

&nbsp;

これからそれなりの文字数を割いて説明しますが、

<strong>プログラミングは立体的に理解することが重要</strong>

だと考えています。

&nbsp;

私がWebサイトの仕組みと言っているのはこの図のようなものを
イメージできれブラウザがリクエストを投げてからレスポンスが返され再度
ページを描画する仕組みが説明できるかということです。

これが説明できる初学者とそうではない人で
理解度に大きな違いが出ると思うので、
この重要性についても語って行きます。

&nbsp;

<a href=""/wp-content/uploads/2017/11/Untitled-3.png""><img class=""alignnone size-large wp-image-1175"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/Untitled-3-1024x714.png"" alt=""webサイトの仕組み"" width=""700"" height=""488"" /></a>

&nbsp;

[after_intro]

&nbsp;
<h2 class=""chapter"">プログラミング初学者はWebサイトの概要図を把握しよう</h2>
&nbsp;

&nbsp;

プログラミングは、
はたから見ているとひたすら画面に向かって

<strong>文字をカタカタ打ち込んでいる作業</strong>に

見えますが、

<strong>実際は違います。</strong>

&nbsp;

実際のところは、

&nbsp;

<strong>自分の作っているプログラムがどの場所（サーバ側かクラアント側）や</strong>
<strong>どのタイミングで呼び出されるのかを想像しながら、</strong>
開発を行なっています。

それが実際に先に見せた画像のイメージになります。
（実際私が開発している際にここまで
カラフルな図は連想していないのですがw）

少し大げさに言うと

<strong>PHPのコードを触っている場合は、「今はサーバ側を触っている」</strong>
<strong> Javascriptのコードを触っている場合は「今は画面側だな」</strong>
<strong> と言うようなことを意識してコーディングしています。</strong>
（まぁこの程度なら意識下で意識する感じになるかと思いますが・・）

&nbsp;

プログラミングをいきなり勉強するのもいいですが、
それと並行して瞬間的にこういったイメージができるようになるよう
意識して勉強していると、
かなりプログラミングへの理解が進むし、
ただ画面に文字を打ち込んでいく作業ではないと気づけるはずです。

&nbsp;

[mid_article]

&nbsp;
<h2 class=""chapter"">プログラミング初学者は自分の居場所を見失いがち</h2>
&nbsp;

&nbsp;

システムの仕事をしていたり勉強していると
カタカナの言葉だったり、
アルファベットの略語がたくさん出てきてなんのことやら
全然わかりません。
（特に初学者にとってはより難しいはずです）

わからないからググって見ても、
難しくとっつきにくい言葉で書かれた文章の説明に辟易しがちです。

こういった状況が続くと自分が勉強していることはわかるけど、
なんかしっくりしないと言う状態になります。
PHPの文法とかはわかるけど
<strong>自分がどこにいるかわからない、他にどういう知識が必要がわからない</strong>
という様になりがちです。

また、
<strong>サーバー</strong>と言う言葉一つとっても
<strong>「自分がブラウザからリクエストを送った時にhtmlを返してくれるコンピュータ」</strong>
のことだと実際の構成をイメージとして理解しているのと

&nbsp;
<blockquote>サーバとは、ネットワーク上のコンピュータの中で、
他のコンピュータ（クライアント）から要求や指示を受け、
情報や処理結果を返す役割を持つコンピュータやソフトウェアのこと。</blockquote>
<a href=""https://it-trend.jp/words/server"">サーバとは - 意味の解説｜ITトレンドのIT用語集</a>より引用

と字面で説明されるのでは理解度が違います。
（ここでは、説明が悪いと言っているのではなく、学習の態度として、字面で覚えるのではなく、
実際の処理のフローなどと結びつけて想像力を働かせながらが良いと言うことです。）

&nbsp;

はたまた
「PHPとjavascriptの違い」を説明する場合に、
<strong>jsはクライアント側で動いてユーザのアクションに対して表示を変化させるプログラム</strong>で、
<strong>PHPはサーバ側でHTTPリクエストをさばいて、HTMLなどレスポンスを生成するためのプログラム</strong>です。

と言う本質的な説明ができるようになるには、
上に載せた画像のようなシステム全体の地図が頭に描けていることが重要です。

さらに言うと、
自分がPOST送信と言う言葉やGET送信と言う言葉を聞いた時に、
<strong>あの部分で使う技術だと勘が聞くか聞かない</strong>のでは、
物事の習得度合いや、理解度がだいぶ違ってきます。

自分の頭にWebサイトの全体図があると言うことは、
ある意味初学者にとっての地図になります。

例えば自分が今PHPのプログラミングを勉強しているのであれば
「サーバサイドを勉強している」
「UNIXコマンドを勉強しているのであれば、サーバー側のOS部分を勉強している」
と言うことがWebサイトの全体像を知っていることによって
情報を整理して習得できたり、

<strong>システム全体を立体的でよりリアル</strong>

に理解できることになります。

初学者の方は、
プログラミングの自習を続けつつも、
常に上の画像の自分はどこにいるのかということを
意識して勉強すべきです

&nbsp;

&nbsp;
<h2 class=""chapter"">プログラミングは必要に応じて自習が必要</h2>
&nbsp;

私は一般的に「プログラミングを勉強したい」と言う人は
「アプリケーションを作りたい」と言う人だと理解しています。

が、
<strong>プログラミングを勉強した”だけ”</strong>では、
悲しいことにアプリケーション開発に十分な知識を持っている
とは言えません。

&nbsp;

システム開発には、

<strong>gitでのソース管理の知識やHTML、CSS、配色、
</strong><strong>レイアウトなどのフロントエンドの技術。</strong>
<strong> 設計プロセスやプロジェクトの進め方に関する理解、</strong>
<strong> データベースのSQLなどの知識</strong>

などなど様々な技術があります。

&nbsp;

その中でプログラミング（さらに言うと”プログラミング言語”）の知識しかない
エンジニアと言うのはチームとしても個人としてもシステム開発を
行う上では大きな障害になります。

&nbsp;

&nbsp;

覚えるべきことは多いですが、
それら全てを理解しているエンジニアと言うのはかなり希少で
ほとんどのエンジニアには自分が作りたいものや高めたいスキルによって
情報を取捨選択して自習する態度が求められます。

それらのスキルを高めるためたり知識を得たりするのには
どう学ぶかと言うのは自分で決めて行かなければなりません。

その際にも、

<strong>自分にはどの部分のスキルが足りないのか知らないのかと言う</strong>
<strong> ことが地図を持っているだけで明白になります。</strong>

&nbsp;

<strong>自分の目的地を選択するのに必ず地図は必要です。</strong>

&nbsp;

早いうちにシステムの全貌を意識しながら学習を進めて行きましょう。

&nbsp;
<h2 class=""chapter"">まとめ</h2>
&nbsp;

色々と
自分の考えていることを書きましたが
一番良いたいのは、

&nbsp;

&nbsp;

どのエンジニアも
<strong>自分のPCの繋がっている先のサーバやサーバ内で動いているデータベース</strong>
<strong> などを全体像を意識しながら日々の作業を行なっている</strong>ということで、
プログラミング初学者にもそういった
<strong>プログラミングを立体的に理解する姿勢</strong>が求められると言うことです。

&nbsp;

個人的な意見ではありますが、
エンジニアにはこれらのヴァーチャルな物体をイメージしながら
システムを開発をしていく想像力が求められます。

&nbsp;

プログラミング初学者は、
PHP入門やJava入門のような技術書から学び、
<strong>プログラミングが画面にひたすら文字を打ち続ける作業に思えて</strong>
<strong> 挫折してしまう</strong>ことがあるように思いますが、

&nbsp;

&nbsp;

システム全体のことを考えながら
自分が打っているコードがそれをどのように操作しているか
考えながら勉強ができると感動度や理解度
もだいぶ違ってくるはずです。

今回は自分の頭にシステムの全体像の地図を持つことの
重要性を書きましたが、
次回以降はちゃんと仕組みについても説明してこうと思います。

では

[after_article]"
"1201","2017-11-10 00:33:36","2018-08-28 08:00:17","– サーバの役割について – プログラミングを始める前に知っておいて欲しいWebサイトの仕組み","web-structure-about-server","https://ver-1-0.net/wp-content/uploads/2017/11/Untitled-3.png","engineering::::for-beginner","&nbsp;

&nbsp;

今回は前回の記事に引き続き
<a href=""https://ver-1-0.net/2017/11/07/web-structure-browser/"">– ブラウザの役割について – プログラミングを始める前に知っておいて欲しいWebサイトの仕組み</a>
<h2>サーバ</h2>
についてのお話です。

<a href=""https://ver-1-0.net/2017/11/10/web-structure-about-server/screen-shot-2017-11-09-at-21-32-15/"" rel=""attachment wp-att-1202""><img class=""alignnone size-full wp-image-1202"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/Screen-Shot-2017-11-09-at-21.32.15.png"" alt=""サーバの意味"" width=""593"" height=""253"" /></a>

&nbsp;

&nbsp;

この画像にもあるように、
私も最初のうちはこのサーバという
言葉に慣れませんでした。
（知った風な感じで使ってはいましたが）

今回の記事ではサーバとはなんなのか。
また、Webサイトの中ではどういう役割があるのか
ということについて書いていきたいと思います。

※アイキャッチ画像でいう右上部分の話です。

&nbsp;

[after_intro]

&nbsp;
<h2 class=""chapter"">サーバーとは</h2>
サーバーというのは、
役割の名前と考えて頂ければ良いと思います。
（クライアントが通信をする先と考えても良いです）

おおかたの内部の構造は、
みなさんが<strong>個人でお使いのパソコンと同じ構造</strong>で、
<strong>用途によって呼ばれ方が違う</strong>ということです。

またまた、役割によってさらに細分化されりします。

&nbsp;
<h3>DBサーバ(ディービー・サーバー）</h3>
MySQLやPostgresSQLがダウンロードされたデータベース用のサーバ

&nbsp;
<h3>WEBサーバ(ウェブ・サーバー）</h3>
外部からのアクセスを処理するサーバ

&nbsp;
<h3>ファイルサーバ(ファイル・サーバー）</h3>
ファイル共有の為に設置されているサーバ

&nbsp;

皆さんお使いのパソコンがサーバと呼ばれないのは、
HTTP接続できるように外部に公開していたりするわけではないからで
皆さんが自信のサイトを外部に公開してしまえば、
それらはサーバと呼べてしまいます。

&nbsp;

※実際には中規模〜大規模のサービスの
サーバは24時間365日稼働する必要があるので、
一般的に個人のパソコンより性能が高かったり
停電や落雷などに対応できるような作りになっています。

&nbsp;

&nbsp;
<h2 class=""chapter"">サーバーのWebサイトでの役割</h2>
&nbsp;

サーバーは、
Webサイトとしての役割です。
<a href=""https://ver-1-0.net/2017/11/07/web-structure-browser/"">前回</a>の記事や<a href=""https://ver-1-0.net/2017/11/07/web-structure/"">前々回</a>の記事で説明したように、
クライアントからリクエストを受け取って、HTMLを返却する役割があります。

&nbsp;

また、サーバの構造は
下記のようになっており、
OSの中に、
WebサーバであるApacheやNginxがあり、
その中にデータベースとアプリケーションがあります。

<a href=""https://ver-1-0.net/2017/11/10/web-structure-about-server/%e3%82%b5%e3%83%bc%e3%83%8f%e3%82%99%e3%83%bc%e3%81%ae%e6%a7%8b%e9%80%a0/"" rel=""attachment wp-att-1208""><img class=""alignnone size-full wp-image-1208"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/サーバーの構造.png"" alt=""サーバーの構造"" width=""661"" height=""603"" /></a>

&nbsp;

&nbsp;

&nbsp;

これらの構造が連動して、
レスポンス(HTML)を作ってリクエスト元に返します。

流れとしては、

<strong>外部のクライアント→Webサーバ→APP（PHPコード)→DB</strong>

<strong>→APP(PHPコード）がデータベースのデータなどを元にHTMLを返却</strong>

と言うようになります。
※データベースは介さない場合もあります。

&nbsp;

また、
ちなみにプログラミングというのは、
ここの<strong>アプリケショーンを作り上げる、開発する作業</strong>になります。
（javascriptなどのクライアント側のプログラミングはまた別ですが）

&nbsp;

図では、
PHPで作られたアプリケーションを想定していますが、
そのほかのRuby,Python,Java,Cなどでも
基本的な構造は同じです。

&nbsp;

&nbsp;
<h2 class=""chapter"">サーバーでHTMLを作成する</h2>
&nbsp;

では少しコードも載せつつ説明していきます。
まずHTMLのコードを紹介します。

&nbsp;

&nbsp;

&nbsp;

<strong>HTMLは</strong>

<strong>タグというもので構造化されたファイル</strong>で

例えば、
<strong>titleというタグで囲まれた部分のテキスト</strong>が
そのページのタイトルになり、
ブラウザのタブ部分に表示されます。

&nbsp;

また、
このHTMLファイルは
<strong>「Hello World!!」という文字列を表示するもの</strong>でもあります。
<pre><code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Hello World&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;p&gt;Hello World!!!&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
&nbsp;

実際に利用されているHTMLはこれより複雑ではありますが、
サーバーは簡単に言うとこのようなファイルを生成して、
クライアントに送信しています。

しかし、これは静的なファイルと呼ばれ、
クライアントがリクエストする前に生成されているので
プログラムの出番はありません。

実際のWebアプリケーションでは
動的にページを生成するので
下記のようなぺージになります。
<pre><code class=""language-markup"">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Hello World&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
  &lt;p&gt;&lt;?php echo date('Y-m-d'); ?&gt;&lt;/p&gt;
	&lt;p&gt;Hello World!!! &lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
&nbsp;

&nbsp;

下記のような行が追加されていますが、
<pre><code class=""language-php"">&lt;p&gt;&lt;?php echo date('Y-m-d'); ?&gt;&lt;/p&gt;
</code></pre>
&nbsp;

この &lt;?php ?&gt;で囲まれた部分が
<strong>実際のPHPのコード</strong>になり、
この部分が実際にwebサイトにアクセスした瞬間の日付を表示してくれます。

&nbsp;

&nbsp;

また、
データベースと連携してページを表示する場合は、
&lt;?php ?&gt;この間にデータベースからデータを取得する
ような処理を書いてHTMLの中に結果を埋め込みます。

&nbsp;

サーバ側のエンジニアの主な仕事はこの
データベースからのデータ取得部分や、
取得したデータの整形・加工などをコードで実現することになります。

フロント側のエンジニアと言うのも存在してそれらの
方々は、クライアント側で動くプログラムのコーディング
が主な仕事になります。

&nbsp;

&nbsp;

&nbsp;

&nbsp;

最後に、
上にコードを貼りましたが、
<strong>このPHP部分を書いている時に実際の処理などを</strong>
<strong> イメージできる</strong>かどうかでプログラミングの理解度というのは
変わってきます。
<strong>（よりリアルにイメージできるようになるのでハラオチし易い）</strong>

&nbsp;

&nbsp;

「こういうコードをかくとデータベースにもアクセスしてる」

&nbsp;

などのようにデータの流れがイメージできているというのが
理想の状態になります。

<strong>二次元エンジニア</strong>にならないよう
コードの先をイメージしながらコーディングできるよう
になりましょう。

&nbsp;

&nbsp;

&nbsp;
<h2 class=""chapter"">まとめ</h2>
&nbsp;

最後で、
やっとプログラミングらしいことが出てきましたが、
プログラミングというのは
システムの一部でしかないということは
わかりましたでしょうか。
（一応三部作のように記事を書いたので）

&nbsp;

プログラミングというのは、
アプリケーションを作るというWebシステム全体の
一部になり、
エンジニアというのは
そのほかの膨大な項目のものを意識しながら
コーディングする必要があります。

プログラミングを勉強して
<strong>自分がイメージしたものを作ること</strong>だったり
<strong>それを学び上達する過程や新しい技術を試してみる</strong>と言うのはとても
楽しいものなので、
まだあまり触ったことのない人には
ぜひこの世界に踏み込んで頂きたいと思います。

が、

その道中
<strong>「ここはどこ？」「私はだれ？」状態
（今学んでいる内容がなんのためなのか、何に役たつのかわからない状態）</strong>

に
陥ってしまうことを避ける為にも、
アイキャッチのようなwebアプリケーションの全体像をイメージしながら
プログラミング学習をすると
より楽しい学びの時間になるはずです。

ぜひ、
立体的でよりリアルなイメージを持ちながら
プログラミングをしてみてください。

では。

&nbsp;
"
"1181","2017-11-07 22:30:45","2018-01-28 14:53:27","- ブラウザの役割について - プログラミングを始める前に知っておいて欲しいWebサイトの仕組み","web-structure-browser","https://ver-1-0.net/wp-content/uploads/2017/11/Untitled-3.png","engineering::::for-beginner","&nbsp;

今回は、
プログラミングを始める前に
Webサイトの仕組みを知ろうと言うことでまず一番
身近な

<strong>ブラウザ</strong>

について説明します。
アイキャッチ画像で言うところの
クライアント側画像左下部分の話になります。
現在地を見失わないようにお願いします。

仕組みを知ることの理由みたいなものは
↓↓↓ここに書いています。
<a href=""https://ver-1-0.net/2017/11/07/web-structure/"">プログラミングを始める前に知っておいて欲しいWebサイトの仕組み</a>

ブラウザと言うのは割と現在身近になっていて、
ポピュラーなブラウザを上げてみると
Google Chrome ,
Safari ,
Internet Explorer
などなどになります。

<a href=""http://gs.statcounter.com/browser-market-share"">StatCounter</a>で
日本のシェアをみてみると、
Chrome, Safari, IEの順で利用されているようですね。

<a href=""https://ver-1-0.net/2017/11/07/%e3%83%96%e3%83%a9%e3%82%a6%e3%82%b6%e3%81%ae%e5%bd%b9%e5%89%b2%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6-web%e3%82%b5%e3%82%a4%e3%83%88%e3%81%ae%e4%bb%95%e7%b5%84%e3%81%bf/statcounter-browser-jp-monthly-201610-201710-bar/"" rel=""attachment wp-att-1194""><img class=""alignnone size-large wp-image-1194"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/StatCounter-browser-JP-monthly-201610-201710-bar-1024x576.png"" alt=""日本でのブラウザのシェアのグラフ"" width=""700"" height=""394"" /></a>

&nbsp;

&nbsp;

これらそれぞれのブラウザはもちろん
違う機能を備えていますが、
ある特定の共通の機能を備えていて、
それがブラウザたる所以になります。

&nbsp;

[after_intro]

&nbsp;
<h2 class=""chapter"">ブラウザはHTMLを解析して、人が読みやすい形に表示するツール</h2>
&nbsp;

&nbsp;

&nbsp;

ブラウザはクライアント側のツールで
クライアントツールと呼ばれるように、
サーバから返却されるHTMLをみやすいように変換して、
表示をしてくれます。

&nbsp;

&nbsp;

試しにお使いのブラウザで右クリックを押して、
「ソースを表示する」のような選択肢をクリックすると
新たなウィンドウかタブが表示され、不等号などで区切られた
ファイルが表示されそれがHTMLファイルになります。

<a href=""https://ver-1-0.net/2017/11/07/%e3%83%96%e3%83%a9%e3%82%a6%e3%82%b6%e3%81%ae%e5%bd%b9%e5%89%b2%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6-web%e3%82%b5%e3%82%a4%e3%83%88%e3%81%ae%e4%bb%95%e7%b5%84%e3%81%bf/screen-shot-2017-11-07-at-21-54-07/"" rel=""attachment wp-att-1186""><img class=""alignnone size-full wp-image-1186"" src=""https://ver-1-0.net/wp-content/uploads/2017/11/Screen-Shot-2017-11-07-at-21.54.07.png"" alt=""ブラウザでHTMLを見た際の例"" width=""773"" height=""716"" /></a>

この一見読みづらい構文で書かれたものが、
HTMLファイルでそれらを見やすいように整形して
表示してくれるツールが<strong>ブラウザ</strong>になります。

&nbsp;

ブラウザと聞くと
「え、インターネットに接続して、
Googleで検索したり、
ネットサーフィンするものじゃないの？」
と言うようなイメージがあるかとは思いますが、
ブラウザはHTMLを解析して、
見やすい形に表示すると言う大きな機能を備えています。

&nbsp;

&nbsp;

ちなみにブラウザは
普通の自分のパソコンのテキストファイルも表示することができます。

気にになる方は、適当なテキストファイルを
ブラウザにドロップ&amp;ドラッグなどしてみてください。
（あまりにそのまま表示されるので感動は少ないと思いますが・・）

&nbsp;

&nbsp;
<h2 class=""chapter"">ブラウザはHTTPプロトコルを利用してサーバにリクエストを送るツール</h2>
&nbsp;

みなさんがネットサーフィンする場合と言うのは、
Googleなどの検索サイトに
<strong>「ブラウザ 仕組み」</strong>などのキーワードを入力して利用する場合が
多いはずです。

&nbsp;

&nbsp;

が、
本来的にブラウザは
先に説明したHTMLを解析するツールであると同時に、
<strong>サーバにこのURLのページをくださいとリクエストを送ったり、</strong>
<strong> サーバからHTMLファイルを受け取ったりという機能</strong>が
あります。

&nbsp;

&nbsp;

例えば、
みなさんがブラウザの上の方にあるテキストバーに
URLを打ち込んだ場合と言うのは、
Enterを押した瞬間に入力した「http://ver-1-0.net」のようなURLリクエスト
を送るという意味になります。

&nbsp;

&nbsp;

そこでそのリクエストを受けたサーバが、
URLに適したHTMLを返却し、
そのHTMLを受けたブラウザがそれを表示するというような
流れになっています。

&nbsp;

&nbsp;

また、
各Webサイトのリンクやボタンを押すと、
画面が切り替わる場合がありますが、
その瞬間も同様にHTTPのリクエストを送っています。

&nbsp;

&nbsp;
<h2 class=""chapter"">まとめ</h2>
&nbsp;

&nbsp;

ここまでは、
ブラウザが
<ul>
 	<li>HTMLファイルを解析して見やすく表示してくれていること</li>
 	<li>URLを元にHTTPリクエストを送っていること</li>
</ul>
を説明しましたが、
ハラオチされましたでしょうか？

<strong>HTTPとはなんぞや？</strong>と言う疑問をもたれる方もいらっしゃる
とは思いますが、
ここでは、
Webサイトをシステム全体でとらえた場合に

<strong>ブラウザと言う登場人物がいて、</strong>

<strong>そいつが</strong>
<strong> 「Webページ（HTML）をください」と言うリクエストを送って</strong>
<strong> サーバがHTMLを返却して</strong>

返ってきた<strong>HTMLを人が見やすいように表示する</strong>と言うことだけ
覚えて頂ければ良いです。

&nbsp;

&nbsp;

HTTPなどの説明はまた別途しますので、
とりえあえこの記事はここまでとします。

[after_article]"
"911","2017-10-24 12:08:38","2018-01-30 23:18:05","webpackでnormalize.cssを読み込む方法","webpack-normalize-css","http://ver-1-0.net/wp-content/uploads/2017/10/925815.jpg","engineering::::design","&nbsp;

今回は、
<strong>webpack</strong>で<strong>normalize.css</strong>を読み込む方法を紹介します。

<strong>webpack</strong>とはなんぞやや
<strong>normalize.css</strong>とはなんぞやということは他のサイト
の説明に譲るとして、
この記事ではとりあえず、
<strong>normalize.css</strong>を
読み込むというところを第一目標にして書いていきます。

[adsense_double_rect]

&nbsp;
<h2 class=""chapter"">早速環境準備 - WebPack,CSSLoarder,StyleLoaderをインストール</h2>
&nbsp;

&nbsp;

サンプル用のプロジェクトを作成
+
<strong>webpack</strong>と<strong>style-loader</strong>、<strong>css-loader</strong>をインストール
<pre><code>mkdir webpack-normalize-demo
cd webpack-normalize-demo &amp;&amp; npm init -y
</code></pre>
&nbsp;
&nbsp;
<pre><code>
npm i -D webpack style-loader css-loader
</code></pre>
&nbsp;

&nbsp;

cssを読み込むにはwebpackに加えて、
style-loader、css-loaderというモジュールが必要なので、
合わせてインストールします。

&nbsp;

&nbsp;

インストール後
webpack.config.jsにも設定を記述します。
（webpack.config.jsは自分で作成します）
<pre><code>module.exports = {
  entry: `./index.js`,
  output : {
    path     : `${__dirname}/`,
    filename : 'bundle.js'
  },
  module : {
    rules : [
      {
        test: /\.css/,
        loaders: [
          'style-loader', 
          {
            loader: 'css-loader',
            options: {url: false}
          }
        ]
      },
    ]
  }
};
</code></pre>
&nbsp;
&nbsp;
&nbsp;
<h2 class=""chapter"">normalize.cssをnpmでインストール</h2>
&nbsp;

&nbsp;

<strong>normalize.css</strong>もnpmでインストールできてしまうので
インストールしましょう。
<pre><code>npm i -D normalize.css
</code></pre>
&nbsp;

あとは、
エントリポイントに
index.js
<pre><code>echo ""import 'normalize.css'"" &gt; index.js
</code></pre>
&nbsp;

と記載すれば、
normalize.cssがバンドルされた、bundle.jsができるので、
それをpublic/index.htmlなどで
読み込めば合わせて、normalize.cssも読み込めます。
publick/index.html
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=""UTF-8""&gt;
    &lt;title&gt;Demo&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id=""root""&gt;&lt;/div&gt;
    &lt;script type=""text/javascript"" src=""./bundle.js""&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;

</code></pre>
以上です。
&nbsp;
&nbsp;
&nbsp;
[adsense_double_rect]"
"765","2017-10-05 00:04:32","2017-12-22 22:46:11","プログラミングってなに？プログラミングを勉強する前にプログラミングで何をするか考えよう。","what-do-you-want-with-program","http://ver-1-0.net/wp-content/uploads/2017/01/5ntkpxqt54y-sai-kiran-anagani.jpg","engineering::::for-beginner","&nbsp;

どうも、
健康診断で肝臓の調子があまりよくなかった
@version1です。

&nbsp;

&nbsp;

さて、
昨今プログラミング教育の学校での必修化などなどが
ぼちぼち話題になってきたり、
ITリテラシーがなんちゃらかんちゃらとか
将来のビジネスマンはプログラミングができないと、
これからはITだ
などなど、
時代の流れもあってがよくよくプログラミングという言葉
を耳にします。

&nbsp;

そんな中、一エンジニアとして思うことは、

<strong>で、プログラミングを覚えてどうするの？</strong>

&nbsp;

というところです。

&nbsp;
<p class=""chapter""><strong>ゴールはどこか？必要な知識はなにか？それはどこで学べるのか？</strong></p>
&nbsp;

&nbsp;

確かにプログラミングって自分のイメージしたものが
作れたりとかして<strong>すっごい面白い</strong>し熱中できることなんですけど、
プログラミングを必修化のニュースや
これまでは営業職だけどプログラミングがやりたいので
転職したいです。というのも聞いたりするのですが

それを聞くたびに

<strong>それらのゴールはどこなの？</strong>

ということを日々感じております。

（2030年とか2040年頃の社会人が
みんなプログラマーになるわけではないし、
プログラマーだけがシステム開発に関われる仕事でもないし・・）

[after_intro]

プログラミングというと
webサイトを作ったり、iPhone・アンドロイドのアプリを
作ったりという所が一般的にイメージ
されるとは思うのですが、
システム開発におけるプログラミングというのは
一部の側面でしかないです。
例えば
「webサイトの構築」を例にとると
覚えないといけない知識や作業はざっと以下のようになります。
<ul>
 	<li>gitなどのソース管理の知識。デプロイ含む。</li>
 	<li>ローカル開発環境用の仮想環境の知識。</li>
 	<li>IPアドレスやSSHなどネットワークの知識。</li>
 	<li>PHP,Ruby,Javaなどプログラミング言語の文法などの知識。</li>
 	<li>フレームワークに関する知識。</li>
 	<li>HTTPなどwebプロトコルに関する。</li>
 	<li>ローカル開発環境用の仮想環境の知識。</li>
 	<li>sshの接続知識。IPアドレス。ネットワーク</li>
 	<li>プログラミング言語に関する知識。文法など</li>
 	<li>何か一つのフレームワークに関する知識。</li>
 	<li>httpに関する知識。GET,POST。</li>
 	<li>html,css,javascriptなど画面側の言語。</li>
 	<li>unixコマンド。コンソール操作。</li>
</ul>
&nbsp;

&nbsp;

&nbsp;

[adsense]

&nbsp;

&nbsp;

これらは主に開発面のことだけでほかにも
画面の設計したり、、、集客の方法を考えたり、、
などなど必要な知識はたくさんあります。

おそらく皆さんが考えるプログラミングを勉強したいというのでは、
”プログラミングの文法を勉強したい”ということではないはずです。

&nbsp;
<h2 class=""chapter"">必要な知識も行動も目的次第</h2>
&nbsp;

&nbsp;

必要そうな技術を列挙して、
「ゲッ」と思わせてしまったらごめんなさい。
別に驚かせたいわけではありません。
列挙してみるとやることが多く、ひるんでしまうかもしれませんが、
目標を「webサイト構築」に絞ると少なくとも
「プログラミングを勉強したい」というぼんやりとした、
目標を持った状態から抜け出して、
実際の行動に動き出せるのではないでしょうか。

&nbsp;

私は、「一つのウェブサイトを自分の力で作成し、運営できるようになりたい」

という目標があったので、
今も自分でサイトを開発して公開しています。

サイトのデザインや、サービスとしても
まだまだですが、
別にエンジニアとして就職するだけであれば、
自分のプライベートの時間を使って
プログラミングしているので、
少なくとも「〜したい」のままで止まっているだけではない
だけましだと思っています。

&nbsp;

<strong>「プログラミングを勉強したい」</strong>
と考えている人は、
より目標を明確にすると勉強のレベルが一歩先に進むのではないでしょうか？

&nbsp;

生意気な意見を書いてしまいましたが、
私の感じている所が少しでもみなさんの為になればと思います。
以上です！！

&nbsp;

&nbsp;

[adsense]"
"779","2017-10-09 09:38:45","2018-08-25 22:19:45","プログラミング初心者の人が身につける習慣","what-prgm-begineer-pay-attention","http://ver-1-0.net/wp-content/uploads/2017/02/6njoebtarec-lee-campbell.jpg","engineering::::for-beginner","&nbsp;

どうも@version1です。
今日はプログラミング初心者の人
に身につけてもらいたい習慣について、
考えてみました！！

&nbsp;

私自身も、エンジニアとしてはまだまだで、
あまり偉そうなことを言える立場ではないのですが、
今までやってきて大切だと感じたことを記事として
残しておこうと思います。

&nbsp;

[adsense_double_rect]

&nbsp;
<h2 class=""chapter"">エラーが出たらまずログを確認</h2>
&nbsp;

&nbsp;

これ以外とできない人が多いです。。

これができていないと
「すみません、なんかエラーになっているですけど・・・？」
というSOSしか出せません。

&nbsp;

エラーが出た時に最初にログを確認する習慣がついていると
「こんなエラーが出てるんですけど？何か原因わかりますか？」
というような質問ができます。

&nbsp;

本当に始めたころばかりのうちは良いですが、
それなりのキャリアがあるのに前者のような
質問をしてくる人は、
エラーのメッセージとかエラーが出た状況を
イチイチヒアリングしないといけないので
<strong>かなり面倒臭いです。</strong>

&nbsp;

後者であれば、自分がすでに経験したメッセージかどうかを
即座に確認できて、アドバイスがしやすく、
質問されてもかなり気持ちよく対応できます。

コンソールを触っている時のエラーメッセージでも、
webサイトで出るエラーでもいいのですが、

<strong>エラーが出たら、まずログかメッセージを確認する。</strong>
という習慣をまずは身につけましょう。

慣れてきたら、
<strong>apacheとかDBのミドルウェアのログ</strong>とかの居所を突き止めて
（だいたいググれば出てくる）
そこのエラーを元に調査をすすめてくれると良い感じですね。

これが習慣付いてくると、
自分の開発中のエラー以外にも人が出したエラーへの対応や
障害対応への<strong>スピードが上がっていきます。</strong>
エラーの箇所を特定しやすくするためにメッセージを出しているのに、
それを読まないでエラーに対処するような
愚かなことはしないほうが良いですよね。

&nbsp;
<h2 class=""chapter"">コードをよく読むこと</h2>
&nbsp;

&nbsp;

人のコード読むのって辛いですよね。。
自分の書き方と違っていて、
なんかスルスルと読めなくって億劫になりがちです。

<strong>コードを書くこと</strong>は楽しくて誰でもやると思うので、
ここには、書きません。

なので、
ここではあえて<strong>コードを読むこと</strong>を強調したいです。

特に、
<strong>機能修正など既存のコードに手を加える場合</strong>って、
本当にこれをしないと<strong>バグや冗長なコードの山</strong>を築くことに
なります。

&nbsp;

既存のコードに手を加える場合は、
必ず、周辺のコードを読んで周りのコードの挙動を理解してから
コードの修正方針を決めてから、
コードを修正するようにしましょう。

自分が直すメソッドしか読まないとかはなしです。

&nbsp;

修正するメソッドが3箇所から呼ばれていたら、
どういう状況でそのメソッドが呼ばれているのかと
呼び出し元のメソッドの挙動は
絶対に確認すべきです。

&nbsp;

修正方針を決める時の
チェックポイントは以下3つになります。

&nbsp;
<ul>
 	<li>修正するメソッドがどこから呼ばれているのか</li>
 	<li>自分が作ろうとしてるメソッドと同じようなメソッドはないか</li>
 	<li>呼び出し元の挙動</li>
</ul>
&nbsp;

&nbsp;

挙動ってどの程度理解すれば良いの？
という疑問あると思いますが、
実際に動かしてみて<strong>画面がどのように変わる</strong>かや、
<strong>各変数にどういう形でデータが格納されるのか</strong>
というのは理解しておく必要があります。

これら三つのことを意識しておくと
修正する箇所も最低限に絞れるはずです。

余計な変更を加える必要もないので
バグを出してしまう可能性も狭められるのではないでしょうか。

&nbsp;

&nbsp;
<h2 class=""chapter"">技術は手段であることを意識する</h2>
&nbsp;

技術はあくまでも手段です。

&nbsp;

たまに
「プログラミングの入門書を一通り勉強しましたが、
次何をすればいいですか？」
という人がいますが、
これは完全にインプットが目的となってしまっていいます。

何か作りたいものがあって、
その手段を学ぶのがプログラミングなので、
それを学ぶこと自体が勉強になってしまっている
ものは続かないです。

こういう方は
ひとまず自分のあったらいいなと思うものを
作ってみるのが良いです。

僕は、
特に作りたいものが思いつかないものは
電卓とか身近なものを作ってみますね。

<a href=""https://ver-1-0.net/2017/04/09/electron-calculator-1/"">Electron の勉強がてら電卓を作ってみた~その① &lt; インストール編 &gt;~</a>
<a href=""https://ver-1-0.net/2017/04/10/electron-calculator-2/"">Electron の勉強がてら電卓を作ってみた~その② &lt; 実装編 &gt;~</a>

&nbsp;

「Railsやってます。」
「CakePHPやってます。」
という人もいますが、
その先が考えられてないとダメです。

明確に作りたいものがないけど、
Rails,CakePHPなどができれば、
エンジニアとして就職しやすいので
そういう言い方をするのかと思います。

「〇〇という会社に転職したいのでRailsやってます。」
とかだと、
プログラミング自体をしっかり手段として
位置づけられていて良いと思います。
（就職・転職するので、あれば未経験可のところから始めるというのも
ありかとは思いますが・・・）

&nbsp;

すでにエンジニアとして
働いているけど
「なんか違うな・・」
と思っている人もいるかもしれませんが、
そもそもなんでこの仕事選んだっけ？
や
目標を実現するために自分のスキルが
どのように使えるか考えられると良いのではと思います。

&nbsp;

こういうのは一発で答えを出すのが難しいので、
定期的に考え続けられると良いですよね。

&nbsp;
<h2 class=""chapter"">まとめ</h2>
&nbsp;

以上、
初心者に必要な習慣三つを偉そうに書きましたが、
これが現時点での私の答えです。
<ul>
 	<li>エラーが出たら、まずログかメッセージを確認する</li>
 	<li>コードをよく読む</li>
 	<li>技術は手段であることを意識する</li>
</ul>
&nbsp;

どれも重要なことだと思うので、
記事にしました。
（自分のメモとしての意味もあるかと思いますが）

みなさんはどうですかね。
これが現状の私の意見です。

自分も書きながら
「これできてるかなぁ」と
自問自答しながら書いていますw

では、
以上です。

[adsense_double_rect]"
"1933","2018-02-23 22:44:23","2018-10-08 08:39:07","私がフリーランスになった理由","why-i-become-engineer","https://ver-1-0.net/wp-content/uploads/2017/12/active_report.jpg","freelance","&nbsp;

11月からフリーランスとして開業したので、(最初の1ヶ月はほぼニートのような感じ)早いものですでに3ヶ月半経っています。

徐々に慣れてきている部分もありますが、だんだんと独立当初の時と変わっている部分もあるので、ここらへんでなんでフリーランスになったのかというのをまとめて置ければなと思い書いてみました。

[after_intro]

&nbsp;
<h2>自由な働き方がしたかった</h2>
&nbsp;

月並みですが、フリーランスは自由な働き方ができます。自分の選択次第で、たくさん働いたり、休日を増やしたり、家で仕事したり、出先で仕事したりというように、自分の理想のスタイルを作りこんでいくことができます。

私自身可能であれば、場所を選ばずに仕事ができるようになりたいのでリモートで仕事ができると良いななんて考えています。そのため、クライアントからの報酬とは別で自分で報酬を得られる仕組みを作っておけばさらに働き方の自由度が出てくるはずと考えて、自身で収益があがるような仕組み作りにも時間を割いています。

&nbsp;
<h2>会社員として貴重な時間をかけた対価として得る報酬が少なすぎる</h2>
&nbsp;

会社員として週5日で働いて人生のほとんどは会社での生活に時間を使うわけですが、それだけかけて500万円とか600万円というのはちょっと違うよねという疑問がずっとありました。

「それだけしかもらってないならそれだけの価値しか出してないんじゃないの？」という反論もあり、それは正しい部分もあるとは思いますが、10年20年必死ではたらいて経験も積んだ結果自分の人生の時間が500万円とかで買われているっていうのは悔しいですよね。

会社員には他の福利厚生や社会保障などが手厚いので、年収がそのままその人が得ている報酬かといわれるとそうではないかもしれませんが、職場を選べない、働く時間をえらべないなどの不自由のマイナスで相殺されるのではなんてことも考えています。

会社員でいる以上一定の時間拘束されて、その時間が換金されるという構造は変わらなそうなので、フリーランスという働き方を選びました。

&nbsp;
<h2>世の中には面白いことが転がっているはず</h2>
&nbsp;

やっぱりネットで情報を漁っていると世の中色々と面白いことがあります。会社員として社内の仕事を回すのに手一杯になる一方で世界ではブロックチェーンやAI、などの最新技術が進歩して刻々と社会は変わりつつあります。

そんななかで、会社員として忙しくすごして変化に乗り遅れるというのがすごくもったいないななんて感じていました。同じ場所で長く過ごすと、そこにしか世界がないように思えてきますが、外を見て他の環境に移ってみると別の視点でモノが見えるようになってきます。

日々の雑事に忙殺されずに、変化に対応できるためには可能な限りに自分で使える時間を伸ばして暇にしておくことが一番良いんじゃないですかね。

&nbsp;

&nbsp;
<h2>どちらの選択をしても大変なので、自分のやりたい方を選ぼう</h2>
&nbsp;

こういう形でさらっと書いてみて、フリーランスになってから3ヶ月ほど経ってしまいましたがフリーランスになるには割と悩みました。

会社員から独立するとなる

「食べて行けなくなったらどうしよう・・」とかいう根拠のない不安が頭をよぎるのですが、今回はなんとかそれを断ち切って独立することができました。

決断できた理由は、学生の頃からずっと独立したいと思い続けてきたことだったというのも一つあるのですが、「会社員でもフリーランスでもどちらを選んでも大変なのは変わりないので、自分のやりたい方を選ぼう」と思えたことが一番でした。

せっかくの人生なので、後悔しないように行きたいです。

&nbsp;

&nbsp;
"
"2102","2018-07-16 10:38:15","2018-09-02 13:09:21","TDDとかBDDとかあるけど、個人的に感じているテストコードを書く7つの理由","why-test-code","http://ver-1-0.net/wp-content/uploads/2017/01/5ntkpxqt54y-sai-kiran-anagani.jpg","colum::::engineering","&nbsp;

テストコードといえば、テストコードが必要か必要でないかというのはちょいちょい議論になるものではありますが、個人的には正しい開発を行う上では必ず必要になってくるものだと思っています。

唐突に自分の意見を書いてみましたが、

<strong>「じゃあなんで、テストコードを書くの？？？」</strong>

と聞かれるといくつかのメリットをあげることはできると思いますが、テストコードのない現場の忙しい開発者たちを相手にテストコード導入のメリットをあげて説得できるかというところにあまり自信が持てなかったのでテストコードを書くメリットを自分なりに整理してみました。

[after_intro]

&nbsp;
<h2>当たり前だけどプログラムがちゃんと動いているかを効率的にチェックできる</h2>
&nbsp;

これは、まあ当たり前というかこれが達成されていなかったらテストコードのある意味がないですよね。

ただ現在のシステムで、作った後に手を加えないシステムというのはほぼないわけで、日々訪れる仕様変更や機能改善のためになんどもコードが書き換えられていきます。また、コードというのは保守期間やシステムの年齢に対して増大して行く傾向にあるので、最初は少人数でも品質を担保できていたコードがどんどん大きく複雑になり管理が難しくなってきます。

そんななかで、GUIベースでの統合的なテストとはいわずとも<strong>モジュールレベルで仕様通り動作しているかどうかをきっちり担保できていると日々の開発を進める上で大変心強いです。</strong>

サーバーから意図しないレスポンスが返ってくるのでみてみたところ、既存のバグでそれの調査と修正で予定した多くの工数をとられて、当初の見積もりをオーバーするとかいうのって本当にイライラしますよね。既存のコードが正しく動いていること（完璧にというのはなかな難しいですが）を担保できていない中での開発というのは非常にストレスがたまりますよね。

<strong>日々の開発を行なっている上で既存のバグが三つも四つも見つかるような現場ではテストコードの導入をオススメします。</strong>

&nbsp;
<h2>デプロイ作業が自動化できる</h2>
&nbsp;

これはシステムの品質というより作業工数の効率化観点ですが、<strong>テストコードである程度のカバレッジがないと自動デプロイって怖くてできないですよ。</strong>

静的型付けの言語とかであればよいですが、rubyやphpなど実際に動かしてみるまで構文エラーとかをすくえない言語では、本番でundefinedエラーなどのしょうもないエラーが起きてしまうのは嫌ですよね。テストコードで8割程度のカバレッジをもっておけば、デプロイの前に自動でテストが回るようにしてテストを通過した場合だけデプロイするという形でしょうもないエラーの多くを防ぐことができます。

テストがない状態でもデプロイの自動化はできますが、ちょっと怖くてできないですよね。。テストコードのないプロジェクトはこのように開発の運用にも影響を与えるので、きっちりテストを書く習慣をつけておきたいです。

&nbsp;
<h2>バージョンアップが楽になる</h2>
&nbsp;

テストコードがあるとバージョンアップが楽になります。バージョンアップする前には前バージョンとの変更点を確認して、修正してという流れになると思いますが、漏れとか怖いのでひとつずつ確認していきますよね。

そんな時にテストコードがあると完璧とはいかないまでも、人の打鍵では確認しづらい細かい部分までコードがバージョンアップの影響を受けていないか確認することができます。

まだ生まれたばかりのライブラリとかを使っていると結構バージョンアップの頻度が高く追従するのが難しかったりしますよね。かといって、古くなってしまったシステムをメンテナンスするのも嫌ですし、、、

<strong>テストコードを日頃から書いておくとバージョンアップする際には必ずテストコードのありがたみを感じることができるので、必ず報われることを信じながらテストコードを書いていきましょう。</strong>

&nbsp;
<h2>エンジニアとして一定の評価をされる</h2>
&nbsp;

フリーランスの面接でも割ともともとの現場のカバレッジを聞かれたりしたのですが、外からのみられ方としてテストコードがかける人なのか、<strong>テストコードを書く意義をわかっているかどうか</strong>というのはみられているように思います。

知り合いのフリーランスの方でも現場に入る前にそのプロジェクトのコードカバレッジがどれくらいか聞くそうです。テストコードのない現場だと、こっち直したらあっちが壊れてとかいうなかなか辛い状態での開発になるのでそういうのを警戒してあらかじめ開発環境が整っている環境かどうかというのは働く先での評価の基準になるようです。

転職の面接の際にも<strong>前職ではCIを導入していて、マスタマージと共に自動デプロイが走っていましたとかいうと「ちゃんとした現場で開発してきているな」という評価にはなると思います。</strong>

「テストコード０の現場からカバレッジを8割にしてCI環境を整備しました！」というほどでなくても、一エンジニアとしてテストコードをかける、書いた経験があるというのは非常に大事なことのように思います。

&nbsp;
<h2>コードがきれいになる</h2>
&nbsp;

テストコードを書いてみるとわかるのですが、コードにはテストの書きやすいコードと書きにくいコードが存在します。当然テストコードを書きやすいコードの方が好ましいわけですが、<strong>テストコードの書きにくいコードというのはだいたい一つのクラスやメソッド多くのことをやりすぎているコードです。</strong>

一つのメソッドであまりに多くのことをやろうとすると、人間の理解力を超越してコードを読むのが難しくなりますし、他のクラスへの依存も高まったり、重複の多いコードになりがちです。

これを防ぐために、テストの書きやすいコードを意識しながらコードを書くことができると単一責務を守った綺麗なコードができあがります。

<strong>テストの書きやすいコードというのが、自分でテストコードを書いていないと感覚がわかりづらいので、普段テストコードの書いていない人は今すぐにでもテストコードを書く習慣をつけられると良いと思います。</strong>

&nbsp;
<h2>リファクタしやすくなり、コードの質を保つ好循環が生まれる</h2>
&nbsp;

テストコードがあることによって既存のコードに手を入れてもテストコードがしっかり書いてあれば、自分では気づけない部分でテストがこけてくれて「あ、こっちも直さないといけないのか」となるので、リファクタ作業をするときも安心して作業をすすめることができます。

システム開発を進めているとどうしても納期に追われたりしてコードが汚くなっていきがちなのですが、<strong>テストコードがあるとリファクタへの心理的ハードルが下がるので、機能改修のついでのファクタなどができるようになってきて自然とシステム全体でのコードの質が保たれます。</strong>

ひとつずつテストコードを書いて行くの決して簡単な作業ではありませんが、ある程度カバレッジがあがってると上記のような好循環が作れるので、ぜひともテストコードの導入をオススメします。

&nbsp;
<h2>自分の書いたコードを見直す時間が作れる</h2>
&nbsp;

これは最近感じたのですが、テストコードを書く時というのは、プロダクトのコードをみながらコードを書いて行くので、自分の書いたコードをレビューしているよう状態になります。

自分で書いたコードって時間を置いてみると

<strong>「なんで、こんな酷いコードかいているんだろう？？」</strong>

と思うことありますよね。普段自分で仕事をしていて自分のコードを見直すことって意外となくて3ヶ月後とか半年後に同じ箇所に戻ってきて過去の自分の書いたコードで自己嫌悪に陥ったりするのですが、テストコードを書くことによってこれが短いスパンでできるようになります。

<strong>短いスパンで自分の過ちに気付けるので、次からコードを書く時にそこを気にしながら書くことができます。</strong>

これは自分がまだ未熟だからかもしれないのですが、コードって一発できれいなコードをかけるということが少なくて、一つの機能改善の中でも一度書いたものに納得がいかず再度書き直すなんてこともよくあります。

個人的には最初に書いたコードってどこか無駄があるので、それをまた書き直していくことでシンプルで無駄のないコードができあがると思っているので、書き直せば書き直すほど無駄のない筋肉質なシステムができあがるとも思っています。

なので、ひとつの開発の中で、
<ol>
 	<li>一旦動く形でコードを書いてみる</li>
 	<li>無駄な部分をリファクタする</li>
 	<li>テストコードを書きながら再度コードの見直し</li>
 	<li>納品物としてテストコードときれいに整頓されたシンプルなコードができる</li>
</ol>
みたいな順序を踏めると良いのではないでしょうか？（できる人は、1,2をまとめて一回でできてしまうのかもしれません。。というかテスト書きながらしっかり開発しているので全部一気にできるんですかね？？）

&nbsp;
<h2>まとめ</h2>
&nbsp;

以上私の考えるテストコードを書くメリットのまとめでした。
<ul class=""list"">
 	<li>当たり前かもしれないが、コードの挙動を効率的に確認することができる</li>
 	<li>デプロイ作業が自動化できる</li>
 	<li>バージョンアップが楽になる</li>
 	<li>エンジニアとして評価される</li>
 	<li>コードが綺麗になる</li>
 	<li>リファクタしやすくなり、コードの質を保つ好循環が生まれる</li>
 	<li>自分のかいたコードを見直す時間がつくれる</li>
</ul>
&nbsp;

まとめてみると、テストコードは現場的にデプロイの自動化で工数の削減ができたり、コードの質を担保できたりというチームよりなメリットもありますが、きれいなコードをかけるようになるとか自分の書いたコードを見直す時間が作れる、エンジニアとして評価されるなど個人的なメリットもあります。

テストコードに関しては、TDDだったら〜とかBDDだったら〜とか色々あるのかもしれませんが現時点個人的に感じているテストコードのメリットをまとめてみました。"
"1606","2017-12-16 22:00:52","2018-05-20 22:38:01","SMACSSでデモサイトのコード書いてみた","write-with-smacss","https://ver-1-0.net/wp-content/uploads/2017/12/smacss.jpg","engineering::::design","&nbsp;

前回の記事では、SMACSSの電子書籍をまとめてみました。
<a href=""https://ver-1-0.net/2017/12/10/learn-smacss/"">CSSスタイルガイドのSMACSSを勉強してみたまとめ</a>

今回は、書籍を読むだけでは理解が深まらないので実際にSMACSSを意識しながらコーディングしてみました。

&nbsp;

[after_intro]

&nbsp;
<h2 class=""chapter"">ランディングページを作ってみる</h2>
&nbsp;

今回は、題材としてランディングページのコーディングをしてみました。

ランディングページとは、LPと呼ばれたりもするので、広告や検索から訪れるユーザが最初にみるページのことです。

人間関係でも第一印象が大事と言われるように、商品とユーザが初めて出会う場所ですのでサイトのユーザに与える印象の大事な部分を担っています。

&nbsp;

今回はSMACSSを意識しながら書いてみて、悩んだところや、よかったところ、SMACCSでは表現しにくいところを知るための題材ですので、それほどユーザに与える印象とかビジネスライクな部分はあまり意識していないです。

&nbsp;

というか、私普段からバリバリcss書いていててcssでは誰にも負けません!!

という感じではないので私のコードはあくまでも私のコードで、これを参考にすれば大丈夫!!みたいな絶対的なものでなく、コーディングしてみましたーというようなのものなのでご了承ください。

&nbsp;

その点踏まえて、仕上げたページはこちらになります。

<a href=""https://ver-1-0.net/2017/12/16/write-with-smacss/smaccs/"" rel=""attachment wp-att-1608""><img class=""alignnone size-large wp-image-1608"" src=""https://ver-1-0.net/wp-content/uploads/2017/12/smaccs-1024x517.png"" alt=""smaccsの練習ページ。ファーストビュー"" width=""700"" height=""353"" /></a>

おぉ・・・

まぁありがちですね。
サイトは自分が開発してみたいなぁと思っている個人のタスク管理ツールをイメージして作りました。

レイアウトはシングルカラムレイアウトのよく見るランディングページという感じですね。

&nbsp;

ログインボタンやサインアップのボタンを押すとフォームが表示されたりするようにはしていますが、完全なるデモページなので、それ以上は進めません。

ご了承ください。

デモページのリンクはこちらです。
GitHubPagesで後悔しているので実際のデモがご覧いただけます。

<a href=""https://version-1.github.io/smacss-sample/example/default/"">https://version-1.github.io/smacss-sample/example/default/</a>

&nbsp;

ソースはgithubにあげておきました。
<a href=""https://github.com/version-1/smacss-sample"">https://github.com/version-1/smacss-sample</a>

&nbsp;

[mid_article]

&nbsp;
<h2 class=""chapter"">SMACSSしてみて気づいたこと</h2>
&nbsp;
<ul>
 	<li>境界線の引き方が難しい</li>
 	<li>moduleのソースが大きくなりがち</li>
 	<li>jsをどれくらい使うかでコードが変わりそう</li>
</ul>
&nbsp;
<h3 class=""section"">境界線の引き方が難しい</h3>
&nbsp;

これは単に慣れ次第でもう少し切り分けができるようになるかなとも思うのですが、他のcssの設計手法と同じように線引きが難しいと感じました。

何がレイアウトで何がモジュールなのかというのはやはりコーディングをしていて悩みました。

&nbsp;

カルーセルやアコーディオンなど明らかにわかりやすいのは良いのですが、ヘッダーやフッターはどこまでレイアウトのカテゴリで書くべきなのかというのは悩みました。

SMACSSを提唱している原本でもそこまで明確に線引きをしている訳ではないので、あくまでもセマンティック性の維持と保守性という目的から考えたベストエフォートを取っていくしかないのではないでしょうか。

&nbsp;

結果的にはレイアウトは最低限の大枠に留めて、ヘッダーやフッターの中のスタイルのほとんどは、モジュールで定義しました。

&nbsp;
<h3 class=""section"">モジュールのソースが大きなくなりがち</h3>
&nbsp;

LPをコーディングした結果以下のような構成になりました。

&nbsp;

<a href=""https://ver-1-0.net/2017/12/16/write-with-smacss/dir-structure/"" rel=""attachment wp-att-1611""><img class=""alignnone size-large wp-image-1611"" src=""https://ver-1-0.net/wp-content/uploads/2017/12/dir-structure-665x1024.png"" alt=""ディレクトリ構造"" width=""665"" height=""1024"" /></a>

&nbsp;

みてわかるようにSMACSSのカテゴリでシンプルに分類しています。
モジュールが全体の80%くらいになりそうですね。。

&nbsp;

もう少し大きいシステムになると管理画面とユーザの画面でスタイルを分けたりする必要があるので、管理者、ユーザ、共通、のような形で分けて各セクションごとにベース、レイアウト、モジュール・・・のように分けてしまう方法もありかもしれません。

&nbsp;

今回に関してはLPのみのコーディングでしたので、入れ子にせずフラットに分割しました。

スクショみてもわかるようにレイアウトは大まかなところ、モジュールは細かいところというような形で分担してしまったので、モジュールのコードが占める割合が大きくなっています。

大きくなること自体が悪いわけではないのですが、大きい分その中に冗長なコードが含まれているのではという懸念もあるので、ちょと不安になりました。

コードを書いていると

「これ、ステートじゃないよな」

「レイアウトでもないしな」

「じゃあモジュールか」

という感じで多くのコードがモジュールに流れつきましたね。

&nbsp;

まぁここは割合の問題というよりは、あくまでもセマンティックで重複のないコードを目指す上での問題なのでそれらを鑑みて
「どうすれば一見で理解できて、整理されたコードになるのか」
というのを考えながらリファクタして答えを見つけていいかないといけません。

&nbsp;
<h3 class=""section"">jsをどれくらい使うかでコードが変わりそう</h3>
&nbsp;

今回一応JQueryも使っているのですが、本格的にJQueryでクラスを当てたり外したりということはせず、いくつかのアニメーションを極力cssで実現できるようにしました。

modalに関しては、modal-cssを使ったので、jsをほとんど自分で書くことはなく、カルーセルでもslick.jsでslickの関数呼び出し、アコーディオンでのクラスの割り当てに簡単にjs使うくらいでした。

JQueryをもっとバリバリ書いていくとよりステートコードが増えていきそうです。

ランディングページだけなのであまりJS書かなくて済んでいますが、もう少しページが増えて大規模になってくるとJQueryも必要になってきそうなので、実際の現場ではもう少し、ステートのコードの割合は増えそうな気がしています。

&nbsp;
<h2 class=""chapter"">工夫したこと</h2>
&nbsp;

簡単に今回自分なりに工夫したことを書くと以下になります。
<ul>
 	<li>テーマの層が有効に使えるようにした。</li>
 	<li>アコーディオンやボーダーのアニメーションなどが極力HTMLに依存しないようにした。</li>
</ul>
&nbsp;
<h3 class=""section"">テーマの層が有効に使えるようにした</h3>
&nbsp;

SMACSSの原本によるとテーマの層はプロジェクトによって存在しない場合があるそうですが、テーマはサイトの見た目の変更をユーザに委ねる場合などで使われるようです。

ようは、見た目の変更をユーザの好みに合わせてできるようにしますよということです。

&nbsp;

今回上のディレクトリ構造の写真によると_variable.scssというファイルと、theme/_default.scssというファイルがあります。

これが何をやっているかというと、
_variable.scssでサイトで使う色やフォント、フォントのサイズなどを変数を使って定義しています。

&nbsp;

さらに今回は、_variable.scssでは主に、ユーザがいじれないような変数を定義して、theme下のファイルで代表的な色をユーザの好みに合わせて色を変更できるようにしました。

スクショだと、theme下に4つのファイルがありますが、それぞれサイトの色を変更できるテーマファイルになっていて読み込むファイルを変更することで、サイト内で使われる色を変更できます。

&nbsp;

下記の例では、default.scssを読み込んでいます。
<pre><code>@import 'theme/default';
// @import 'theme/theme1';
// @import 'theme/theme2';
// @import 'theme/theme3';



/* bg-color{{{ */
$primary-bg-color: map-get($color-map,site-base-white-color);
$secondary-bg-color: map-get($color-map,site-quaternary-color);
・
・
&lt; 略 &gt;
</code></pre>
&nbsp;

それぞれの例は、下記URLで確認できます。

<a href=""https://version-1.github.io/smacss-sample/example/default/"">default</a>

<a href=""https://version-1.github.io/smacss-sample/example/theme1/"">theme1</a>

<a href=""https://version-1.github.io/smacss-sample/example/theme2/"">theme2</a>

<a href=""https://version-1.github.io/smacss-sample/example/theme3/"">theme3</a>

&nbsp;

&nbsp;
<h3 class=""section"">モジュールのアニメーションがHTMLに依存しないようにした</h3>
&nbsp;

アコーディオンを今回自前で実装しました。がアコーディオンのアニメーションをこのページ二箇所で使えるように実装しました。

一つはFAQのコーナーで、一つは画面幅が狭い時のメニューです。

どちらも、隠れていたオブジェクトが表示される際にアコーディオンが開くのをイメージした形で実装されています。

&nbsp;

また、hover（マウスオーバー）した際に発火する下線のアニメーションもhtmlにクラスを追加するだけで、アニメーションが実現できるようにしました。

これらに関してどのアニメーションも要素タグを使っていないので、HTMLと疎結合な形でCSSを実装することができました。

&nbsp;
<h2 class=""chapter"">まとめ</h2>
&nbsp;

ここまで色々とまとめましたが、正直まだSMACSSはわからないです。。

SMACSSは意識しつつもOOCSSも意識して構造と見た目は分離した方がいいのか
やこれは本当にモジュールとして定義していいのか

などなど疑問はつきません。

&nbsp;

まぁどのスタイルガイドを採用するにせよ、セマンティックで変更に強い重複のない設計が求められるとは思うのですが、これは最初に実装してみた後に徐々に変更を加えてみると

「このコード変更するときにやたらコード書くな」

みたいな違和感を感じてコードのよくない部分に気づける気がしています。

実装完了した時は完璧に実装できているように見えるけど、実際に拡張してみたりのちの変更に対応してみるといかに最初の設計の弱い部分が見えてくるのでしょう。

&nbsp;

今回紹介したコードも暫定的なものなので、これらを差し引いてみて頂けると嬉しいです。
今回は設計の話がメインでしたが、SMACSSで書いてみるに当たって新たに学んだコンポーネントのつくり方なども紹介して行ければと思います!!

では

[after_article]"
"1544","2017-12-03 22:40:16","2018-08-26 01:02:16","Amazon,楽天,7netで本を紹介できるヨメレバをcssカスタマイズ","yomereba","https://ver-1-0.net/wp-content/uploads/2017/12/buttons.jpg","colum::::engineering::::design","<h2 class=""chapter"">ヨメレバとは？</h2>
<div class=""cstmreba"">
<div class=""booklink-box"">
<div class=""booklink-image""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4877710787/llg01-22/"" target=""_blank"" rel=""nofollow noopener""><img style=""border: none;"" src=""https://images-fe.ssl-images-amazon.com/images/I/51-akDCvHzL._SL320_.jpg"" /></a></div>
<div class=""booklink-info"">
<div class=""booklink-name"">

<a href=""http://www.amazon.co.jp/exec/obidos/asin/4877710787/llg01-22/"" target=""_blank"" rel=""nofollow noopener"">仕事は楽しいかね?</a>
<div class=""booklink-powered-date"">posted with <a href=""https://yomereba.com"" target=""_blank"" rel=""nofollow noopener"">ヨメレバ</a></div>
</div>
<div class=""booklink-detail"">デイル ドーテン きこ書房 2001-12-01</div>
<div class=""booklink-link2"">
<div class=""shoplinkamazon""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4877710787/llg01-22/"" target=""_blank"" rel=""nofollow noopener"">Amazonで購入</a></div>
<div class=""shoplinkkindle""><a href=""http://www.amazon.co.jp/exec/obidos/ASIN/B00SIM19YS/llg01-22/"" target=""_blank"" rel=""nofollow noopener"">Kindleで購入</a></div>
<div class=""shoplinkrakuten""><a href=""https://hb.afl.rakuten.co.jp/hgc/163854b7.d97e8d5b.163854b8.3c41ae34/?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F1401136%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F"" target=""_blank"" rel=""nofollow noopener"">楽天ブックスで購入</a></div>
<div class=""shoplinkseven""><a href=""https://px.a8.net/svt/ejp?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2&amp;a8ejpredirect=http%3A%2F%2F7af-ent.omni7.jp%2Frelay%2Faffiliate%2FentranceProcess.do%3Furl%3Dhttp%253A%252F%252F7net.omni7.jp%252Fsearch%252F%253FsearchKeywordFlg%253D1%2526keyword%253D4-87-771078-1%252520%25257C%2525204-877-71078-1%252520%25257C%2525204-8777-1078-1%252520%25257C%2525204-87771-078-1%252520%25257C%2525204-877710-78-1%252520%25257C%2525204-8777107-8-1"" target=""_blank"" rel=""nofollow noopener"">7netで購入</a><img src=""https://www17.a8.net/0.gif?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2"" alt="""" width=""1"" height=""1"" border=""0"" /></div>
</div>
</div>
<div class=""booklink-footer""></div>
</div>
</div>
&nbsp;

&nbsp;

色々な方のブログを見ているとこのように本を紹介して、アマゾンや楽天のリンクを貼り付けているのを見るかと思うのですが、これらは全てヨメレバという書籍紹介用のブログパーツを利用しています。

リンクはこちらになります。
<a href=""https://yomereba.com/"">ヨメレバ</a>

&nbsp;

こちらでAmazonのアフィリエイトIDや楽天のアフィリエイトIDを登録すると、上のようなブログパーツが出来上がります。細かい作成方法はリンク先に譲りますが、今回はそんあブログパーツを自信のサイトに導入したので共有させて頂きました。
<h2 class=""chapter"">一つのサービスのリンクしか紹介していないもったいないことしていませんか？</h2>
&nbsp;

私もこの記事を書く前に設置した口なのであまり他人のこと言えませんが、設置の動機となったので書かせてもらいます。

&nbsp;

サイトには、希望の本を購入したいという目的は同じであれど、Kindleで読みたいという人と楽天でポイント貯めているから楽天Booksを利用するという人など様々な事情を持った方が訪れます。

&nbsp;

そこでAmazonへのリンクしかないとか楽天へのリンクしかないとかなるとサイトに訪れたユーザの希望のリンクがない場合は機会損失となってしまいます。

そんな勿体無い状態を少しでも解消できるのがこのヨメレバというツールになります。

&nbsp;

オススメする本を購入して欲しいという方はこの機会にぜひこのブログパーツを導入してみましょう。

本記事では簡単な導入方法と自分が行なったカスタマイズについて紹介します。

[after_intro]

&nbsp;
<h2 class=""chapter"">ヨメレバをcssカスタマイズ(verison1の場合)</h2>
&nbsp;

※必要なAmazon,楽天のアフィリエイトIDはすでに入力しているものとします。

&nbsp;

ヨメレバでは、下記のような画面でISBNを入力してブログパーツを作成します。
ISBNは書籍を識別する一意のコードで「本の題名 ISBN」などでググればISBNはわかります。

&nbsp;

ヨメレバでは表示形式をいくつか選択できますが当ブログ導入時は、amazlet風-2(cssカスタマイズ風)というレイアウトのものを選択しました。

&nbsp;

<img class=""alignnone size-full wp-image-1545"" src=""https://ver-1-0.net/wp-content/uploads/2017/12/yomereba.png"" alt=""ヨメレバブログパーツ作成フォーム"" width=""894"" height=""840"" />

&nbsp;

必要項目を入力して表示ボタンを押すと貼り付け用のHTMLが生成されます。
このHTMLを自身のブログの表示させたい部分に貼り付ければ完了です。

&nbsp;

ここまでで本を紹介するという目的は達成できているのですが、自身でもう少しカスタマイズしたかったのでcssを追加して、表示をカスタマイズしました。

テーマは<strong>「ついクリックしたくなるカスタマイズ」</strong>です！！
どうでしょうか？？こういう感じにしてみました。
<div class=""cstmreba"">
<div class=""booklink-box"">
<div class=""booklink-image""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4877710787/llg01-22/"" target=""_blank"" rel=""nofollow noopener""><img style=""border: none;"" src=""https://images-fe.ssl-images-amazon.com/images/I/51-akDCvHzL._SL320_.jpg"" /></a></div>
<div class=""booklink-info"">
<div class=""booklink-name"">

<a href=""http://www.amazon.co.jp/exec/obidos/asin/4877710787/llg01-22/"" target=""_blank"" rel=""nofollow noopener"">仕事は楽しいかね?</a>
<div class=""booklink-powered-date"">posted with <a href=""https://yomereba.com"" target=""_blank"" rel=""nofollow noopener"">ヨメレバ</a></div>
</div>
<div class=""booklink-detail"">デイル ドーテン きこ書房 2001-12-01</div>
<div class=""booklink-link2"">
<div class=""shoplinkamazon""><a href=""http://www.amazon.co.jp/exec/obidos/asin/4877710787/llg01-22/"" target=""_blank"" rel=""nofollow noopener"">Amazonで購入</a></div>
<div class=""shoplinkkindle""><a href=""http://www.amazon.co.jp/exec/obidos/ASIN/B00SIM19YS/llg01-22/"" target=""_blank"" rel=""nofollow noopener"">Kindleで購入</a></div>
<div class=""shoplinkrakuten""><a href=""https://hb.afl.rakuten.co.jp/hgc/163854b7.d97e8d5b.163854b8.3c41ae34/?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F1401136%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F"" target=""_blank"" rel=""nofollow noopener"">楽天ブックスで購入</a></div>
<div class=""shoplinkseven""><a href=""https://px.a8.net/svt/ejp?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2&amp;a8ejpredirect=http%3A%2F%2F7af-ent.omni7.jp%2Frelay%2Faffiliate%2FentranceProcess.do%3Furl%3Dhttp%253A%252F%252F7net.omni7.jp%252Fsearch%252F%253FsearchKeywordFlg%253D1%2526keyword%253D4-87-771078-1%252520%25257C%2525204-877-71078-1%252520%25257C%2525204-8777-1078-1%252520%25257C%2525204-87771-078-1%252520%25257C%2525204-877710-78-1%252520%25257C%2525204-8777107-8-1"" target=""_blank"" rel=""nofollow noopener"">7netで購入</a><img src=""https://www17.a8.net/0.gif?a8mat=2TXHHI+FDP7OQ+2N1Y+BW8O2"" alt="""" width=""1"" height=""1"" border=""0"" /></div>
</div>
</div>
<div class=""booklink-footer""></div>
</div>
</div>
コードは以下に張っていますので参考にして頂ければ。

&nbsp;
<pre><code class=""language-css"">/* Yomereba */
@media (min-width: 770px) {
    .cstmreba{display: table;}
    .cstmreba .booklink-image{
        display: table-cell; 
        float: left;
        padding: 0 30px;
     }
    .cstmreba .booklink-info{
        display: table-cell;
        padding: 0 30px;
    }

 }
.cstmreba{
    padding: 15px;
    border:1px solid #ededed;
    font-family:-apple-system, BlinkMacSystemFont, ""Helvetica Neue"", ""Segoe UI"",""Noto Sans Japanese"",""ヒラギノ角ゴ ProN W3"", Meiryo, sans-serif;
}
.cstmreba .booklink-image{
    text-align: center;
}

.cstmreba .booklink-info{
    text-align: center;
}
.booklink-name{
    margin-top: 30px;
    margin-bottom: 15px;
}
.booklink-name a{
    font-size: 18px;
}
.booklink-detail{
    margin: 0px  10px;
}
.shoplinkamazon a,
.shoplinkkindle a,
.shoplinkrakuten a,
.shoplinkseven a {
    display: block;
    background: red;
    margin: 10px;
    padding: 15px;
    text-decoration:none;
    color: white;
    text-align: center;
    box-shadow: 0px 5px 0px 0px lightgray;
}

.shoplinkamazon a{
    border: 1px solid #E55812;
　background: #E55812;
  box-shadow: 0px 5px 2px 0px #E55812;
}

.shoplinkkindle a{
  border: 1px solid #EC058E;
  background: #EC058E;
  box-shadow: 0px 5px 2px 0px #EC058E;
}

.shoplinkrakuten a{
  border: 1px solid #2A2D34;
  background: #2A2D34;
  box-shadow: 0px 5px 5px 0px #2A2D34;
}
.shoplinkseven a{
  border: 1px solid #62BBC1;
  background: #62BBC1;
  box-shadow: 0px 5px 5px 0px #62BBC1;
}
/* Yomereba */
</code></pre>
&nbsp;

このコードを使えば上記のような本紹介のパーツが出来上がります。

&nbsp;

通常では2カラムのレイアウトで表示されますが、画面サイズが狭い場合にも対応しており、画面幅が狭い場合は1カラムのレイアウトで表示されます。
※ご自身のPCのスクリーンを縮小させて見たり携帯から見てみて、ご確認ください。

もし、こちらのカスタマイズがお気に入りになったら、<strong>どんどんパクちゃってください。変更も自由にしてしまって構いません。</strong>

&nbsp;

色合いを変更する場合は,

&nbsp;
<pre><code class=""language-css"">.shoplinkamazon a{
    border: 1px solid #E55812;
　background: #E55812;
  box-shadow: 0px 5px 2px 0px #E55812;
}

.shoplinkkindle a{
  border: 1px solid #EC058E;
  background: #EC058E;
  box-shadow: 0px 5px 2px 0px #EC058E;
}

.shoplinkrakuten a{
  border: 1px solid #2A2D34;
  background: #2A2D34;
  box-shadow: 0px 5px 5px 0px #2A2D34;
}
.shoplinkseven a{
  border: 1px solid #62BBC1;
  background: #62BBC1;
  box-shadow: 0px 5px 5px 0px #62BBC1;
}
</code></pre>
&nbsp;

ここら辺のbackgroundやborder,box-shadowあたりを変更してくだされば色合いは変更できます。

配色が難しいという方は、<a href=""https://coolors.co/"">coolors.co</a>あたりをお使いになると良いと思います。

&nbsp;

紹介記事も書いているので興味があればどうぞ
<a href=""https://ver-1-0.net/2017/11/15/cooler-co-convinent-color-tool/"">=&gt;サイトやfaviconを作成するときに使える配色自動生成ツール coolors.co</a>

&nbsp;

&nbsp;

[after_intro]"
